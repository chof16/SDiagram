/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./css/diagram.css":
/*!***************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./css/diagram.css ***!
  \***************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".sprotty-graph {\n    font-size: 15pt;\n}\n\n.sprotty-node {\n    stroke-width: 0;\n    font-weight: bold;\n}\n\n.sprotty-node.selected {\n    stroke-width: 5;\n}\n\n.sprotty-node.mouseover:not(.selected) {\n    stroke-width: 3;\n}\n\n.node-class {\n    fill: #cdc;\n    stroke: #152;\n}\n\n.node-package {\n    fill: #d0c8c0;\n    stroke: #541;\n}\n\n.sprotty-comp {\n    line-height: 3px;\n    font-weight: normal;\n    text-align: left;\n}\n\n.sprotty-label {\n    stroke-width: 0;\n    fill: #000;\n    font-weight: inherit;\n    text-align: inherit;\n    font-size: 100%;\n}\n\n.sprotty-label.heading {\n    font-weight: bold;\n}\n\n.sprotty-icon {\n    fill: #153;\n    stroke-width: 0;\n}\n\n.sprotty-label.icon {\n    fill: #fff;\n}\n\n.sprotty-button {\n    fill: #152;\n    stroke-width: 0;\n}\n\n.sprotty-edge {\n    fill: none;\n    stroke: #488;\n    stroke-width: 2px;\n}\n\n.sprotty-edge.selected {\n    stroke: #844;\n    stroke-width: 4px;\n}\n\n.sprotty-edge.mouseover:not(.selected) {\n    stroke-width: 3px;\n}\n\n.sprotty-edge > .sprotty-routing-handle {\n    fill: #884;\n    stroke: none;\n    z-index: 1000;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='line'] {\n    opacity: 0.35;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='bezier-add'] {\n    fill: #2B2;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='bezier-remove'] {\n    fill: #B00;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='bezier-control-before'] {\n    fill: #44E;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='bezier-control-after'] {\n    fill: #44E;\n}\n\n.sprotty-edge > .sprotty-routing-handle.selected {\n    fill: #66a;\n}\n\n.sprotty-edge > .sprotty-routing-handle.mouseover {\n    stroke: #112;\n    stroke-width: 1;\n}\n\n.sprotty-missing {\n    stroke-width: 1;\n    stroke: #f00;\n    fill: #f00;\n    font-size: 14pt;\n    text-anchor: middle;\n}\n\n.sprotty-popup-title {\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.sprotty-popup-body > p {\n    margin-bottom: 2px;\n}", "",{"version":3,"sources":["webpack://./css/diagram.css"],"names":[],"mappings":"AAAA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,UAAU;IACV,oBAAoB;IACpB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,UAAU;IACV,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;AACtB","sourcesContent":[".sprotty-graph {\n    font-size: 15pt;\n}\n\n.sprotty-node {\n    stroke-width: 0;\n    font-weight: bold;\n}\n\n.sprotty-node.selected {\n    stroke-width: 5;\n}\n\n.sprotty-node.mouseover:not(.selected) {\n    stroke-width: 3;\n}\n\n.node-class {\n    fill: #cdc;\n    stroke: #152;\n}\n\n.node-package {\n    fill: #d0c8c0;\n    stroke: #541;\n}\n\n.sprotty-comp {\n    line-height: 3px;\n    font-weight: normal;\n    text-align: left;\n}\n\n.sprotty-label {\n    stroke-width: 0;\n    fill: #000;\n    font-weight: inherit;\n    text-align: inherit;\n    font-size: 100%;\n}\n\n.sprotty-label.heading {\n    font-weight: bold;\n}\n\n.sprotty-icon {\n    fill: #153;\n    stroke-width: 0;\n}\n\n.sprotty-label.icon {\n    fill: #fff;\n}\n\n.sprotty-button {\n    fill: #152;\n    stroke-width: 0;\n}\n\n.sprotty-edge {\n    fill: none;\n    stroke: #488;\n    stroke-width: 2px;\n}\n\n.sprotty-edge.selected {\n    stroke: #844;\n    stroke-width: 4px;\n}\n\n.sprotty-edge.mouseover:not(.selected) {\n    stroke-width: 3px;\n}\n\n.sprotty-edge > .sprotty-routing-handle {\n    fill: #884;\n    stroke: none;\n    z-index: 1000;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='line'] {\n    opacity: 0.35;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='bezier-add'] {\n    fill: #2B2;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='bezier-remove'] {\n    fill: #B00;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='bezier-control-before'] {\n    fill: #44E;\n}\n\n.sprotty-edge > .sprotty-routing-handle[data-kind='bezier-control-after'] {\n    fill: #44E;\n}\n\n.sprotty-edge > .sprotty-routing-handle.selected {\n    fill: #66a;\n}\n\n.sprotty-edge > .sprotty-routing-handle.mouseover {\n    stroke: #112;\n    stroke-width: 1;\n}\n\n.sprotty-missing {\n    stroke-width: 1;\n    stroke: #f00;\n    fill: #f00;\n    font-size: 14pt;\n    text-anchor: middle;\n}\n\n.sprotty-popup-title {\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.sprotty-popup-body > p {\n    margin-bottom: 2px;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/autocompleter/autocomplete.js":
/*!****************************************************!*\
  !*** ./node_modules/autocompleter/autocomplete.js ***!
  \****************************************************/
/***/ (function(module) {

(function (global, factory) {
     true ? module.exports = factory() :
    0;
}(this, (function () { 'use strict';

    /*
     * https://github.com/kraaden/autocomplete
     * Copyright (c) 2016 Denys Krasnoshchok
     * MIT License
     */
    function autocomplete(settings) {
        // just an alias to minimize JS file size
        var doc = document;
        var container = settings.container || doc.createElement("div");
        container.id = container.id || "autocomplete-" + uid();
        var containerStyle = container.style;
        var debounceWaitMs = settings.debounceWaitMs || 0;
        var preventSubmit = settings.preventSubmit || false;
        var disableAutoSelect = settings.disableAutoSelect || false;
        var items = [];
        var inputValue = "";
        var minLen = 2;
        var showOnFocus = settings.showOnFocus;
        var selected;
        var keypressCounter = 0;
        var debounceTimer;
        if (settings.minLength !== undefined) {
            minLen = settings.minLength;
        }
        if (!settings.input) {
            throw new Error("input undefined");
        }
        var input = settings.input;
        container.className = "autocomplete " + (settings.className || "");
        container.setAttribute("role", "listbox");
        input.setAttribute("role", "combobox");
        input.setAttribute("aria-expanded", "false");
        input.setAttribute("aria-autocomplete", "list");
        input.setAttribute("aria-controls", container.id);
        input.setAttribute("aria-owns", container.id);
        input.setAttribute("aria-activedescendant", "");
        input.setAttribute("aria-haspopup", "listbox");
        // IOS implementation for fixed positioning has many bugs, so we will use absolute positioning
        containerStyle.position = "absolute";
        /**
         * Generate a unique ID
         */
        function uid() {
            return Date.now().toString(36) + Math.random().toString(36).substring(2);
        }
        /**
         * Detach the container from DOM
         */
        function detach() {
            var parent = container.parentNode;
            if (parent) {
                parent.removeChild(container);
            }
        }
        /**
         * Clear debouncing timer if assigned
         */
        function clearDebounceTimer() {
            if (debounceTimer) {
                window.clearTimeout(debounceTimer);
            }
        }
        /**
         * Attach the container to DOM
         */
        function attach() {
            if (!container.parentNode) {
                doc.body.appendChild(container);
            }
        }
        /**
         * Check if container for autocomplete is displayed
         */
        function containerDisplayed() {
            return !!container.parentNode;
        }
        /**
         * Clear autocomplete state and hide container
         */
        function clear() {
            // prevent the update call if there are pending AJAX requests
            keypressCounter++;
            items = [];
            inputValue = "";
            selected = undefined;
            input.setAttribute("aria-activedescendant", "");
            input.setAttribute("aria-expanded", "false");
            detach();
        }
        /**
         * Update autocomplete position
         */
        function updatePosition() {
            if (!containerDisplayed()) {
                return;
            }
            input.setAttribute("aria-expanded", "true");
            containerStyle.height = "auto";
            containerStyle.width = input.offsetWidth + "px";
            var maxHeight = 0;
            var inputRect;
            function calc() {
                var docEl = doc.documentElement;
                var clientTop = docEl.clientTop || doc.body.clientTop || 0;
                var clientLeft = docEl.clientLeft || doc.body.clientLeft || 0;
                var scrollTop = window.pageYOffset || docEl.scrollTop;
                var scrollLeft = window.pageXOffset || docEl.scrollLeft;
                inputRect = input.getBoundingClientRect();
                var top = inputRect.top + input.offsetHeight + scrollTop - clientTop;
                var left = inputRect.left + scrollLeft - clientLeft;
                containerStyle.top = top + "px";
                containerStyle.left = left + "px";
                maxHeight = window.innerHeight - (inputRect.top + input.offsetHeight);
                if (maxHeight < 0) {
                    maxHeight = 0;
                }
                containerStyle.top = top + "px";
                containerStyle.bottom = "";
                containerStyle.left = left + "px";
                containerStyle.maxHeight = maxHeight + "px";
            }
            // the calc method must be called twice, otherwise the calculation may be wrong on resize event (chrome browser)
            calc();
            calc();
            if (settings.customize && inputRect) {
                settings.customize(input, inputRect, container, maxHeight);
            }
        }
        /**
         * Redraw the autocomplete div element with suggestions
         */
        function update() {
            // delete all children from autocomplete DOM container
            while (container.firstChild) {
                container.removeChild(container.firstChild);
            }
            input.setAttribute("aria-activedescendant", "");
            // function for rendering autocomplete suggestions
            var render = function (item, _, __) {
                var itemElement = doc.createElement("div");
                itemElement.textContent = item.label || "";
                return itemElement;
            };
            if (settings.render) {
                render = settings.render;
            }
            // function to render autocomplete groups
            var renderGroup = function (groupName, _) {
                var groupDiv = doc.createElement("div");
                groupDiv.textContent = groupName;
                return groupDiv;
            };
            if (settings.renderGroup) {
                renderGroup = settings.renderGroup;
            }
            var fragment = doc.createDocumentFragment();
            var prevGroup = "#9?$";
            items.forEach(function (item, index) {
                if (item.group && item.group !== prevGroup) {
                    prevGroup = item.group;
                    var groupDiv = renderGroup(item.group, inputValue);
                    if (groupDiv) {
                        groupDiv.className += " group";
                        fragment.appendChild(groupDiv);
                    }
                }
                var div = render(item, inputValue, index);
                if (div) {
                    div.id = container.id + "_" + index;
                    div.setAttribute("role", "option");
                    div.addEventListener("click", function (ev) {
                        settings.onSelect(item, input);
                        clear();
                        ev.preventDefault();
                        ev.stopPropagation();
                    });
                    if (item === selected) {
                        div.className += " selected";
                        div.setAttribute("aria-selected", "true");
                        input.setAttribute("aria-activedescendant", div.id);
                    }
                    fragment.appendChild(div);
                }
            });
            container.appendChild(fragment);
            if (items.length < 1) {
                if (settings.emptyMsg) {
                    var empty = doc.createElement("div");
                    empty.id = container.id + "_" + uid();
                    empty.className = "empty";
                    empty.textContent = settings.emptyMsg;
                    container.appendChild(empty);
                    input.setAttribute("aria-activedescendant", empty.id);
                }
                else {
                    clear();
                    return;
                }
            }
            attach();
            updatePosition();
            updateScroll();
        }
        function updateIfDisplayed() {
            if (containerDisplayed()) {
                update();
            }
        }
        function resizeEventHandler() {
            updateIfDisplayed();
        }
        function scrollEventHandler(e) {
            if (e.target !== container) {
                updateIfDisplayed();
            }
            else {
                e.preventDefault();
            }
        }
        function keyupEventHandler(ev) {
            var keyCode = ev.which || ev.keyCode || 0;
            var ignore = settings.keysToIgnore || [38 /* Up */, 13 /* Enter */, 27 /* Esc */, 39 /* Right */, 37 /* Left */, 16 /* Shift */, 17 /* Ctrl */, 18 /* Alt */, 20 /* CapsLock */, 91 /* WindowsKey */, 9 /* Tab */];
            for (var _i = 0, ignore_1 = ignore; _i < ignore_1.length; _i++) {
                var key = ignore_1[_i];
                if (keyCode === key) {
                    return;
                }
            }
            if (keyCode >= 112 /* F1 */ && keyCode <= 123 /* F12 */ && !settings.keysToIgnore) {
                return;
            }
            // the down key is used to open autocomplete
            if (keyCode === 40 /* Down */ && containerDisplayed()) {
                return;
            }
            startFetch(0 /* Keyboard */);
        }
        /**
         * Automatically move scroll bar if selected item is not visible
         */
        function updateScroll() {
            var elements = container.getElementsByClassName("selected");
            if (elements.length > 0) {
                var element = elements[0];
                // make group visible
                var previous = element.previousElementSibling;
                if (previous && previous.className.indexOf("group") !== -1 && !previous.previousElementSibling) {
                    element = previous;
                }
                if (element.offsetTop < container.scrollTop) {
                    container.scrollTop = element.offsetTop;
                }
                else {
                    var selectBottom = element.offsetTop + element.offsetHeight;
                    var containerBottom = container.scrollTop + container.offsetHeight;
                    if (selectBottom > containerBottom) {
                        container.scrollTop += selectBottom - containerBottom;
                    }
                }
            }
        }
        /**
         * Select the previous item in suggestions
         */
        function selectPrev() {
            if (items.length < 1) {
                selected = undefined;
            }
            else {
                if (selected === items[0]) {
                    selected = items[items.length - 1];
                }
                else {
                    for (var i = items.length - 1; i > 0; i--) {
                        if (selected === items[i] || i === 1) {
                            selected = items[i - 1];
                            break;
                        }
                    }
                }
            }
        }
        /**
         * Select the next item in suggestions
         */
        function selectNext() {
            if (items.length < 1) {
                selected = undefined;
            }
            if (!selected || selected === items[items.length - 1]) {
                selected = items[0];
                return;
            }
            for (var i = 0; i < (items.length - 1); i++) {
                if (selected === items[i]) {
                    selected = items[i + 1];
                    break;
                }
            }
        }
        function keydownEventHandler(ev) {
            var keyCode = ev.which || ev.keyCode || 0;
            if (keyCode === 38 /* Up */ || keyCode === 40 /* Down */ || keyCode === 27 /* Esc */) {
                var containerIsDisplayed = containerDisplayed();
                if (keyCode === 27 /* Esc */) {
                    clear();
                }
                else {
                    if (!containerIsDisplayed || items.length < 1) {
                        return;
                    }
                    keyCode === 38 /* Up */
                        ? selectPrev()
                        : selectNext();
                    update();
                }
                ev.preventDefault();
                if (containerIsDisplayed) {
                    ev.stopPropagation();
                }
                return;
            }
            if (keyCode === 13 /* Enter */) {
                if (selected) {
                    settings.onSelect(selected, input);
                    clear();
                }
                if (preventSubmit) {
                    ev.preventDefault();
                }
            }
        }
        function focusEventHandler() {
            if (showOnFocus) {
                startFetch(1 /* Focus */);
            }
        }
        function startFetch(trigger) {
            // If multiple keys were pressed, before we get an update from server,
            // this may cause redrawing autocomplete multiple times after the last key was pressed.
            // To avoid this, the number of times keyboard was pressed will be saved and checked before redraw.
            var savedKeypressCounter = ++keypressCounter;
            var inputText = input.value;
            var cursorPos = input.selectionStart || 0;
            if (inputText.length >= minLen || trigger === 1 /* Focus */) {
                clearDebounceTimer();
                debounceTimer = window.setTimeout(function () {
                    settings.fetch(inputText, function (elements) {
                        if (keypressCounter === savedKeypressCounter && elements) {
                            items = elements;
                            inputValue = inputText;
                            selected = (items.length < 1 || disableAutoSelect) ? undefined : items[0];
                            update();
                        }
                    }, trigger, cursorPos);
                }, trigger === 0 /* Keyboard */ ? debounceWaitMs : 0);
            }
            else {
                clear();
            }
        }
        function blurEventHandler() {
            // we need to delay clear, because when we click on an item, blur will be called before click and remove items from DOM
            setTimeout(function () {
                if (doc.activeElement !== input) {
                    clear();
                }
            }, 200);
        }
        /**
         * Fixes #26: on long clicks focus will be lost and onSelect method will not be called
         */
        container.addEventListener("mousedown", function (evt) {
            evt.stopPropagation();
            evt.preventDefault();
        });
        /**
         * Fixes #30: autocomplete closes when scrollbar is clicked in IE
         * See: https://stackoverflow.com/a/9210267/13172349
         */
        container.addEventListener("focus", function () { return input.focus(); });
        /**
         * This function will remove DOM elements and clear event handlers
         */
        function destroy() {
            input.removeEventListener("focus", focusEventHandler);
            input.removeEventListener("keydown", keydownEventHandler);
            input.removeEventListener("keyup", keyupEventHandler);
            input.removeEventListener("blur", blurEventHandler);
            window.removeEventListener("resize", resizeEventHandler);
            doc.removeEventListener("scroll", scrollEventHandler, true);
            input.removeAttribute("role");
            input.removeAttribute("aria-expanded");
            input.removeAttribute("aria-autocomplete");
            input.removeAttribute("aria-controls");
            input.removeAttribute("aria-activedescendant");
            input.removeAttribute("aria-owns");
            input.removeAttribute("aria-haspopup");
            clearDebounceTimer();
            clear();
        }
        // setup event handlers
        input.addEventListener("keydown", keydownEventHandler);
        input.addEventListener("keyup", keyupEventHandler);
        input.addEventListener("blur", blurEventHandler);
        input.addEventListener("focus", focusEventHandler);
        window.addEventListener("resize", resizeEventHandler);
        doc.addEventListener("scroll", scrollEventHandler, true);
        return {
            destroy: destroy
        };
    }

    return autocomplete;

})));


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/file-saver/dist/FileSaver.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof __webpack_require__.g&&__webpack_require__.g.global===__webpack_require__.g?__webpack_require__.g:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g, true&&(module.exports=g)});



/***/ }),

/***/ "./node_modules/inversify/lib/annotation/decorator_utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/decorator_utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tagProperty = exports.tagParameter = exports.decorate = void 0;
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
function tagParameter(annotationTarget, propertyName, parameterIndex, metadata) {
    var metadataKey = METADATA_KEY.TAGGED;
    _tagParameterOrProperty(metadataKey, annotationTarget, propertyName, metadata, parameterIndex);
}
exports.tagParameter = tagParameter;
function tagProperty(annotationTarget, propertyName, metadata) {
    var metadataKey = METADATA_KEY.TAGGED_PROP;
    _tagParameterOrProperty(metadataKey, annotationTarget.constructor, propertyName, metadata);
}
exports.tagProperty = tagProperty;
function _tagParameterOrProperty(metadataKey, annotationTarget, propertyName, metadata, parameterIndex) {
    var paramsOrPropertiesMetadata = {};
    var isParameterDecorator = (typeof parameterIndex === "number");
    var key = (parameterIndex !== undefined && isParameterDecorator) ? parameterIndex.toString() : propertyName;
    if (isParameterDecorator && propertyName !== undefined) {
        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);
    }
    if (Reflect.hasOwnMetadata(metadataKey, annotationTarget)) {
        paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);
    }
    var paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];
    if (!Array.isArray(paramOrPropertyMetadata)) {
        paramOrPropertyMetadata = [];
    }
    else {
        for (var _i = 0, paramOrPropertyMetadata_1 = paramOrPropertyMetadata; _i < paramOrPropertyMetadata_1.length; _i++) {
            var m = paramOrPropertyMetadata_1[_i];
            if (m.key === metadata.key) {
                throw new Error(ERROR_MSGS.DUPLICATED_METADATA + " " + m.key.toString());
            }
        }
    }
    paramOrPropertyMetadata.push(metadata);
    paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;
    Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);
}
function _decorate(decorators, target) {
    Reflect.decorate(decorators, target);
}
function _param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); };
}
function decorate(decorator, target, parameterIndex) {
    if (typeof parameterIndex === "number") {
        _decorate([_param(parameterIndex, decorator)], target);
    }
    else if (typeof parameterIndex === "string") {
        Reflect.decorate([decorator], target, parameterIndex);
    }
    else {
        _decorate([decorator], target);
    }
}
exports.decorate = decorate;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/inject.js":
/*!*********************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/inject.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.inject = exports.LazyServiceIdentifer = void 0;
var error_msgs_1 = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var decorator_utils_1 = __webpack_require__(/*! ./decorator_utils */ "./node_modules/inversify/lib/annotation/decorator_utils.js");
var LazyServiceIdentifer = (function () {
    function LazyServiceIdentifer(cb) {
        this._cb = cb;
    }
    LazyServiceIdentifer.prototype.unwrap = function () {
        return this._cb();
    };
    return LazyServiceIdentifer;
}());
exports.LazyServiceIdentifer = LazyServiceIdentifer;
function inject(serviceIdentifier) {
    return function (target, targetKey, index) {
        if (serviceIdentifier === undefined) {
            throw new Error(error_msgs_1.UNDEFINED_INJECT_ANNOTATION(target.name));
        }
        var metadata = new metadata_1.Metadata(METADATA_KEY.INJECT_TAG, serviceIdentifier);
        if (typeof index === "number") {
            decorator_utils_1.tagParameter(target, targetKey, index, metadata);
        }
        else {
            decorator_utils_1.tagProperty(target, targetKey, metadata);
        }
    };
}
exports.inject = inject;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/injectable.js":
/*!*************************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/injectable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.injectable = void 0;
var ERRORS_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
function injectable() {
    return function (target) {
        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {
            throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);
        }
        var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];
        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);
        return target;
    };
}
exports.injectable = injectable;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/multi_inject.js":
/*!***************************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/multi_inject.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.multiInject = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var decorator_utils_1 = __webpack_require__(/*! ./decorator_utils */ "./node_modules/inversify/lib/annotation/decorator_utils.js");
function multiInject(serviceIdentifier) {
    return function (target, targetKey, index) {
        var metadata = new metadata_1.Metadata(METADATA_KEY.MULTI_INJECT_TAG, serviceIdentifier);
        if (typeof index === "number") {
            decorator_utils_1.tagParameter(target, targetKey, index, metadata);
        }
        else {
            decorator_utils_1.tagProperty(target, targetKey, metadata);
        }
    };
}
exports.multiInject = multiInject;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/named.js":
/*!********************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/named.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.named = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var decorator_utils_1 = __webpack_require__(/*! ./decorator_utils */ "./node_modules/inversify/lib/annotation/decorator_utils.js");
function named(name) {
    return function (target, targetKey, index) {
        var metadata = new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, name);
        if (typeof index === "number") {
            decorator_utils_1.tagParameter(target, targetKey, index, metadata);
        }
        else {
            decorator_utils_1.tagProperty(target, targetKey, metadata);
        }
    };
}
exports.named = named;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/optional.js":
/*!***********************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/optional.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.optional = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var decorator_utils_1 = __webpack_require__(/*! ./decorator_utils */ "./node_modules/inversify/lib/annotation/decorator_utils.js");
function optional() {
    return function (target, targetKey, index) {
        var metadata = new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true);
        if (typeof index === "number") {
            decorator_utils_1.tagParameter(target, targetKey, index, metadata);
        }
        else {
            decorator_utils_1.tagProperty(target, targetKey, metadata);
        }
    };
}
exports.optional = optional;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/post_construct.js":
/*!*****************************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/post_construct.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.postConstruct = void 0;
var ERRORS_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
function postConstruct() {
    return function (target, propertyKey, descriptor) {
        var metadata = new metadata_1.Metadata(METADATA_KEY.POST_CONSTRUCT, propertyKey);
        if (Reflect.hasOwnMetadata(METADATA_KEY.POST_CONSTRUCT, target.constructor)) {
            throw new Error(ERRORS_MSGS.MULTIPLE_POST_CONSTRUCT_METHODS);
        }
        Reflect.defineMetadata(METADATA_KEY.POST_CONSTRUCT, metadata, target.constructor);
    };
}
exports.postConstruct = postConstruct;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/tagged.js":
/*!*********************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/tagged.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tagged = void 0;
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var decorator_utils_1 = __webpack_require__(/*! ./decorator_utils */ "./node_modules/inversify/lib/annotation/decorator_utils.js");
function tagged(metadataKey, metadataValue) {
    return function (target, targetKey, index) {
        var metadata = new metadata_1.Metadata(metadataKey, metadataValue);
        if (typeof index === "number") {
            decorator_utils_1.tagParameter(target, targetKey, index, metadata);
        }
        else {
            decorator_utils_1.tagProperty(target, targetKey, metadata);
        }
    };
}
exports.tagged = tagged;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/target_name.js":
/*!**************************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/target_name.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.targetName = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var decorator_utils_1 = __webpack_require__(/*! ./decorator_utils */ "./node_modules/inversify/lib/annotation/decorator_utils.js");
function targetName(name) {
    return function (target, targetKey, index) {
        var metadata = new metadata_1.Metadata(METADATA_KEY.NAME_TAG, name);
        decorator_utils_1.tagParameter(target, targetKey, index, metadata);
    };
}
exports.targetName = targetName;


/***/ }),

/***/ "./node_modules/inversify/lib/annotation/unmanaged.js":
/*!************************************************************!*\
  !*** ./node_modules/inversify/lib/annotation/unmanaged.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.unmanaged = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var decorator_utils_1 = __webpack_require__(/*! ./decorator_utils */ "./node_modules/inversify/lib/annotation/decorator_utils.js");
function unmanaged() {
    return function (target, targetKey, index) {
        var metadata = new metadata_1.Metadata(METADATA_KEY.UNMANAGED_TAG, true);
        decorator_utils_1.tagParameter(target, targetKey, index, metadata);
    };
}
exports.unmanaged = unmanaged;


/***/ }),

/***/ "./node_modules/inversify/lib/bindings/binding.js":
/*!********************************************************!*\
  !*** ./node_modules/inversify/lib/bindings/binding.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Binding = void 0;
var literal_types_1 = __webpack_require__(/*! ../constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
var id_1 = __webpack_require__(/*! ../utils/id */ "./node_modules/inversify/lib/utils/id.js");
var Binding = (function () {
    function Binding(serviceIdentifier, scope) {
        this.id = id_1.id();
        this.activated = false;
        this.serviceIdentifier = serviceIdentifier;
        this.scope = scope;
        this.type = literal_types_1.BindingTypeEnum.Invalid;
        this.constraint = function (request) { return true; };
        this.implementationType = null;
        this.cache = null;
        this.factory = null;
        this.provider = null;
        this.onActivation = null;
        this.dynamicValue = null;
    }
    Binding.prototype.clone = function () {
        var clone = new Binding(this.serviceIdentifier, this.scope);
        clone.activated = (clone.scope === literal_types_1.BindingScopeEnum.Singleton) ? this.activated : false;
        clone.implementationType = this.implementationType;
        clone.dynamicValue = this.dynamicValue;
        clone.scope = this.scope;
        clone.type = this.type;
        clone.factory = this.factory;
        clone.provider = this.provider;
        clone.constraint = this.constraint;
        clone.onActivation = this.onActivation;
        clone.cache = this.cache;
        return clone;
    };
    return Binding;
}());
exports.Binding = Binding;


/***/ }),

/***/ "./node_modules/inversify/lib/bindings/binding_count.js":
/*!**************************************************************!*\
  !*** ./node_modules/inversify/lib/bindings/binding_count.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingCount = void 0;
var BindingCount = {
    MultipleBindingsAvailable: 2,
    NoBindingsAvailable: 0,
    OnlyOneBindingAvailable: 1
};
exports.BindingCount = BindingCount;


/***/ }),

/***/ "./node_modules/inversify/lib/constants/error_msgs.js":
/*!************************************************************!*\
  !*** ./node_modules/inversify/lib/constants/error_msgs.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.STACK_OVERFLOW = exports.CIRCULAR_DEPENDENCY_IN_FACTORY = exports.POST_CONSTRUCT_ERROR = exports.MULTIPLE_POST_CONSTRUCT_METHODS = exports.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = exports.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = exports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = exports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = exports.ARGUMENTS_LENGTH_MISMATCH = exports.INVALID_DECORATOR_OPERATION = exports.INVALID_TO_SELF_VALUE = exports.INVALID_FUNCTION_BINDING = exports.INVALID_MIDDLEWARE_RETURN = exports.NO_MORE_SNAPSHOTS_AVAILABLE = exports.INVALID_BINDING_TYPE = exports.NOT_IMPLEMENTED = exports.CIRCULAR_DEPENDENCY = exports.UNDEFINED_INJECT_ANNOTATION = exports.MISSING_INJECT_ANNOTATION = exports.MISSING_INJECTABLE_ANNOTATION = exports.NOT_REGISTERED = exports.CANNOT_UNBIND = exports.AMBIGUOUS_MATCH = exports.KEY_NOT_FOUND = exports.NULL_ARGUMENT = exports.DUPLICATED_METADATA = exports.DUPLICATED_INJECTABLE_DECORATOR = void 0;
exports.DUPLICATED_INJECTABLE_DECORATOR = "Cannot apply @injectable decorator multiple times.";
exports.DUPLICATED_METADATA = "Metadata key was used more than once in a parameter:";
exports.NULL_ARGUMENT = "NULL argument";
exports.KEY_NOT_FOUND = "Key Not Found";
exports.AMBIGUOUS_MATCH = "Ambiguous match found for serviceIdentifier:";
exports.CANNOT_UNBIND = "Could not unbind serviceIdentifier:";
exports.NOT_REGISTERED = "No matching bindings found for serviceIdentifier:";
exports.MISSING_INJECTABLE_ANNOTATION = "Missing required @injectable annotation in:";
exports.MISSING_INJECT_ANNOTATION = "Missing required @inject or @multiInject annotation in:";
var UNDEFINED_INJECT_ANNOTATION = function (name) {
    return "@inject called with undefined this could mean that the class " + name + " has " +
        "a circular dependency problem. You can use a LazyServiceIdentifer to  " +
        "overcome this limitation.";
};
exports.UNDEFINED_INJECT_ANNOTATION = UNDEFINED_INJECT_ANNOTATION;
exports.CIRCULAR_DEPENDENCY = "Circular dependency found:";
exports.NOT_IMPLEMENTED = "Sorry, this feature is not fully implemented yet.";
exports.INVALID_BINDING_TYPE = "Invalid binding type:";
exports.NO_MORE_SNAPSHOTS_AVAILABLE = "No snapshot available to restore.";
exports.INVALID_MIDDLEWARE_RETURN = "Invalid return type in middleware. Middleware must return!";
exports.INVALID_FUNCTION_BINDING = "Value provided to function binding must be a function!";
exports.INVALID_TO_SELF_VALUE = "The toSelf function can only be applied when a constructor is " +
    "used as service identifier";
exports.INVALID_DECORATOR_OPERATION = "The @inject @multiInject @tagged and @named decorators " +
    "must be applied to the parameters of a class constructor or a class property.";
var ARGUMENTS_LENGTH_MISMATCH = function () {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return "The number of constructor arguments in the derived class " +
        (values[0] + " must be >= than the number of constructor arguments of its base class.");
};
exports.ARGUMENTS_LENGTH_MISMATCH = ARGUMENTS_LENGTH_MISMATCH;
exports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = "Invalid Container constructor argument. Container options " +
    "must be an object.";
exports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = "Invalid Container option. Default scope must " +
    "be a string ('singleton' or 'transient').";
exports.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = "Invalid Container option. Auto bind injectable must " +
    "be a boolean";
exports.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = "Invalid Container option. Skip base check must " +
    "be a boolean";
exports.MULTIPLE_POST_CONSTRUCT_METHODS = "Cannot apply @postConstruct decorator multiple times in the same class";
var POST_CONSTRUCT_ERROR = function () {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return "@postConstruct error in class " + values[0] + ": " + values[1];
};
exports.POST_CONSTRUCT_ERROR = POST_CONSTRUCT_ERROR;
var CIRCULAR_DEPENDENCY_IN_FACTORY = function () {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return "It looks like there is a circular dependency " +
        ("in one of the '" + values[0] + "' bindings. Please investigate bindings with") +
        ("service identifier '" + values[1] + "'.");
};
exports.CIRCULAR_DEPENDENCY_IN_FACTORY = CIRCULAR_DEPENDENCY_IN_FACTORY;
exports.STACK_OVERFLOW = "Maximum call stack size exceeded";


/***/ }),

/***/ "./node_modules/inversify/lib/constants/literal_types.js":
/*!***************************************************************!*\
  !*** ./node_modules/inversify/lib/constants/literal_types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TargetTypeEnum = exports.BindingTypeEnum = exports.BindingScopeEnum = void 0;
var BindingScopeEnum = {
    Request: "Request",
    Singleton: "Singleton",
    Transient: "Transient"
};
exports.BindingScopeEnum = BindingScopeEnum;
var BindingTypeEnum = {
    ConstantValue: "ConstantValue",
    Constructor: "Constructor",
    DynamicValue: "DynamicValue",
    Factory: "Factory",
    Function: "Function",
    Instance: "Instance",
    Invalid: "Invalid",
    Provider: "Provider"
};
exports.BindingTypeEnum = BindingTypeEnum;
var TargetTypeEnum = {
    ClassProperty: "ClassProperty",
    ConstructorArgument: "ConstructorArgument",
    Variable: "Variable"
};
exports.TargetTypeEnum = TargetTypeEnum;


/***/ }),

/***/ "./node_modules/inversify/lib/constants/metadata_keys.js":
/*!***************************************************************!*\
  !*** ./node_modules/inversify/lib/constants/metadata_keys.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NON_CUSTOM_TAG_KEYS = exports.POST_CONSTRUCT = exports.DESIGN_PARAM_TYPES = exports.PARAM_TYPES = exports.TAGGED_PROP = exports.TAGGED = exports.MULTI_INJECT_TAG = exports.INJECT_TAG = exports.OPTIONAL_TAG = exports.UNMANAGED_TAG = exports.NAME_TAG = exports.NAMED_TAG = void 0;
exports.NAMED_TAG = "named";
exports.NAME_TAG = "name";
exports.UNMANAGED_TAG = "unmanaged";
exports.OPTIONAL_TAG = "optional";
exports.INJECT_TAG = "inject";
exports.MULTI_INJECT_TAG = "multi_inject";
exports.TAGGED = "inversify:tagged";
exports.TAGGED_PROP = "inversify:tagged_props";
exports.PARAM_TYPES = "inversify:paramtypes";
exports.DESIGN_PARAM_TYPES = "design:paramtypes";
exports.POST_CONSTRUCT = "post_construct";
function getNonCustomTagKeys() {
    return [
        exports.INJECT_TAG,
        exports.MULTI_INJECT_TAG,
        exports.NAME_TAG,
        exports.UNMANAGED_TAG,
        exports.NAMED_TAG,
        exports.OPTIONAL_TAG,
    ];
}
exports.NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();


/***/ }),

/***/ "./node_modules/inversify/lib/container/container.js":
/*!***********************************************************!*\
  !*** ./node_modules/inversify/lib/container/container.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Container = void 0;
var binding_1 = __webpack_require__(/*! ../bindings/binding */ "./node_modules/inversify/lib/bindings/binding.js");
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var literal_types_1 = __webpack_require__(/*! ../constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_reader_1 = __webpack_require__(/*! ../planning/metadata_reader */ "./node_modules/inversify/lib/planning/metadata_reader.js");
var planner_1 = __webpack_require__(/*! ../planning/planner */ "./node_modules/inversify/lib/planning/planner.js");
var resolver_1 = __webpack_require__(/*! ../resolution/resolver */ "./node_modules/inversify/lib/resolution/resolver.js");
var binding_to_syntax_1 = __webpack_require__(/*! ../syntax/binding_to_syntax */ "./node_modules/inversify/lib/syntax/binding_to_syntax.js");
var id_1 = __webpack_require__(/*! ../utils/id */ "./node_modules/inversify/lib/utils/id.js");
var serialization_1 = __webpack_require__(/*! ../utils/serialization */ "./node_modules/inversify/lib/utils/serialization.js");
var container_snapshot_1 = __webpack_require__(/*! ./container_snapshot */ "./node_modules/inversify/lib/container/container_snapshot.js");
var lookup_1 = __webpack_require__(/*! ./lookup */ "./node_modules/inversify/lib/container/lookup.js");
var Container = (function () {
    function Container(containerOptions) {
        this._appliedMiddleware = [];
        var options = containerOptions || {};
        if (typeof options !== "object") {
            throw new Error("" + ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);
        }
        if (options.defaultScope === undefined) {
            options.defaultScope = literal_types_1.BindingScopeEnum.Transient;
        }
        else if (options.defaultScope !== literal_types_1.BindingScopeEnum.Singleton &&
            options.defaultScope !== literal_types_1.BindingScopeEnum.Transient &&
            options.defaultScope !== literal_types_1.BindingScopeEnum.Request) {
            throw new Error("" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);
        }
        if (options.autoBindInjectable === undefined) {
            options.autoBindInjectable = false;
        }
        else if (typeof options.autoBindInjectable !== "boolean") {
            throw new Error("" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);
        }
        if (options.skipBaseClassChecks === undefined) {
            options.skipBaseClassChecks = false;
        }
        else if (typeof options.skipBaseClassChecks !== "boolean") {
            throw new Error("" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);
        }
        this.options = {
            autoBindInjectable: options.autoBindInjectable,
            defaultScope: options.defaultScope,
            skipBaseClassChecks: options.skipBaseClassChecks
        };
        this.id = id_1.id();
        this._bindingDictionary = new lookup_1.Lookup();
        this._snapshots = [];
        this._middleware = null;
        this.parent = null;
        this._metadataReader = new metadata_reader_1.MetadataReader();
    }
    Container.merge = function (container1, container2) {
        var container3 = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            container3[_i - 2] = arguments[_i];
        }
        var container = new Container();
        var targetContainers = __spreadArray([container1, container2], container3).map(function (targetContainer) { return planner_1.getBindingDictionary(targetContainer); });
        var bindingDictionary = planner_1.getBindingDictionary(container);
        function copyDictionary(origin, destination) {
            origin.traverse(function (key, value) {
                value.forEach(function (binding) {
                    destination.add(binding.serviceIdentifier, binding.clone());
                });
            });
        }
        targetContainers.forEach(function (targetBindingDictionary) {
            copyDictionary(targetBindingDictionary, bindingDictionary);
        });
        return container;
    };
    Container.prototype.load = function () {
        var modules = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            modules[_i] = arguments[_i];
        }
        var getHelpers = this._getContainerModuleHelpersFactory();
        for (var _a = 0, modules_1 = modules; _a < modules_1.length; _a++) {
            var currentModule = modules_1[_a];
            var containerModuleHelpers = getHelpers(currentModule.id);
            currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction);
        }
    };
    Container.prototype.loadAsync = function () {
        var modules = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            modules[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var getHelpers, _a, modules_2, currentModule, containerModuleHelpers;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        getHelpers = this._getContainerModuleHelpersFactory();
                        _a = 0, modules_2 = modules;
                        _b.label = 1;
                    case 1:
                        if (!(_a < modules_2.length)) return [3, 4];
                        currentModule = modules_2[_a];
                        containerModuleHelpers = getHelpers(currentModule.id);
                        return [4, currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _a++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    Container.prototype.unload = function () {
        var _this = this;
        var modules = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            modules[_i] = arguments[_i];
        }
        var conditionFactory = function (expected) { return function (item) {
            return item.moduleId === expected;
        }; };
        modules.forEach(function (module) {
            var condition = conditionFactory(module.id);
            _this._bindingDictionary.removeByCondition(condition);
        });
    };
    Container.prototype.bind = function (serviceIdentifier) {
        var scope = this.options.defaultScope || literal_types_1.BindingScopeEnum.Transient;
        var binding = new binding_1.Binding(serviceIdentifier, scope);
        this._bindingDictionary.add(serviceIdentifier, binding);
        return new binding_to_syntax_1.BindingToSyntax(binding);
    };
    Container.prototype.rebind = function (serviceIdentifier) {
        this.unbind(serviceIdentifier);
        return this.bind(serviceIdentifier);
    };
    Container.prototype.unbind = function (serviceIdentifier) {
        try {
            this._bindingDictionary.remove(serviceIdentifier);
        }
        catch (e) {
            throw new Error(ERROR_MSGS.CANNOT_UNBIND + " " + serialization_1.getServiceIdentifierAsString(serviceIdentifier));
        }
    };
    Container.prototype.unbindAll = function () {
        this._bindingDictionary = new lookup_1.Lookup();
    };
    Container.prototype.isBound = function (serviceIdentifier) {
        var bound = this._bindingDictionary.hasKey(serviceIdentifier);
        if (!bound && this.parent) {
            bound = this.parent.isBound(serviceIdentifier);
        }
        return bound;
    };
    Container.prototype.isBoundNamed = function (serviceIdentifier, named) {
        return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
    };
    Container.prototype.isBoundTagged = function (serviceIdentifier, key, value) {
        var bound = false;
        if (this._bindingDictionary.hasKey(serviceIdentifier)) {
            var bindings = this._bindingDictionary.get(serviceIdentifier);
            var request_1 = planner_1.createMockRequest(this, serviceIdentifier, key, value);
            bound = bindings.some(function (b) { return b.constraint(request_1); });
        }
        if (!bound && this.parent) {
            bound = this.parent.isBoundTagged(serviceIdentifier, key, value);
        }
        return bound;
    };
    Container.prototype.snapshot = function () {
        this._snapshots.push(container_snapshot_1.ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware));
    };
    Container.prototype.restore = function () {
        var snapshot = this._snapshots.pop();
        if (snapshot === undefined) {
            throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);
        }
        this._bindingDictionary = snapshot.bindings;
        this._middleware = snapshot.middleware;
    };
    Container.prototype.createChild = function (containerOptions) {
        var child = new Container(containerOptions || this.options);
        child.parent = this;
        return child;
    };
    Container.prototype.applyMiddleware = function () {
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i] = arguments[_i];
        }
        this._appliedMiddleware = this._appliedMiddleware.concat(middlewares);
        var initial = (this._middleware) ? this._middleware : this._planAndResolve();
        this._middleware = middlewares.reduce(function (prev, curr) { return curr(prev); }, initial);
    };
    Container.prototype.applyCustomMetadataReader = function (metadataReader) {
        this._metadataReader = metadataReader;
    };
    Container.prototype.get = function (serviceIdentifier) {
        return this._get(false, false, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier);
    };
    Container.prototype.getTagged = function (serviceIdentifier, key, value) {
        return this._get(false, false, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier, key, value);
    };
    Container.prototype.getNamed = function (serviceIdentifier, named) {
        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
    };
    Container.prototype.getAll = function (serviceIdentifier) {
        return this._get(true, true, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier);
    };
    Container.prototype.getAllTagged = function (serviceIdentifier, key, value) {
        return this._get(false, true, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier, key, value);
    };
    Container.prototype.getAllNamed = function (serviceIdentifier, named) {
        return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
    };
    Container.prototype.resolve = function (constructorFunction) {
        var tempContainer = this.createChild();
        tempContainer.bind(constructorFunction).toSelf();
        this._appliedMiddleware.forEach(function (m) {
            tempContainer.applyMiddleware(m);
        });
        return tempContainer.get(constructorFunction);
    };
    Container.prototype._getContainerModuleHelpersFactory = function () {
        var _this = this;
        var setModuleId = function (bindingToSyntax, moduleId) {
            bindingToSyntax._binding.moduleId = moduleId;
        };
        var getBindFunction = function (moduleId) {
            return function (serviceIdentifier) {
                var _bind = _this.bind.bind(_this);
                var bindingToSyntax = _bind(serviceIdentifier);
                setModuleId(bindingToSyntax, moduleId);
                return bindingToSyntax;
            };
        };
        var getUnbindFunction = function (moduleId) {
            return function (serviceIdentifier) {
                var _unbind = _this.unbind.bind(_this);
                _unbind(serviceIdentifier);
            };
        };
        var getIsboundFunction = function (moduleId) {
            return function (serviceIdentifier) {
                var _isBound = _this.isBound.bind(_this);
                return _isBound(serviceIdentifier);
            };
        };
        var getRebindFunction = function (moduleId) {
            return function (serviceIdentifier) {
                var _rebind = _this.rebind.bind(_this);
                var bindingToSyntax = _rebind(serviceIdentifier);
                setModuleId(bindingToSyntax, moduleId);
                return bindingToSyntax;
            };
        };
        return function (mId) { return ({
            bindFunction: getBindFunction(mId),
            isboundFunction: getIsboundFunction(mId),
            rebindFunction: getRebindFunction(mId),
            unbindFunction: getUnbindFunction(mId)
        }); };
    };
    Container.prototype._get = function (avoidConstraints, isMultiInject, targetType, serviceIdentifier, key, value) {
        var result = null;
        var defaultArgs = {
            avoidConstraints: avoidConstraints,
            contextInterceptor: function (context) { return context; },
            isMultiInject: isMultiInject,
            key: key,
            serviceIdentifier: serviceIdentifier,
            targetType: targetType,
            value: value
        };
        if (this._middleware) {
            result = this._middleware(defaultArgs);
            if (result === undefined || result === null) {
                throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);
            }
        }
        else {
            result = this._planAndResolve()(defaultArgs);
        }
        return result;
    };
    Container.prototype._planAndResolve = function () {
        var _this = this;
        return function (args) {
            var context = planner_1.plan(_this._metadataReader, _this, args.isMultiInject, args.targetType, args.serviceIdentifier, args.key, args.value, args.avoidConstraints);
            context = args.contextInterceptor(context);
            var result = resolver_1.resolve(context);
            return result;
        };
    };
    return Container;
}());
exports.Container = Container;


/***/ }),

/***/ "./node_modules/inversify/lib/container/container_module.js":
/*!******************************************************************!*\
  !*** ./node_modules/inversify/lib/container/container_module.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AsyncContainerModule = exports.ContainerModule = void 0;
var id_1 = __webpack_require__(/*! ../utils/id */ "./node_modules/inversify/lib/utils/id.js");
var ContainerModule = (function () {
    function ContainerModule(registry) {
        this.id = id_1.id();
        this.registry = registry;
    }
    return ContainerModule;
}());
exports.ContainerModule = ContainerModule;
var AsyncContainerModule = (function () {
    function AsyncContainerModule(registry) {
        this.id = id_1.id();
        this.registry = registry;
    }
    return AsyncContainerModule;
}());
exports.AsyncContainerModule = AsyncContainerModule;


/***/ }),

/***/ "./node_modules/inversify/lib/container/container_snapshot.js":
/*!********************************************************************!*\
  !*** ./node_modules/inversify/lib/container/container_snapshot.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContainerSnapshot = void 0;
var ContainerSnapshot = (function () {
    function ContainerSnapshot() {
    }
    ContainerSnapshot.of = function (bindings, middleware) {
        var snapshot = new ContainerSnapshot();
        snapshot.bindings = bindings;
        snapshot.middleware = middleware;
        return snapshot;
    };
    return ContainerSnapshot;
}());
exports.ContainerSnapshot = ContainerSnapshot;


/***/ }),

/***/ "./node_modules/inversify/lib/container/lookup.js":
/*!********************************************************!*\
  !*** ./node_modules/inversify/lib/container/lookup.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Lookup = void 0;
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var Lookup = (function () {
    function Lookup() {
        this._map = new Map();
    }
    Lookup.prototype.getMap = function () {
        return this._map;
    };
    Lookup.prototype.add = function (serviceIdentifier, value) {
        if (serviceIdentifier === null || serviceIdentifier === undefined) {
            throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
        if (value === null || value === undefined) {
            throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
        var entry = this._map.get(serviceIdentifier);
        if (entry !== undefined) {
            entry.push(value);
            this._map.set(serviceIdentifier, entry);
        }
        else {
            this._map.set(serviceIdentifier, [value]);
        }
    };
    Lookup.prototype.get = function (serviceIdentifier) {
        if (serviceIdentifier === null || serviceIdentifier === undefined) {
            throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
        var entry = this._map.get(serviceIdentifier);
        if (entry !== undefined) {
            return entry;
        }
        else {
            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);
        }
    };
    Lookup.prototype.remove = function (serviceIdentifier) {
        if (serviceIdentifier === null || serviceIdentifier === undefined) {
            throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
        if (!this._map.delete(serviceIdentifier)) {
            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);
        }
    };
    Lookup.prototype.removeByCondition = function (condition) {
        var _this = this;
        this._map.forEach(function (entries, key) {
            var updatedEntries = entries.filter(function (entry) { return !condition(entry); });
            if (updatedEntries.length > 0) {
                _this._map.set(key, updatedEntries);
            }
            else {
                _this._map.delete(key);
            }
        });
    };
    Lookup.prototype.hasKey = function (serviceIdentifier) {
        if (serviceIdentifier === null || serviceIdentifier === undefined) {
            throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
        return this._map.has(serviceIdentifier);
    };
    Lookup.prototype.clone = function () {
        var copy = new Lookup();
        this._map.forEach(function (value, key) {
            value.forEach(function (b) { return copy.add(key, b.clone()); });
        });
        return copy;
    };
    Lookup.prototype.traverse = function (func) {
        this._map.forEach(function (value, key) {
            func(key, value);
        });
    };
    return Lookup;
}());
exports.Lookup = Lookup;


/***/ }),

/***/ "./node_modules/inversify/lib/inversify.js":
/*!*************************************************!*\
  !*** ./node_modules/inversify/lib/inversify.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.multiBindToService = exports.getServiceIdentifierAsString = exports.typeConstraint = exports.namedConstraint = exports.taggedConstraint = exports.traverseAncerstors = exports.decorate = exports.id = exports.MetadataReader = exports.postConstruct = exports.targetName = exports.multiInject = exports.unmanaged = exports.optional = exports.LazyServiceIdentifer = exports.inject = exports.named = exports.tagged = exports.injectable = exports.ContainerModule = exports.AsyncContainerModule = exports.TargetTypeEnum = exports.BindingTypeEnum = exports.BindingScopeEnum = exports.Container = exports.METADATA_KEY = void 0;
var keys = __webpack_require__(/*! ./constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
exports.METADATA_KEY = keys;
var container_1 = __webpack_require__(/*! ./container/container */ "./node_modules/inversify/lib/container/container.js");
Object.defineProperty(exports, "Container", ({ enumerable: true, get: function () { return container_1.Container; } }));
var literal_types_1 = __webpack_require__(/*! ./constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
Object.defineProperty(exports, "BindingScopeEnum", ({ enumerable: true, get: function () { return literal_types_1.BindingScopeEnum; } }));
Object.defineProperty(exports, "BindingTypeEnum", ({ enumerable: true, get: function () { return literal_types_1.BindingTypeEnum; } }));
Object.defineProperty(exports, "TargetTypeEnum", ({ enumerable: true, get: function () { return literal_types_1.TargetTypeEnum; } }));
var container_module_1 = __webpack_require__(/*! ./container/container_module */ "./node_modules/inversify/lib/container/container_module.js");
Object.defineProperty(exports, "AsyncContainerModule", ({ enumerable: true, get: function () { return container_module_1.AsyncContainerModule; } }));
Object.defineProperty(exports, "ContainerModule", ({ enumerable: true, get: function () { return container_module_1.ContainerModule; } }));
var injectable_1 = __webpack_require__(/*! ./annotation/injectable */ "./node_modules/inversify/lib/annotation/injectable.js");
Object.defineProperty(exports, "injectable", ({ enumerable: true, get: function () { return injectable_1.injectable; } }));
var tagged_1 = __webpack_require__(/*! ./annotation/tagged */ "./node_modules/inversify/lib/annotation/tagged.js");
Object.defineProperty(exports, "tagged", ({ enumerable: true, get: function () { return tagged_1.tagged; } }));
var named_1 = __webpack_require__(/*! ./annotation/named */ "./node_modules/inversify/lib/annotation/named.js");
Object.defineProperty(exports, "named", ({ enumerable: true, get: function () { return named_1.named; } }));
var inject_1 = __webpack_require__(/*! ./annotation/inject */ "./node_modules/inversify/lib/annotation/inject.js");
Object.defineProperty(exports, "inject", ({ enumerable: true, get: function () { return inject_1.inject; } }));
Object.defineProperty(exports, "LazyServiceIdentifer", ({ enumerable: true, get: function () { return inject_1.LazyServiceIdentifer; } }));
var optional_1 = __webpack_require__(/*! ./annotation/optional */ "./node_modules/inversify/lib/annotation/optional.js");
Object.defineProperty(exports, "optional", ({ enumerable: true, get: function () { return optional_1.optional; } }));
var unmanaged_1 = __webpack_require__(/*! ./annotation/unmanaged */ "./node_modules/inversify/lib/annotation/unmanaged.js");
Object.defineProperty(exports, "unmanaged", ({ enumerable: true, get: function () { return unmanaged_1.unmanaged; } }));
var multi_inject_1 = __webpack_require__(/*! ./annotation/multi_inject */ "./node_modules/inversify/lib/annotation/multi_inject.js");
Object.defineProperty(exports, "multiInject", ({ enumerable: true, get: function () { return multi_inject_1.multiInject; } }));
var target_name_1 = __webpack_require__(/*! ./annotation/target_name */ "./node_modules/inversify/lib/annotation/target_name.js");
Object.defineProperty(exports, "targetName", ({ enumerable: true, get: function () { return target_name_1.targetName; } }));
var post_construct_1 = __webpack_require__(/*! ./annotation/post_construct */ "./node_modules/inversify/lib/annotation/post_construct.js");
Object.defineProperty(exports, "postConstruct", ({ enumerable: true, get: function () { return post_construct_1.postConstruct; } }));
var metadata_reader_1 = __webpack_require__(/*! ./planning/metadata_reader */ "./node_modules/inversify/lib/planning/metadata_reader.js");
Object.defineProperty(exports, "MetadataReader", ({ enumerable: true, get: function () { return metadata_reader_1.MetadataReader; } }));
var id_1 = __webpack_require__(/*! ./utils/id */ "./node_modules/inversify/lib/utils/id.js");
Object.defineProperty(exports, "id", ({ enumerable: true, get: function () { return id_1.id; } }));
var decorator_utils_1 = __webpack_require__(/*! ./annotation/decorator_utils */ "./node_modules/inversify/lib/annotation/decorator_utils.js");
Object.defineProperty(exports, "decorate", ({ enumerable: true, get: function () { return decorator_utils_1.decorate; } }));
var constraint_helpers_1 = __webpack_require__(/*! ./syntax/constraint_helpers */ "./node_modules/inversify/lib/syntax/constraint_helpers.js");
Object.defineProperty(exports, "traverseAncerstors", ({ enumerable: true, get: function () { return constraint_helpers_1.traverseAncerstors; } }));
Object.defineProperty(exports, "taggedConstraint", ({ enumerable: true, get: function () { return constraint_helpers_1.taggedConstraint; } }));
Object.defineProperty(exports, "namedConstraint", ({ enumerable: true, get: function () { return constraint_helpers_1.namedConstraint; } }));
Object.defineProperty(exports, "typeConstraint", ({ enumerable: true, get: function () { return constraint_helpers_1.typeConstraint; } }));
var serialization_1 = __webpack_require__(/*! ./utils/serialization */ "./node_modules/inversify/lib/utils/serialization.js");
Object.defineProperty(exports, "getServiceIdentifierAsString", ({ enumerable: true, get: function () { return serialization_1.getServiceIdentifierAsString; } }));
var binding_utils_1 = __webpack_require__(/*! ./utils/binding_utils */ "./node_modules/inversify/lib/utils/binding_utils.js");
Object.defineProperty(exports, "multiBindToService", ({ enumerable: true, get: function () { return binding_utils_1.multiBindToService; } }));


/***/ }),

/***/ "./node_modules/inversify/lib/planning/context.js":
/*!********************************************************!*\
  !*** ./node_modules/inversify/lib/planning/context.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Context = void 0;
var id_1 = __webpack_require__(/*! ../utils/id */ "./node_modules/inversify/lib/utils/id.js");
var Context = (function () {
    function Context(container) {
        this.id = id_1.id();
        this.container = container;
    }
    Context.prototype.addPlan = function (plan) {
        this.plan = plan;
    };
    Context.prototype.setCurrentRequest = function (currentRequest) {
        this.currentRequest = currentRequest;
    };
    return Context;
}());
exports.Context = Context;


/***/ }),

/***/ "./node_modules/inversify/lib/planning/metadata.js":
/*!*********************************************************!*\
  !*** ./node_modules/inversify/lib/planning/metadata.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Metadata = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var Metadata = (function () {
    function Metadata(key, value) {
        this.key = key;
        this.value = value;
    }
    Metadata.prototype.toString = function () {
        if (this.key === METADATA_KEY.NAMED_TAG) {
            return "named: " + this.value.toString() + " ";
        }
        else {
            return "tagged: { key:" + this.key.toString() + ", value: " + this.value + " }";
        }
    };
    return Metadata;
}());
exports.Metadata = Metadata;


/***/ }),

/***/ "./node_modules/inversify/lib/planning/metadata_reader.js":
/*!****************************************************************!*\
  !*** ./node_modules/inversify/lib/planning/metadata_reader.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MetadataReader = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var MetadataReader = (function () {
    function MetadataReader() {
    }
    MetadataReader.prototype.getConstructorMetadata = function (constructorFunc) {
        var compilerGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.PARAM_TYPES, constructorFunc);
        var userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, constructorFunc);
        return {
            compilerGeneratedMetadata: compilerGeneratedMetadata,
            userGeneratedMetadata: userGeneratedMetadata || {}
        };
    };
    MetadataReader.prototype.getPropertiesMetadata = function (constructorFunc) {
        var userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, constructorFunc) || [];
        return userGeneratedMetadata;
    };
    return MetadataReader;
}());
exports.MetadataReader = MetadataReader;


/***/ }),

/***/ "./node_modules/inversify/lib/planning/plan.js":
/*!*****************************************************!*\
  !*** ./node_modules/inversify/lib/planning/plan.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Plan = void 0;
var Plan = (function () {
    function Plan(parentContext, rootRequest) {
        this.parentContext = parentContext;
        this.rootRequest = rootRequest;
    }
    return Plan;
}());
exports.Plan = Plan;


/***/ }),

/***/ "./node_modules/inversify/lib/planning/planner.js":
/*!********************************************************!*\
  !*** ./node_modules/inversify/lib/planning/planner.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBindingDictionary = exports.createMockRequest = exports.plan = void 0;
var binding_count_1 = __webpack_require__(/*! ../bindings/binding_count */ "./node_modules/inversify/lib/bindings/binding_count.js");
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var literal_types_1 = __webpack_require__(/*! ../constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var exceptions_1 = __webpack_require__(/*! ../utils/exceptions */ "./node_modules/inversify/lib/utils/exceptions.js");
var serialization_1 = __webpack_require__(/*! ../utils/serialization */ "./node_modules/inversify/lib/utils/serialization.js");
var context_1 = __webpack_require__(/*! ./context */ "./node_modules/inversify/lib/planning/context.js");
var metadata_1 = __webpack_require__(/*! ./metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var plan_1 = __webpack_require__(/*! ./plan */ "./node_modules/inversify/lib/planning/plan.js");
var reflection_utils_1 = __webpack_require__(/*! ./reflection_utils */ "./node_modules/inversify/lib/planning/reflection_utils.js");
var request_1 = __webpack_require__(/*! ./request */ "./node_modules/inversify/lib/planning/request.js");
var target_1 = __webpack_require__(/*! ./target */ "./node_modules/inversify/lib/planning/target.js");
function getBindingDictionary(cntnr) {
    return cntnr._bindingDictionary;
}
exports.getBindingDictionary = getBindingDictionary;
function _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {
    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;
    var injectMetadata = new metadata_1.Metadata(metadataKey, serviceIdentifier);
    var target = new target_1.Target(targetType, name, serviceIdentifier, injectMetadata);
    if (key !== undefined) {
        var tagMetadata = new metadata_1.Metadata(key, value);
        target.metadata.push(tagMetadata);
    }
    return target;
}
function _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {
    var bindings = getBindings(context.container, target.serviceIdentifier);
    var activeBindings = [];
    if (bindings.length === binding_count_1.BindingCount.NoBindingsAvailable &&
        context.container.options.autoBindInjectable &&
        typeof target.serviceIdentifier === "function" &&
        metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {
        context.container.bind(target.serviceIdentifier).toSelf();
        bindings = getBindings(context.container, target.serviceIdentifier);
    }
    if (!avoidConstraints) {
        activeBindings = bindings.filter(function (binding) {
            var request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);
            return binding.constraint(request);
        });
    }
    else {
        activeBindings = bindings;
    }
    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);
    return activeBindings;
}
function _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {
    switch (bindings.length) {
        case binding_count_1.BindingCount.NoBindingsAvailable:
            if (target.isOptional()) {
                return bindings;
            }
            else {
                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);
                var msg = ERROR_MSGS.NOT_REGISTERED;
                msg += serialization_1.listMetadataForTarget(serviceIdentifierString, target);
                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);
                throw new Error(msg);
            }
        case binding_count_1.BindingCount.OnlyOneBindingAvailable:
            if (!target.isArray()) {
                return bindings;
            }
        case binding_count_1.BindingCount.MultipleBindingsAvailable:
        default:
            if (!target.isArray()) {
                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);
                var msg = ERROR_MSGS.AMBIGUOUS_MATCH + " " + serviceIdentifierString;
                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);
                throw new Error(msg);
            }
            else {
                return bindings;
            }
    }
}
function _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {
    var activeBindings;
    var childRequest;
    if (parentRequest === null) {
        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);
        childRequest = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);
        var thePlan = new plan_1.Plan(context, childRequest);
        context.addPlan(thePlan);
    }
    else {
        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);
        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);
    }
    activeBindings.forEach(function (binding) {
        var subChildRequest = null;
        if (target.isArray()) {
            subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);
        }
        else {
            if (binding.cache) {
                return;
            }
            subChildRequest = childRequest;
        }
        if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {
            var dependencies = reflection_utils_1.getDependencies(metadataReader, binding.implementationType);
            if (!context.container.options.skipBaseClassChecks) {
                var baseClassDependencyCount = reflection_utils_1.getBaseClassDependencyCount(metadataReader, binding.implementationType);
                if (dependencies.length < baseClassDependencyCount) {
                    var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(reflection_utils_1.getFunctionName(binding.implementationType));
                    throw new Error(error);
                }
            }
            dependencies.forEach(function (dependency) {
                _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);
            });
        }
    });
}
function getBindings(container, serviceIdentifier) {
    var bindings = [];
    var bindingDictionary = getBindingDictionary(container);
    if (bindingDictionary.hasKey(serviceIdentifier)) {
        bindings = bindingDictionary.get(serviceIdentifier);
    }
    else if (container.parent !== null) {
        bindings = getBindings(container.parent, serviceIdentifier);
    }
    return bindings;
}
function plan(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {
    if (avoidConstraints === void 0) { avoidConstraints = false; }
    var context = new context_1.Context(container);
    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, "", key, value);
    try {
        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);
        return context;
    }
    catch (error) {
        if (exceptions_1.isStackOverflowExeption(error)) {
            if (context.plan) {
                serialization_1.circularDependencyToException(context.plan.rootRequest);
            }
        }
        throw error;
    }
}
exports.plan = plan;
function createMockRequest(container, serviceIdentifier, key, value) {
    var target = new target_1.Target(literal_types_1.TargetTypeEnum.Variable, "", serviceIdentifier, new metadata_1.Metadata(key, value));
    var context = new context_1.Context(container);
    var request = new request_1.Request(serviceIdentifier, context, null, [], target);
    return request;
}
exports.createMockRequest = createMockRequest;


/***/ }),

/***/ "./node_modules/inversify/lib/planning/queryable_string.js":
/*!*****************************************************************!*\
  !*** ./node_modules/inversify/lib/planning/queryable_string.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QueryableString = void 0;
var QueryableString = (function () {
    function QueryableString(str) {
        this.str = str;
    }
    QueryableString.prototype.startsWith = function (searchString) {
        return this.str.indexOf(searchString) === 0;
    };
    QueryableString.prototype.endsWith = function (searchString) {
        var reverseString = "";
        var reverseSearchString = searchString.split("").reverse().join("");
        reverseString = this.str.split("").reverse().join("");
        return this.startsWith.call({ str: reverseString }, reverseSearchString);
    };
    QueryableString.prototype.contains = function (searchString) {
        return (this.str.indexOf(searchString) !== -1);
    };
    QueryableString.prototype.equals = function (compareString) {
        return this.str === compareString;
    };
    QueryableString.prototype.value = function () {
        return this.str;
    };
    return QueryableString;
}());
exports.QueryableString = QueryableString;


/***/ }),

/***/ "./node_modules/inversify/lib/planning/reflection_utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/inversify/lib/planning/reflection_utils.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getFunctionName = exports.getBaseClassDependencyCount = exports.getDependencies = void 0;
var inject_1 = __webpack_require__(/*! ../annotation/inject */ "./node_modules/inversify/lib/annotation/inject.js");
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var literal_types_1 = __webpack_require__(/*! ../constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var serialization_1 = __webpack_require__(/*! ../utils/serialization */ "./node_modules/inversify/lib/utils/serialization.js");
Object.defineProperty(exports, "getFunctionName", ({ enumerable: true, get: function () { return serialization_1.getFunctionName; } }));
var target_1 = __webpack_require__(/*! ./target */ "./node_modules/inversify/lib/planning/target.js");
function getDependencies(metadataReader, func) {
    var constructorName = serialization_1.getFunctionName(func);
    var targets = getTargets(metadataReader, constructorName, func, false);
    return targets;
}
exports.getDependencies = getDependencies;
function getTargets(metadataReader, constructorName, func, isBaseClass) {
    var metadata = metadataReader.getConstructorMetadata(func);
    var serviceIdentifiers = metadata.compilerGeneratedMetadata;
    if (serviceIdentifiers === undefined) {
        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + " " + constructorName + ".";
        throw new Error(msg);
    }
    var constructorArgsMetadata = metadata.userGeneratedMetadata;
    var keys = Object.keys(constructorArgsMetadata);
    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);
    var hasOptionalParameters = keys.length > func.length;
    var iterations = (hasUserDeclaredUnknownInjections || hasOptionalParameters) ? keys.length : func.length;
    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);
    var propertyTargets = getClassPropsAsTargets(metadataReader, func);
    var targets = __spreadArray(__spreadArray([], constructorTargets), propertyTargets);
    return targets;
}
function getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {
    var targetMetadata = constructorArgsMetadata[index.toString()] || [];
    var metadata = formatTargetMetadata(targetMetadata);
    var isManaged = metadata.unmanaged !== true;
    var serviceIdentifier = serviceIdentifiers[index];
    var injectIdentifier = (metadata.inject || metadata.multiInject);
    serviceIdentifier = (injectIdentifier) ? (injectIdentifier) : serviceIdentifier;
    if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {
        serviceIdentifier = serviceIdentifier.unwrap();
    }
    if (isManaged) {
        var isObject = serviceIdentifier === Object;
        var isFunction = serviceIdentifier === Function;
        var isUndefined = serviceIdentifier === undefined;
        var isUnknownType = (isObject || isFunction || isUndefined);
        if (!isBaseClass && isUnknownType) {
            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + " argument " + index + " in class " + constructorName + ".";
            throw new Error(msg);
        }
        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);
        target.metadata = targetMetadata;
        return target;
    }
    return null;
}
function getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {
    var targets = [];
    for (var i = 0; i < iterations; i++) {
        var index = i;
        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);
        if (target !== null) {
            targets.push(target);
        }
    }
    return targets;
}
function getClassPropsAsTargets(metadataReader, constructorFunc) {
    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);
    var targets = [];
    var keys = Object.keys(classPropsMetadata);
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        var targetMetadata = classPropsMetadata[key];
        var metadata = formatTargetMetadata(classPropsMetadata[key]);
        var targetName = metadata.targetName || key;
        var serviceIdentifier = (metadata.inject || metadata.multiInject);
        var target = new target_1.Target(literal_types_1.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);
        target.metadata = targetMetadata;
        targets.push(target);
    }
    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;
    if (baseConstructor !== Object) {
        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);
        targets = __spreadArray(__spreadArray([], targets), baseTargets);
    }
    return targets;
}
function getBaseClassDependencyCount(metadataReader, func) {
    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;
    if (baseConstructor !== Object) {
        var baseConstructorName = serialization_1.getFunctionName(baseConstructor);
        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);
        var metadata = targets.map(function (t) {
            return t.metadata.filter(function (m) {
                return m.key === METADATA_KEY.UNMANAGED_TAG;
            });
        });
        var unmanagedCount = [].concat.apply([], metadata).length;
        var dependencyCount = targets.length - unmanagedCount;
        if (dependencyCount > 0) {
            return dependencyCount;
        }
        else {
            return getBaseClassDependencyCount(metadataReader, baseConstructor);
        }
    }
    else {
        return 0;
    }
}
exports.getBaseClassDependencyCount = getBaseClassDependencyCount;
function formatTargetMetadata(targetMetadata) {
    var targetMetadataMap = {};
    targetMetadata.forEach(function (m) {
        targetMetadataMap[m.key.toString()] = m.value;
    });
    return {
        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],
        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],
        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],
        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]
    };
}


/***/ }),

/***/ "./node_modules/inversify/lib/planning/request.js":
/*!********************************************************!*\
  !*** ./node_modules/inversify/lib/planning/request.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Request = void 0;
var id_1 = __webpack_require__(/*! ../utils/id */ "./node_modules/inversify/lib/utils/id.js");
var Request = (function () {
    function Request(serviceIdentifier, parentContext, parentRequest, bindings, target) {
        this.id = id_1.id();
        this.serviceIdentifier = serviceIdentifier;
        this.parentContext = parentContext;
        this.parentRequest = parentRequest;
        this.target = target;
        this.childRequests = [];
        this.bindings = (Array.isArray(bindings) ? bindings : [bindings]);
        this.requestScope = parentRequest === null
            ? new Map()
            : null;
    }
    Request.prototype.addChildRequest = function (serviceIdentifier, bindings, target) {
        var child = new Request(serviceIdentifier, this.parentContext, this, bindings, target);
        this.childRequests.push(child);
        return child;
    };
    return Request;
}());
exports.Request = Request;


/***/ }),

/***/ "./node_modules/inversify/lib/planning/target.js":
/*!*******************************************************!*\
  !*** ./node_modules/inversify/lib/planning/target.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Target = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var id_1 = __webpack_require__(/*! ../utils/id */ "./node_modules/inversify/lib/utils/id.js");
var metadata_1 = __webpack_require__(/*! ./metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var queryable_string_1 = __webpack_require__(/*! ./queryable_string */ "./node_modules/inversify/lib/planning/queryable_string.js");
var Target = (function () {
    function Target(type, name, serviceIdentifier, namedOrTagged) {
        this.id = id_1.id();
        this.type = type;
        this.serviceIdentifier = serviceIdentifier;
        this.name = new queryable_string_1.QueryableString(name || "");
        this.metadata = new Array();
        var metadataItem = null;
        if (typeof namedOrTagged === "string") {
            metadataItem = new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, namedOrTagged);
        }
        else if (namedOrTagged instanceof metadata_1.Metadata) {
            metadataItem = namedOrTagged;
        }
        if (metadataItem !== null) {
            this.metadata.push(metadataItem);
        }
    }
    Target.prototype.hasTag = function (key) {
        for (var _i = 0, _a = this.metadata; _i < _a.length; _i++) {
            var m = _a[_i];
            if (m.key === key) {
                return true;
            }
        }
        return false;
    };
    Target.prototype.isArray = function () {
        return this.hasTag(METADATA_KEY.MULTI_INJECT_TAG);
    };
    Target.prototype.matchesArray = function (name) {
        return this.matchesTag(METADATA_KEY.MULTI_INJECT_TAG)(name);
    };
    Target.prototype.isNamed = function () {
        return this.hasTag(METADATA_KEY.NAMED_TAG);
    };
    Target.prototype.isTagged = function () {
        return this.metadata.some(function (metadata) { return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) { return metadata.key !== key; }); });
    };
    Target.prototype.isOptional = function () {
        return this.matchesTag(METADATA_KEY.OPTIONAL_TAG)(true);
    };
    Target.prototype.getNamedTag = function () {
        if (this.isNamed()) {
            return this.metadata.filter(function (m) { return m.key === METADATA_KEY.NAMED_TAG; })[0];
        }
        return null;
    };
    Target.prototype.getCustomTags = function () {
        if (this.isTagged()) {
            return this.metadata.filter(function (metadata) { return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) { return metadata.key !== key; }); });
        }
        else {
            return null;
        }
    };
    Target.prototype.matchesNamedTag = function (name) {
        return this.matchesTag(METADATA_KEY.NAMED_TAG)(name);
    };
    Target.prototype.matchesTag = function (key) {
        var _this = this;
        return function (value) {
            for (var _i = 0, _a = _this.metadata; _i < _a.length; _i++) {
                var m = _a[_i];
                if (m.key === key && m.value === value) {
                    return true;
                }
            }
            return false;
        };
    };
    return Target;
}());
exports.Target = Target;


/***/ }),

/***/ "./node_modules/inversify/lib/resolution/instantiation.js":
/*!****************************************************************!*\
  !*** ./node_modules/inversify/lib/resolution/instantiation.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveInstance = void 0;
var error_msgs_1 = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var literal_types_1 = __webpack_require__(/*! ../constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
function _injectProperties(instance, childRequests, resolveRequest) {
    var propertyInjectionsRequests = childRequests.filter(function (childRequest) {
        return (childRequest.target !== null &&
            childRequest.target.type === literal_types_1.TargetTypeEnum.ClassProperty);
    });
    var propertyInjections = propertyInjectionsRequests.map(resolveRequest);
    propertyInjectionsRequests.forEach(function (r, index) {
        var propertyName = "";
        propertyName = r.target.name.value();
        var injection = propertyInjections[index];
        instance[propertyName] = injection;
    });
    return instance;
}
function _createInstance(Func, injections) {
    return new (Func.bind.apply(Func, __spreadArray([void 0], injections)))();
}
function _postConstruct(constr, result) {
    if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {
        var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);
        try {
            result[data.value]();
        }
        catch (e) {
            throw new Error(error_msgs_1.POST_CONSTRUCT_ERROR(constr.name, e.message));
        }
    }
}
function resolveInstance(constr, childRequests, resolveRequest) {
    var result = null;
    if (childRequests.length > 0) {
        var constructorInjectionsRequests = childRequests.filter(function (childRequest) {
            return (childRequest.target !== null && childRequest.target.type === literal_types_1.TargetTypeEnum.ConstructorArgument);
        });
        var constructorInjections = constructorInjectionsRequests.map(resolveRequest);
        result = _createInstance(constr, constructorInjections);
        result = _injectProperties(result, childRequests, resolveRequest);
    }
    else {
        result = new constr();
    }
    _postConstruct(constr, result);
    return result;
}
exports.resolveInstance = resolveInstance;


/***/ }),

/***/ "./node_modules/inversify/lib/resolution/resolver.js":
/*!***********************************************************!*\
  !*** ./node_modules/inversify/lib/resolution/resolver.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolve = void 0;
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var literal_types_1 = __webpack_require__(/*! ../constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
var exceptions_1 = __webpack_require__(/*! ../utils/exceptions */ "./node_modules/inversify/lib/utils/exceptions.js");
var serialization_1 = __webpack_require__(/*! ../utils/serialization */ "./node_modules/inversify/lib/utils/serialization.js");
var instantiation_1 = __webpack_require__(/*! ./instantiation */ "./node_modules/inversify/lib/resolution/instantiation.js");
var invokeFactory = function (factoryType, serviceIdentifier, fn) {
    try {
        return fn();
    }
    catch (error) {
        if (exceptions_1.isStackOverflowExeption(error)) {
            throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryType, serviceIdentifier.toString()));
        }
        else {
            throw error;
        }
    }
};
var _resolveRequest = function (requestScope) {
    return function (request) {
        request.parentContext.setCurrentRequest(request);
        var bindings = request.bindings;
        var childRequests = request.childRequests;
        var targetIsAnArray = request.target && request.target.isArray();
        var targetParentIsNotAnArray = !request.parentRequest ||
            !request.parentRequest.target ||
            !request.target ||
            !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);
        if (targetIsAnArray && targetParentIsNotAnArray) {
            return childRequests.map(function (childRequest) {
                var _f = _resolveRequest(requestScope);
                return _f(childRequest);
            });
        }
        else {
            var result = null;
            if (request.target.isOptional() && bindings.length === 0) {
                return undefined;
            }
            var binding_1 = bindings[0];
            var isSingleton = binding_1.scope === literal_types_1.BindingScopeEnum.Singleton;
            var isRequestSingleton = binding_1.scope === literal_types_1.BindingScopeEnum.Request;
            if (isSingleton && binding_1.activated) {
                return binding_1.cache;
            }
            if (isRequestSingleton &&
                requestScope !== null &&
                requestScope.has(binding_1.id)) {
                return requestScope.get(binding_1.id);
            }
            if (binding_1.type === literal_types_1.BindingTypeEnum.ConstantValue) {
                result = binding_1.cache;
                binding_1.activated = true;
            }
            else if (binding_1.type === literal_types_1.BindingTypeEnum.Function) {
                result = binding_1.cache;
                binding_1.activated = true;
            }
            else if (binding_1.type === literal_types_1.BindingTypeEnum.Constructor) {
                result = binding_1.implementationType;
            }
            else if (binding_1.type === literal_types_1.BindingTypeEnum.DynamicValue && binding_1.dynamicValue !== null) {
                result = invokeFactory("toDynamicValue", binding_1.serviceIdentifier, function () { return binding_1.dynamicValue(request.parentContext); });
            }
            else if (binding_1.type === literal_types_1.BindingTypeEnum.Factory && binding_1.factory !== null) {
                result = invokeFactory("toFactory", binding_1.serviceIdentifier, function () { return binding_1.factory(request.parentContext); });
            }
            else if (binding_1.type === literal_types_1.BindingTypeEnum.Provider && binding_1.provider !== null) {
                result = invokeFactory("toProvider", binding_1.serviceIdentifier, function () { return binding_1.provider(request.parentContext); });
            }
            else if (binding_1.type === literal_types_1.BindingTypeEnum.Instance && binding_1.implementationType !== null) {
                result = instantiation_1.resolveInstance(binding_1.implementationType, childRequests, _resolveRequest(requestScope));
            }
            else {
                var serviceIdentifier = serialization_1.getServiceIdentifierAsString(request.serviceIdentifier);
                throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + " " + serviceIdentifier);
            }
            if (typeof binding_1.onActivation === "function") {
                result = binding_1.onActivation(request.parentContext, result);
            }
            if (isSingleton) {
                binding_1.cache = result;
                binding_1.activated = true;
            }
            if (isRequestSingleton &&
                requestScope !== null &&
                !requestScope.has(binding_1.id)) {
                requestScope.set(binding_1.id, result);
            }
            return result;
        }
    };
};
function resolve(context) {
    var _f = _resolveRequest(context.plan.rootRequest.requestScope);
    return _f(context.plan.rootRequest);
}
exports.resolve = resolve;


/***/ }),

/***/ "./node_modules/inversify/lib/syntax/binding_in_syntax.js":
/*!****************************************************************!*\
  !*** ./node_modules/inversify/lib/syntax/binding_in_syntax.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingInSyntax = void 0;
var literal_types_1 = __webpack_require__(/*! ../constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
var binding_when_on_syntax_1 = __webpack_require__(/*! ./binding_when_on_syntax */ "./node_modules/inversify/lib/syntax/binding_when_on_syntax.js");
var BindingInSyntax = (function () {
    function BindingInSyntax(binding) {
        this._binding = binding;
    }
    BindingInSyntax.prototype.inRequestScope = function () {
        this._binding.scope = literal_types_1.BindingScopeEnum.Request;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    };
    BindingInSyntax.prototype.inSingletonScope = function () {
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    };
    BindingInSyntax.prototype.inTransientScope = function () {
        this._binding.scope = literal_types_1.BindingScopeEnum.Transient;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    };
    return BindingInSyntax;
}());
exports.BindingInSyntax = BindingInSyntax;


/***/ }),

/***/ "./node_modules/inversify/lib/syntax/binding_in_when_on_syntax.js":
/*!************************************************************************!*\
  !*** ./node_modules/inversify/lib/syntax/binding_in_when_on_syntax.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingInWhenOnSyntax = void 0;
var binding_in_syntax_1 = __webpack_require__(/*! ./binding_in_syntax */ "./node_modules/inversify/lib/syntax/binding_in_syntax.js");
var binding_on_syntax_1 = __webpack_require__(/*! ./binding_on_syntax */ "./node_modules/inversify/lib/syntax/binding_on_syntax.js");
var binding_when_syntax_1 = __webpack_require__(/*! ./binding_when_syntax */ "./node_modules/inversify/lib/syntax/binding_when_syntax.js");
var BindingInWhenOnSyntax = (function () {
    function BindingInWhenOnSyntax(binding) {
        this._binding = binding;
        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);
        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);
        this._bindingInSyntax = new binding_in_syntax_1.BindingInSyntax(binding);
    }
    BindingInWhenOnSyntax.prototype.inRequestScope = function () {
        return this._bindingInSyntax.inRequestScope();
    };
    BindingInWhenOnSyntax.prototype.inSingletonScope = function () {
        return this._bindingInSyntax.inSingletonScope();
    };
    BindingInWhenOnSyntax.prototype.inTransientScope = function () {
        return this._bindingInSyntax.inTransientScope();
    };
    BindingInWhenOnSyntax.prototype.when = function (constraint) {
        return this._bindingWhenSyntax.when(constraint);
    };
    BindingInWhenOnSyntax.prototype.whenTargetNamed = function (name) {
        return this._bindingWhenSyntax.whenTargetNamed(name);
    };
    BindingInWhenOnSyntax.prototype.whenTargetIsDefault = function () {
        return this._bindingWhenSyntax.whenTargetIsDefault();
    };
    BindingInWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenTargetTagged(tag, value);
    };
    BindingInWhenOnSyntax.prototype.whenInjectedInto = function (parent) {
        return this._bindingWhenSyntax.whenInjectedInto(parent);
    };
    BindingInWhenOnSyntax.prototype.whenParentNamed = function (name) {
        return this._bindingWhenSyntax.whenParentNamed(name);
    };
    BindingInWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenParentTagged(tag, value);
    };
    BindingInWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
    };
    BindingInWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
    };
    BindingInWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {
        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
    };
    BindingInWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
    };
    BindingInWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {
        return this._bindingWhenSyntax.whenNoAncestorNamed(name);
    };
    BindingInWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
    };
    BindingInWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
    };
    BindingInWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
    };
    BindingInWhenOnSyntax.prototype.onActivation = function (handler) {
        return this._bindingOnSyntax.onActivation(handler);
    };
    return BindingInWhenOnSyntax;
}());
exports.BindingInWhenOnSyntax = BindingInWhenOnSyntax;


/***/ }),

/***/ "./node_modules/inversify/lib/syntax/binding_on_syntax.js":
/*!****************************************************************!*\
  !*** ./node_modules/inversify/lib/syntax/binding_on_syntax.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingOnSyntax = void 0;
var binding_when_syntax_1 = __webpack_require__(/*! ./binding_when_syntax */ "./node_modules/inversify/lib/syntax/binding_when_syntax.js");
var BindingOnSyntax = (function () {
    function BindingOnSyntax(binding) {
        this._binding = binding;
    }
    BindingOnSyntax.prototype.onActivation = function (handler) {
        this._binding.onActivation = handler;
        return new binding_when_syntax_1.BindingWhenSyntax(this._binding);
    };
    return BindingOnSyntax;
}());
exports.BindingOnSyntax = BindingOnSyntax;


/***/ }),

/***/ "./node_modules/inversify/lib/syntax/binding_to_syntax.js":
/*!****************************************************************!*\
  !*** ./node_modules/inversify/lib/syntax/binding_to_syntax.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingToSyntax = void 0;
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
var literal_types_1 = __webpack_require__(/*! ../constants/literal_types */ "./node_modules/inversify/lib/constants/literal_types.js");
var binding_in_when_on_syntax_1 = __webpack_require__(/*! ./binding_in_when_on_syntax */ "./node_modules/inversify/lib/syntax/binding_in_when_on_syntax.js");
var binding_when_on_syntax_1 = __webpack_require__(/*! ./binding_when_on_syntax */ "./node_modules/inversify/lib/syntax/binding_when_on_syntax.js");
var BindingToSyntax = (function () {
    function BindingToSyntax(binding) {
        this._binding = binding;
    }
    BindingToSyntax.prototype.to = function (constructor) {
        this._binding.type = literal_types_1.BindingTypeEnum.Instance;
        this._binding.implementationType = constructor;
        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toSelf = function () {
        if (typeof this._binding.serviceIdentifier !== "function") {
            throw new Error("" + ERROR_MSGS.INVALID_TO_SELF_VALUE);
        }
        var self = this._binding.serviceIdentifier;
        return this.to(self);
    };
    BindingToSyntax.prototype.toConstantValue = function (value) {
        this._binding.type = literal_types_1.BindingTypeEnum.ConstantValue;
        this._binding.cache = value;
        this._binding.dynamicValue = null;
        this._binding.implementationType = null;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toDynamicValue = function (func) {
        this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;
        this._binding.cache = null;
        this._binding.dynamicValue = func;
        this._binding.implementationType = null;
        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toConstructor = function (constructor) {
        this._binding.type = literal_types_1.BindingTypeEnum.Constructor;
        this._binding.implementationType = constructor;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toFactory = function (factory) {
        this._binding.type = literal_types_1.BindingTypeEnum.Factory;
        this._binding.factory = factory;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toFunction = function (func) {
        if (typeof func !== "function") {
            throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);
        }
        var bindingWhenOnSyntax = this.toConstantValue(func);
        this._binding.type = literal_types_1.BindingTypeEnum.Function;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return bindingWhenOnSyntax;
    };
    BindingToSyntax.prototype.toAutoFactory = function (serviceIdentifier) {
        this._binding.type = literal_types_1.BindingTypeEnum.Factory;
        this._binding.factory = function (context) {
            var autofactory = function () { return context.container.get(serviceIdentifier); };
            return autofactory;
        };
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toProvider = function (provider) {
        this._binding.type = literal_types_1.BindingTypeEnum.Provider;
        this._binding.provider = provider;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toService = function (service) {
        this.toDynamicValue(function (context) { return context.container.get(service); });
    };
    return BindingToSyntax;
}());
exports.BindingToSyntax = BindingToSyntax;


/***/ }),

/***/ "./node_modules/inversify/lib/syntax/binding_when_on_syntax.js":
/*!*********************************************************************!*\
  !*** ./node_modules/inversify/lib/syntax/binding_when_on_syntax.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingWhenOnSyntax = void 0;
var binding_on_syntax_1 = __webpack_require__(/*! ./binding_on_syntax */ "./node_modules/inversify/lib/syntax/binding_on_syntax.js");
var binding_when_syntax_1 = __webpack_require__(/*! ./binding_when_syntax */ "./node_modules/inversify/lib/syntax/binding_when_syntax.js");
var BindingWhenOnSyntax = (function () {
    function BindingWhenOnSyntax(binding) {
        this._binding = binding;
        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);
        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    BindingWhenOnSyntax.prototype.when = function (constraint) {
        return this._bindingWhenSyntax.when(constraint);
    };
    BindingWhenOnSyntax.prototype.whenTargetNamed = function (name) {
        return this._bindingWhenSyntax.whenTargetNamed(name);
    };
    BindingWhenOnSyntax.prototype.whenTargetIsDefault = function () {
        return this._bindingWhenSyntax.whenTargetIsDefault();
    };
    BindingWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenTargetTagged(tag, value);
    };
    BindingWhenOnSyntax.prototype.whenInjectedInto = function (parent) {
        return this._bindingWhenSyntax.whenInjectedInto(parent);
    };
    BindingWhenOnSyntax.prototype.whenParentNamed = function (name) {
        return this._bindingWhenSyntax.whenParentNamed(name);
    };
    BindingWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenParentTagged(tag, value);
    };
    BindingWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
    };
    BindingWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
    };
    BindingWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {
        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
    };
    BindingWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
    };
    BindingWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {
        return this._bindingWhenSyntax.whenNoAncestorNamed(name);
    };
    BindingWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
    };
    BindingWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
    };
    BindingWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
    };
    BindingWhenOnSyntax.prototype.onActivation = function (handler) {
        return this._bindingOnSyntax.onActivation(handler);
    };
    return BindingWhenOnSyntax;
}());
exports.BindingWhenOnSyntax = BindingWhenOnSyntax;


/***/ }),

/***/ "./node_modules/inversify/lib/syntax/binding_when_syntax.js":
/*!******************************************************************!*\
  !*** ./node_modules/inversify/lib/syntax/binding_when_syntax.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BindingWhenSyntax = void 0;
var binding_on_syntax_1 = __webpack_require__(/*! ./binding_on_syntax */ "./node_modules/inversify/lib/syntax/binding_on_syntax.js");
var constraint_helpers_1 = __webpack_require__(/*! ./constraint_helpers */ "./node_modules/inversify/lib/syntax/constraint_helpers.js");
var BindingWhenSyntax = (function () {
    function BindingWhenSyntax(binding) {
        this._binding = binding;
    }
    BindingWhenSyntax.prototype.when = function (constraint) {
        this._binding.constraint = constraint;
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenTargetNamed = function (name) {
        this._binding.constraint = constraint_helpers_1.namedConstraint(name);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenTargetIsDefault = function () {
        this._binding.constraint = function (request) {
            var targetIsDefault = (request.target !== null) &&
                (!request.target.isNamed()) &&
                (!request.target.isTagged());
            return targetIsDefault;
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenTargetTagged = function (tag, value) {
        this._binding.constraint = constraint_helpers_1.taggedConstraint(tag)(value);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenInjectedInto = function (parent) {
        this._binding.constraint = function (request) {
            return constraint_helpers_1.typeConstraint(parent)(request.parentRequest);
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenParentNamed = function (name) {
        this._binding.constraint = function (request) {
            return constraint_helpers_1.namedConstraint(name)(request.parentRequest);
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenParentTagged = function (tag, value) {
        this._binding.constraint = function (request) {
            return constraint_helpers_1.taggedConstraint(tag)(value)(request.parentRequest);
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        this._binding.constraint = function (request) {
            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.typeConstraint(ancestor));
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        this._binding.constraint = function (request) {
            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.typeConstraint(ancestor));
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {
        this._binding.constraint = function (request) {
            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.namedConstraint(name));
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenNoAncestorNamed = function (name) {
        this._binding.constraint = function (request) {
            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.namedConstraint(name));
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        this._binding.constraint = function (request) {
            return constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.taggedConstraint(tag)(value));
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        this._binding.constraint = function (request) {
            return !constraint_helpers_1.traverseAncerstors(request, constraint_helpers_1.taggedConstraint(tag)(value));
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        this._binding.constraint = function (request) {
            return constraint_helpers_1.traverseAncerstors(request, constraint);
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        this._binding.constraint = function (request) {
            return !constraint_helpers_1.traverseAncerstors(request, constraint);
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    };
    return BindingWhenSyntax;
}());
exports.BindingWhenSyntax = BindingWhenSyntax;


/***/ }),

/***/ "./node_modules/inversify/lib/syntax/constraint_helpers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/inversify/lib/syntax/constraint_helpers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.typeConstraint = exports.namedConstraint = exports.taggedConstraint = exports.traverseAncerstors = void 0;
var METADATA_KEY = __webpack_require__(/*! ../constants/metadata_keys */ "./node_modules/inversify/lib/constants/metadata_keys.js");
var metadata_1 = __webpack_require__(/*! ../planning/metadata */ "./node_modules/inversify/lib/planning/metadata.js");
var traverseAncerstors = function (request, constraint) {
    var parent = request.parentRequest;
    if (parent !== null) {
        return constraint(parent) ? true : traverseAncerstors(parent, constraint);
    }
    else {
        return false;
    }
};
exports.traverseAncerstors = traverseAncerstors;
var taggedConstraint = function (key) { return function (value) {
    var constraint = function (request) {
        return request !== null && request.target !== null && request.target.matchesTag(key)(value);
    };
    constraint.metaData = new metadata_1.Metadata(key, value);
    return constraint;
}; };
exports.taggedConstraint = taggedConstraint;
var namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);
exports.namedConstraint = namedConstraint;
var typeConstraint = function (type) { return function (request) {
    var binding = null;
    if (request !== null) {
        binding = request.bindings[0];
        if (typeof type === "string") {
            var serviceIdentifier = binding.serviceIdentifier;
            return serviceIdentifier === type;
        }
        else {
            var constructor = request.bindings[0].implementationType;
            return type === constructor;
        }
    }
    return false;
}; };
exports.typeConstraint = typeConstraint;


/***/ }),

/***/ "./node_modules/inversify/lib/utils/binding_utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/inversify/lib/utils/binding_utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.multiBindToService = void 0;
var multiBindToService = function (container) {
    return function (service) {
        return function () {
            var types = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                types[_i] = arguments[_i];
            }
            return types.forEach(function (t) { return container.bind(t).toService(service); });
        };
    };
};
exports.multiBindToService = multiBindToService;


/***/ }),

/***/ "./node_modules/inversify/lib/utils/exceptions.js":
/*!********************************************************!*\
  !*** ./node_modules/inversify/lib/utils/exceptions.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isStackOverflowExeption = void 0;
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
function isStackOverflowExeption(error) {
    return (error instanceof RangeError ||
        error.message === ERROR_MSGS.STACK_OVERFLOW);
}
exports.isStackOverflowExeption = isStackOverflowExeption;


/***/ }),

/***/ "./node_modules/inversify/lib/utils/id.js":
/*!************************************************!*\
  !*** ./node_modules/inversify/lib/utils/id.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.id = void 0;
var idCounter = 0;
function id() {
    return idCounter++;
}
exports.id = id;


/***/ }),

/***/ "./node_modules/inversify/lib/utils/serialization.js":
/*!***********************************************************!*\
  !*** ./node_modules/inversify/lib/utils/serialization.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.circularDependencyToException = exports.listMetadataForTarget = exports.listRegisteredBindingsForServiceIdentifier = exports.getServiceIdentifierAsString = exports.getFunctionName = void 0;
var ERROR_MSGS = __webpack_require__(/*! ../constants/error_msgs */ "./node_modules/inversify/lib/constants/error_msgs.js");
function getServiceIdentifierAsString(serviceIdentifier) {
    if (typeof serviceIdentifier === "function") {
        var _serviceIdentifier = serviceIdentifier;
        return _serviceIdentifier.name;
    }
    else if (typeof serviceIdentifier === "symbol") {
        return serviceIdentifier.toString();
    }
    else {
        var _serviceIdentifier = serviceIdentifier;
        return _serviceIdentifier;
    }
}
exports.getServiceIdentifierAsString = getServiceIdentifierAsString;
function listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {
    var registeredBindingsList = "";
    var registeredBindings = getBindings(container, serviceIdentifier);
    if (registeredBindings.length !== 0) {
        registeredBindingsList = "\nRegistered bindings:";
        registeredBindings.forEach(function (binding) {
            var name = "Object";
            if (binding.implementationType !== null) {
                name = getFunctionName(binding.implementationType);
            }
            registeredBindingsList = registeredBindingsList + "\n " + name;
            if (binding.constraint.metaData) {
                registeredBindingsList = registeredBindingsList + " - " + binding.constraint.metaData;
            }
        });
    }
    return registeredBindingsList;
}
exports.listRegisteredBindingsForServiceIdentifier = listRegisteredBindingsForServiceIdentifier;
function alreadyDependencyChain(request, serviceIdentifier) {
    if (request.parentRequest === null) {
        return false;
    }
    else if (request.parentRequest.serviceIdentifier === serviceIdentifier) {
        return true;
    }
    else {
        return alreadyDependencyChain(request.parentRequest, serviceIdentifier);
    }
}
function dependencyChainToString(request) {
    function _createStringArr(req, result) {
        if (result === void 0) { result = []; }
        var serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);
        result.push(serviceIdentifier);
        if (req.parentRequest !== null) {
            return _createStringArr(req.parentRequest, result);
        }
        return result;
    }
    var stringArr = _createStringArr(request);
    return stringArr.reverse().join(" --> ");
}
function circularDependencyToException(request) {
    request.childRequests.forEach(function (childRequest) {
        if (alreadyDependencyChain(childRequest, childRequest.serviceIdentifier)) {
            var services = dependencyChainToString(childRequest);
            throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY + " " + services);
        }
        else {
            circularDependencyToException(childRequest);
        }
    });
}
exports.circularDependencyToException = circularDependencyToException;
function listMetadataForTarget(serviceIdentifierString, target) {
    if (target.isTagged() || target.isNamed()) {
        var m_1 = "";
        var namedTag = target.getNamedTag();
        var otherTags = target.getCustomTags();
        if (namedTag !== null) {
            m_1 += namedTag.toString() + "\n";
        }
        if (otherTags !== null) {
            otherTags.forEach(function (tag) {
                m_1 += tag.toString() + "\n";
            });
        }
        return " " + serviceIdentifierString + "\n " + serviceIdentifierString + " - " + m_1;
    }
    else {
        return " " + serviceIdentifierString;
    }
}
exports.listMetadataForTarget = listMetadataForTarget;
function getFunctionName(v) {
    if (v.name) {
        return v.name;
    }
    else {
        var name_1 = v.toString();
        var match = name_1.match(/^function\s*([^\s(]+)/);
        return match ? match[1] : "Anonymous function: " + name_1;
    }
}
exports.getFunctionName = getFunctionName;


/***/ }),

/***/ "./node_modules/reflect-metadata/Reflect.js":
/*!**************************************************!*\
  !*** ./node_modules/reflect-metadata/Reflect.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    // Metadata Proposal
    // https://rbuckton.github.io/reflect-metadata/
    (function (factory) {
        var root = typeof __webpack_require__.g === "object" ? __webpack_require__.g :
            typeof self === "object" ? self :
                typeof this === "object" ? this :
                    Function("return this;")();
        var exporter = makeExporter(Reflect);
        if (typeof root.Reflect === "undefined") {
            root.Reflect = Reflect;
        }
        else {
            exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
            return function (key, value) {
                if (typeof target[key] !== "function") {
                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });
                }
                if (previous)
                    previous(key, value);
            };
        }
    })(function (exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Symbol support
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            create: supportsCreate
                ? function () { return MakeDictionary(Object.create(null)); }
                : supportsProto
                    ? function () { return MakeDictionary({ __proto__: null }); }
                    : function () { return MakeDictionary({}); },
            has: downLevel
                ? function (map, key) { return hasOwn.call(map, key); }
                : function (map, key) { return key in map; },
            get: downLevel
                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
                : function (map, key) { return map[key]; },
        };
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
        var Metadata = new _WeakMap();
        /**
         * Applies a set of decorators to a property of a target object.
         * @param decorators An array of decorators.
         * @param target The target object.
         * @param propertyKey (Optional) The property key to decorate.
         * @param attributes (Optional) The property descriptor for the target key.
         * @remarks Decorators are applied in reverse order.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Example = Reflect.decorate(decoratorsArray, Example);
         *
         *     // property (on constructor)
         *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Object.defineProperty(Example, "staticMethod",
         *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
         *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
         *
         *     // method (on prototype)
         *     Object.defineProperty(Example.prototype, "method",
         *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
         *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
         *
         */
        function decorate(decorators, target, propertyKey, attributes) {
            if (!IsUndefined(propertyKey)) {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                    throw new TypeError();
                if (IsNull(attributes))
                    attributes = undefined;
                propertyKey = ToPropertyKey(propertyKey);
                return DecorateProperty(decorators, target, propertyKey, attributes);
            }
            else {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsConstructor(target))
                    throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        exporter("decorate", decorate);
        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
        /**
         * A default metadata decorator factory that can be used on a class, class member, or parameter.
         * @param metadataKey The key for the metadata entry.
         * @param metadataValue The value for the metadata entry.
         * @returns A decorator function.
         * @remarks
         * If `metadataKey` is already defined for the target and target key, the
         * metadataValue for that key will be overwritten.
         * @example
         *
         *     // constructor
         *     @Reflect.metadata(key, value)
         *     class Example {
         *     }
         *
         *     // property (on constructor, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticProperty;
         *     }
         *
         *     // property (on prototype, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         property;
         *     }
         *
         *     // method (on constructor)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticMethod() { }
         *     }
         *
         *     // method (on prototype)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         method() { }
         *     }
         *
         */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, propertyKey) {
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
            }
            return decorator;
        }
        exporter("metadata", metadata);
        /**
         * Define a unique metadata entry on the target.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param metadataValue A value that contains attached metadata.
         * @param target The target object on which to define metadata.
         * @param propertyKey (Optional) The property key for the target.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Reflect.defineMetadata("custom:annotation", options, Example);
         *
         *     // property (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
         *
         *     // method (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
         *
         *     // decorator factory as metadata-producing annotation.
         *     function MyAnnotation(options): Decorator {
         *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
         *     }
         *
         */
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        /**
         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        /**
         * Gets a value indicating whether the target object has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        /**
         * Gets the metadata keys defined on the target object or its prototype chain.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "method");
         *
         */
        function getMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        /**
         * Gets the unique metadata keys defined on the target object.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
         *
         */
        function getOwnMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        /**
         * Deletes the metadata entry from the target object with the provided key.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata entry was found and deleted; otherwise, false.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.deleteMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function deleteMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            if (!metadataMap.delete(metadataKey))
                return false;
            if (metadataMap.size > 0)
                return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(propertyKey);
            if (targetMetadata.size > 0)
                return true;
            Metadata.delete(target);
            return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated))
                        throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsObject(decorated))
                        throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = Metadata.get(O);
            if (IsUndefined(targetMetadata)) {
                if (!Create)
                    return undefined;
                targetMetadata = new _Map();
                Metadata.set(O, targetMetadata);
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
                if (!Create)
                    return undefined;
                metadataMap = new _Map();
                targetMetadata.set(P, metadataMap);
            }
            return metadataMap;
        }
        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return true;
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryHasMetadata(MetadataKey, parent, P);
            return false;
        }
        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            return ToBoolean(metadataMap.has(MetadataKey));
        }
        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryGetMetadata(MetadataKey, parent, P);
            return undefined;
        }
        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return undefined;
            return metadataMap.get(MetadataKey);
        }
        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // 3.1.6.1 OrdinaryMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (parent === null)
                return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0)
                return ownKeys;
            if (ownKeys.length <= 0)
                return parentKeys;
            var set = new _Set();
            var keys = [];
            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                var key = ownKeys_1[_i];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                var key = parentKeys_1[_a];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            return keys;
        }
        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
        function OrdinaryOwnMetadataKeys(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
                var next = IteratorStep(iterator);
                if (!next) {
                    keys.length = k;
                    return keys;
                }
                var nextValue = IteratorValue(next);
                try {
                    keys[k] = nextValue;
                }
                catch (e) {
                    try {
                        IteratorClose(iterator);
                    }
                    finally {
                        throw e;
                    }
                }
                k++;
            }
        }
        // 6 ECMAScript Data Typ0es and Values
        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
        function Type(x) {
            if (x === null)
                return 1 /* Null */;
            switch (typeof x) {
                case "undefined": return 0 /* Undefined */;
                case "boolean": return 2 /* Boolean */;
                case "string": return 3 /* String */;
                case "symbol": return 4 /* Symbol */;
                case "number": return 5 /* Number */;
                case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
                default: return 6 /* Object */;
            }
        }
        // 6.1.1 The Undefined Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // 6.1.2 The Null Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
        function IsNull(x) {
            return x === null;
        }
        // 6.1.5 The Symbol Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return typeof x === "symbol";
        }
        // 6.1.7 The Object Type
        // https://tc39.github.io/ecma262/#sec-object-type
        function IsObject(x) {
            return typeof x === "object" ? x !== null : typeof x === "function";
        }
        // 7.1 Type Conversion
        // https://tc39.github.io/ecma262/#sec-type-conversion
        // 7.1.1 ToPrimitive(input [, PreferredType])
        // https://tc39.github.io/ecma262/#sec-toprimitive
        function ToPrimitive(input, PreferredType) {
            switch (Type(input)) {
                case 0 /* Undefined */: return input;
                case 1 /* Null */: return input;
                case 2 /* Boolean */: return input;
                case 3 /* String */: return input;
                case 4 /* Symbol */: return input;
                case 5 /* Number */: return input;
            }
            var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
            if (exoticToPrim !== undefined) {
                var result = exoticToPrim.call(input, hint);
                if (IsObject(result))
                    throw new TypeError();
                return result;
            }
            return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        // 7.1.1.1 OrdinaryToPrimitive(O, hint)
        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
        function OrdinaryToPrimitive(O, hint) {
            if (hint === "string") {
                var toString_1 = O.toString;
                if (IsCallable(toString_1)) {
                    var result = toString_1.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            else {
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var toString_2 = O.toString;
                if (IsCallable(toString_2)) {
                    var result = toString_2.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            throw new TypeError();
        }
        // 7.1.2 ToBoolean(argument)
        // https://tc39.github.io/ecma262/2016/#sec-toboolean
        function ToBoolean(argument) {
            return !!argument;
        }
        // 7.1.12 ToString(argument)
        // https://tc39.github.io/ecma262/#sec-tostring
        function ToString(argument) {
            return "" + argument;
        }
        // 7.1.14 ToPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-topropertykey
        function ToPropertyKey(argument) {
            var key = ToPrimitive(argument, 3 /* String */);
            if (IsSymbol(key))
                return key;
            return ToString(key);
        }
        // 7.2 Testing and Comparison Operations
        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
        // 7.2.2 IsArray(argument)
        // https://tc39.github.io/ecma262/#sec-isarray
        function IsArray(argument) {
            return Array.isArray
                ? Array.isArray(argument)
                : argument instanceof Object
                    ? argument instanceof Array
                    : Object.prototype.toString.call(argument) === "[object Array]";
        }
        // 7.2.3 IsCallable(argument)
        // https://tc39.github.io/ecma262/#sec-iscallable
        function IsCallable(argument) {
            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
            return typeof argument === "function";
        }
        // 7.2.4 IsConstructor(argument)
        // https://tc39.github.io/ecma262/#sec-isconstructor
        function IsConstructor(argument) {
            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
            return typeof argument === "function";
        }
        // 7.2.7 IsPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-ispropertykey
        function IsPropertyKey(argument) {
            switch (Type(argument)) {
                case 3 /* String */: return true;
                case 4 /* Symbol */: return true;
                default: return false;
            }
        }
        // 7.3 Operations on Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-objects
        // 7.3.9 GetMethod(V, P)
        // https://tc39.github.io/ecma262/#sec-getmethod
        function GetMethod(V, P) {
            var func = V[P];
            if (func === undefined || func === null)
                return undefined;
            if (!IsCallable(func))
                throw new TypeError();
            return func;
        }
        // 7.4 Operations on Iterator Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
        function GetIterator(obj) {
            var method = GetMethod(obj, iteratorSymbol);
            if (!IsCallable(method))
                throw new TypeError(); // from Call
            var iterator = method.call(obj);
            if (!IsObject(iterator))
                throw new TypeError();
            return iterator;
        }
        // 7.4.4 IteratorValue(iterResult)
        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
        function IteratorValue(iterResult) {
            return iterResult.value;
        }
        // 7.4.5 IteratorStep(iterator)
        // https://tc39.github.io/ecma262/#sec-iteratorstep
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? false : result;
        }
        // 7.4.6 IteratorClose(iterator, completion)
        // https://tc39.github.io/ecma262/#sec-iteratorclose
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f)
                f.call(iterator);
        }
        // 9.1 Ordinary Object Internal Methods and Internal Slots
        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
        // 9.1.1.1 OrdinaryGetPrototypeOf(O)
        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
        function OrdinaryGetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype)
                return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass constructor. Compatible implementations
            // must either set __proto__ on a subclass constructor to the superclass constructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype)
                return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype)
                return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function")
                return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O)
                return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            var arraySentinel = [];
            var MapIterator = /** @class */ (function () {
                function MapIterator(keys, values, selector) {
                    this._index = 0;
                    this._keys = keys;
                    this._values = values;
                    this._selector = selector;
                }
                MapIterator.prototype["@@iterator"] = function () { return this; };
                MapIterator.prototype[iteratorSymbol] = function () { return this; };
                MapIterator.prototype.next = function () {
                    var index = this._index;
                    if (index >= 0 && index < this._keys.length) {
                        var result = this._selector(this._keys[index], this._values[index]);
                        if (index + 1 >= this._keys.length) {
                            this._index = -1;
                            this._keys = arraySentinel;
                            this._values = arraySentinel;
                        }
                        else {
                            this._index++;
                        }
                        return { value: result, done: false };
                    }
                    return { value: undefined, done: true };
                };
                MapIterator.prototype.throw = function (error) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    throw error;
                };
                MapIterator.prototype.return = function (value) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    return { value: value, done: true };
                };
                return MapIterator;
            }());
            return /** @class */ (function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function () { return this._keys.length; },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/ true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        if (key === this._cacheKey) {
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                        }
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
                Map.prototype["@@iterator"] = function () { return this.entries(); };
                Map.prototype[iteratorSymbol] = function () { return this.entries(); };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey !== key) {
                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                    }
                    if (this._cacheIndex < 0 && insert) {
                        this._cacheIndex = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheIndex;
                };
                return Map;
            }());
            function getKey(key, _) {
                return key;
            }
            function getValue(_, value) {
                return value;
            }
            function getEntry(key, value) {
                return [key, value];
            }
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return /** @class */ (function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function () { return this._map.size; },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) { return this._map.has(value); };
                Set.prototype.add = function (value) { return this._map.set(value, value), this; };
                Set.prototype.delete = function (value) { return this._map.delete(value); };
                Set.prototype.clear = function () { this._map.clear(); };
                Set.prototype.keys = function () { return this._map.keys(); };
                Set.prototype.values = function () { return this._map.values(); };
                Set.prototype.entries = function () { return this._map.entries(); };
                Set.prototype["@@iterator"] = function () { return this.keys(); };
                Set.prototype[iteratorSymbol] = function () { return this.keys(); };
                return Set;
            }());
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = HashMap.create();
            var rootKey = CreateUniqueKey();
            return /** @class */ (function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }());
            function CreateUniqueKey() {
                var key;
                do
                    key = "@@WeakMap@@" + CreateUUID();
                while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create)
                        return undefined;
                    Object.defineProperty(target, rootKey, { value: HashMap.create() });
                }
                return target[rootKey];
            }
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i)
                    buffer[i] = Math.random() * 0xff | 0;
                return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined")
                        return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined")
                        return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8)
                        result += "-";
                    if (byte < 16)
                        result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__ = undefined;
            delete obj.__;
            return obj;
        }
    });
})(Reflect || (Reflect = {}));


/***/ }),

/***/ "./node_modules/snabbdom/build/h.js":
/*!******************************************!*\
  !*** ./node_modules/snabbdom/build/h.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addNS": () => (/* binding */ addNS),
/* harmony export */   "fragment": () => (/* binding */ fragment),
/* harmony export */   "h": () => (/* binding */ h)
/* harmony export */ });
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vnode */ "./node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is */ "./node_modules/snabbdom/build/is.js");


function addNS(data, children, sel) {
    data.ns = "http://www.w3.org/2000/svg";
    if (sel !== "foreignObject" && children !== undefined) {
        for (let i = 0; i < children.length; ++i) {
            const child = children[i];
            if (typeof child === "string")
                continue;
            const childData = child.data;
            if (childData !== undefined) {
                addNS(childData, child.children, child.sel);
            }
        }
    }
}
function h(sel, b, c) {
    let data = {};
    let children;
    let text;
    let i;
    if (c !== undefined) {
        if (b !== null) {
            data = b;
        }
        if (_is__WEBPACK_IMPORTED_MODULE_0__.array(c)) {
            children = c;
        }
        else if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(c)) {
            text = c.toString();
        }
        else if (c && c.sel) {
            children = [c];
        }
    }
    else if (b !== undefined && b !== null) {
        if (_is__WEBPACK_IMPORTED_MODULE_0__.array(b)) {
            children = b;
        }
        else if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(b)) {
            text = b.toString();
        }
        else if (b && b.sel) {
            children = [b];
        }
        else {
            data = b;
        }
    }
    if (children !== undefined) {
        for (i = 0; i < children.length; ++i) {
            if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(children[i]))
                children[i] = (0,_vnode__WEBPACK_IMPORTED_MODULE_1__.vnode)(undefined, undefined, undefined, children[i], undefined);
        }
    }
    if (sel[0] === "s" &&
        sel[1] === "v" &&
        sel[2] === "g" &&
        (sel.length === 3 || sel[3] === "." || sel[3] === "#")) {
        addNS(data, children, sel);
    }
    return (0,_vnode__WEBPACK_IMPORTED_MODULE_1__.vnode)(sel, data, children, text, undefined);
}
/**
 * @experimental
 */
function fragment(children) {
    let c;
    let text;
    if (_is__WEBPACK_IMPORTED_MODULE_0__.array(children)) {
        c = children;
    }
    else if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(c)) {
        text = children;
    }
    else if (c && c.sel) {
        c = [children];
    }
    if (c !== undefined) {
        for (let i = 0; i < c.length; ++i) {
            if (_is__WEBPACK_IMPORTED_MODULE_0__.primitive(c[i]))
                c[i] = (0,_vnode__WEBPACK_IMPORTED_MODULE_1__.vnode)(undefined, undefined, undefined, c[i], undefined);
        }
    }
    return (0,_vnode__WEBPACK_IMPORTED_MODULE_1__.vnode)(undefined, {}, c, text, undefined);
}


/***/ }),

/***/ "./node_modules/snabbdom/build/helpers/attachto.js":
/*!*********************************************************!*\
  !*** ./node_modules/snabbdom/build/helpers/attachto.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attachTo": () => (/* binding */ attachTo)
/* harmony export */ });
function pre(vnode, newVnode) {
    const attachData = vnode.data.attachData;
    // Copy created placeholder and real element from old vnode
    newVnode.data.attachData.placeholder = attachData.placeholder;
    newVnode.data.attachData.real = attachData.real;
    // Mount real element in vnode so the patch process operates on it
    vnode.elm = vnode.data.attachData.real;
}
function post(_, vnode) {
    // Mount dummy placeholder in vnode so potential reorders use it
    vnode.elm = vnode.data.attachData.placeholder;
}
function destroy(vnode) {
    // Remove placeholder
    if (vnode.elm !== undefined) {
        vnode.elm.parentNode.removeChild(vnode.elm);
    }
    // Remove real element from where it was inserted
    vnode.elm = vnode.data.attachData.real;
}
function create(_, vnode) {
    const real = vnode.elm;
    const attachData = vnode.data.attachData;
    const placeholder = document.createElement("span");
    // Replace actual element with dummy placeholder
    // Snabbdom will then insert placeholder instead
    vnode.elm = placeholder;
    attachData.target.appendChild(real);
    attachData.real = real;
    attachData.placeholder = placeholder;
}
function attachTo(target, vnode) {
    if (vnode.data === undefined)
        vnode.data = {};
    if (vnode.data.hook === undefined)
        vnode.data.hook = {};
    const data = vnode.data;
    const hook = vnode.data.hook;
    data.attachData = { target: target, placeholder: undefined, real: undefined };
    hook.create = create;
    hook.prepatch = pre;
    hook.postpatch = post;
    hook.destroy = destroy;
    return vnode;
}


/***/ }),

/***/ "./node_modules/snabbdom/build/htmldomapi.js":
/*!***************************************************!*\
  !*** ./node_modules/snabbdom/build/htmldomapi.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "htmlDomApi": () => (/* binding */ htmlDomApi)
/* harmony export */ });
function createElement(tagName, options) {
    return document.createElement(tagName, options);
}
function createElementNS(namespaceURI, qualifiedName, options) {
    return document.createElementNS(namespaceURI, qualifiedName, options);
}
function createDocumentFragment() {
    return parseFragment(document.createDocumentFragment());
}
function createTextNode(text) {
    return document.createTextNode(text);
}
function createComment(text) {
    return document.createComment(text);
}
function insertBefore(parentNode, newNode, referenceNode) {
    if (isDocumentFragment(parentNode)) {
        let node = parentNode;
        while (node && isDocumentFragment(node)) {
            const fragment = parseFragment(node);
            node = fragment.parent;
        }
        parentNode = node !== null && node !== void 0 ? node : parentNode;
    }
    if (isDocumentFragment(newNode)) {
        newNode = parseFragment(newNode, parentNode);
    }
    if (referenceNode && isDocumentFragment(referenceNode)) {
        referenceNode = parseFragment(referenceNode).firstChildNode;
    }
    parentNode.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
    node.removeChild(child);
}
function appendChild(node, child) {
    if (isDocumentFragment(child)) {
        child = parseFragment(child, node);
    }
    node.appendChild(child);
}
function parentNode(node) {
    if (isDocumentFragment(node)) {
        while (node && isDocumentFragment(node)) {
            const fragment = parseFragment(node);
            node = fragment.parent;
        }
        return node !== null && node !== void 0 ? node : null;
    }
    return node.parentNode;
}
function nextSibling(node) {
    var _a;
    if (isDocumentFragment(node)) {
        const fragment = parseFragment(node);
        const parent = parentNode(fragment);
        if (parent && fragment.lastChildNode) {
            const children = Array.from(parent.childNodes);
            const index = children.indexOf(fragment.lastChildNode);
            return (_a = children[index + 1]) !== null && _a !== void 0 ? _a : null;
        }
        return null;
    }
    return node.nextSibling;
}
function tagName(elm) {
    return elm.tagName;
}
function setTextContent(node, text) {
    node.textContent = text;
}
function getTextContent(node) {
    return node.textContent;
}
function isElement(node) {
    return node.nodeType === 1;
}
function isText(node) {
    return node.nodeType === 3;
}
function isComment(node) {
    return node.nodeType === 8;
}
function isDocumentFragment(node) {
    return node.nodeType === 11;
}
function parseFragment(fragmentNode, parentNode) {
    var _a, _b, _c;
    const fragment = fragmentNode;
    (_a = fragment.parent) !== null && _a !== void 0 ? _a : (fragment.parent = parentNode !== null && parentNode !== void 0 ? parentNode : null);
    (_b = fragment.firstChildNode) !== null && _b !== void 0 ? _b : (fragment.firstChildNode = fragmentNode.firstChild);
    (_c = fragment.lastChildNode) !== null && _c !== void 0 ? _c : (fragment.lastChildNode = fragmentNode.lastChild);
    return fragment;
}
const htmlDomApi = {
    createElement,
    createElementNS,
    createTextNode,
    createDocumentFragment,
    createComment,
    insertBefore,
    removeChild,
    appendChild,
    parentNode,
    nextSibling,
    tagName,
    setTextContent,
    getTextContent,
    isElement,
    isText,
    isComment,
    isDocumentFragment,
};


/***/ }),

/***/ "./node_modules/snabbdom/build/index.js":
/*!**********************************************!*\
  !*** ./node_modules/snabbdom/build/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Fragment": () => (/* reexport safe */ _jsx__WEBPACK_IMPORTED_MODULE_14__.Fragment),
/* harmony export */   "array": () => (/* reexport safe */ _is__WEBPACK_IMPORTED_MODULE_5__.array),
/* harmony export */   "attachTo": () => (/* reexport safe */ _helpers_attachto__WEBPACK_IMPORTED_MODULE_4__.attachTo),
/* harmony export */   "attributesModule": () => (/* reexport safe */ _modules_attributes__WEBPACK_IMPORTED_MODULE_8__.attributesModule),
/* harmony export */   "classModule": () => (/* reexport safe */ _modules_class__WEBPACK_IMPORTED_MODULE_9__.classModule),
/* harmony export */   "datasetModule": () => (/* reexport safe */ _modules_dataset__WEBPACK_IMPORTED_MODULE_10__.datasetModule),
/* harmony export */   "eventListenersModule": () => (/* reexport safe */ _modules_eventlisteners__WEBPACK_IMPORTED_MODULE_11__.eventListenersModule),
/* harmony export */   "fragment": () => (/* reexport safe */ _h__WEBPACK_IMPORTED_MODULE_7__.fragment),
/* harmony export */   "h": () => (/* reexport safe */ _h__WEBPACK_IMPORTED_MODULE_7__.h),
/* harmony export */   "htmlDomApi": () => (/* reexport safe */ _htmldomapi__WEBPACK_IMPORTED_MODULE_0__.htmlDomApi),
/* harmony export */   "init": () => (/* reexport safe */ _init__WEBPACK_IMPORTED_MODULE_1__.init),
/* harmony export */   "jsx": () => (/* reexport safe */ _jsx__WEBPACK_IMPORTED_MODULE_14__.jsx),
/* harmony export */   "primitive": () => (/* reexport safe */ _is__WEBPACK_IMPORTED_MODULE_5__.primitive),
/* harmony export */   "propsModule": () => (/* reexport safe */ _modules_props__WEBPACK_IMPORTED_MODULE_12__.propsModule),
/* harmony export */   "styleModule": () => (/* reexport safe */ _modules_style__WEBPACK_IMPORTED_MODULE_13__.styleModule),
/* harmony export */   "thunk": () => (/* reexport safe */ _thunk__WEBPACK_IMPORTED_MODULE_2__.thunk),
/* harmony export */   "toVNode": () => (/* reexport safe */ _tovnode__WEBPACK_IMPORTED_MODULE_6__.toVNode),
/* harmony export */   "vnode": () => (/* reexport safe */ _vnode__WEBPACK_IMPORTED_MODULE_3__.vnode)
/* harmony export */ });
/* harmony import */ var _htmldomapi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmldomapi */ "./node_modules/snabbdom/build/htmldomapi.js");
/* harmony import */ var _init__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./init */ "./node_modules/snabbdom/build/init.js");
/* harmony import */ var _thunk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./thunk */ "./node_modules/snabbdom/build/thunk.js");
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vnode */ "./node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _helpers_attachto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/attachto */ "./node_modules/snabbdom/build/helpers/attachto.js");
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./is */ "./node_modules/snabbdom/build/is.js");
/* harmony import */ var _tovnode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tovnode */ "./node_modules/snabbdom/build/tovnode.js");
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./h */ "./node_modules/snabbdom/build/h.js");
/* harmony import */ var _modules_attributes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/attributes */ "./node_modules/snabbdom/build/modules/attributes.js");
/* harmony import */ var _modules_class__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/class */ "./node_modules/snabbdom/build/modules/class.js");
/* harmony import */ var _modules_dataset__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/dataset */ "./node_modules/snabbdom/build/modules/dataset.js");
/* harmony import */ var _modules_eventlisteners__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/eventlisteners */ "./node_modules/snabbdom/build/modules/eventlisteners.js");
/* harmony import */ var _modules_props__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/props */ "./node_modules/snabbdom/build/modules/props.js");
/* harmony import */ var _modules_style__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/style */ "./node_modules/snabbdom/build/modules/style.js");
/* harmony import */ var _jsx__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./jsx */ "./node_modules/snabbdom/build/jsx.js");
// core




// helpers




// types

// modules






// JSX



/***/ }),

/***/ "./node_modules/snabbdom/build/init.js":
/*!*********************************************!*\
  !*** ./node_modules/snabbdom/build/init.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "init": () => (/* binding */ init)
/* harmony export */ });
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vnode */ "./node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _is__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is */ "./node_modules/snabbdom/build/is.js");
/* harmony import */ var _htmldomapi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./htmldomapi */ "./node_modules/snabbdom/build/htmldomapi.js");



function isUndef(s) {
    return s === undefined;
}
function isDef(s) {
    return s !== undefined;
}
const emptyNode = (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)("", {}, [], undefined, undefined);
function sameVnode(vnode1, vnode2) {
    var _a, _b;
    const isSameKey = vnode1.key === vnode2.key;
    const isSameIs = ((_a = vnode1.data) === null || _a === void 0 ? void 0 : _a.is) === ((_b = vnode2.data) === null || _b === void 0 ? void 0 : _b.is);
    const isSameSel = vnode1.sel === vnode2.sel;
    const isSameTextOrFragment = !vnode1.sel && vnode1.sel === vnode2.sel
        ? typeof vnode1.text === typeof vnode2.text
        : true;
    return isSameSel && isSameKey && isSameIs && isSameTextOrFragment;
}
/**
 * @todo Remove this function when the document fragment is considered stable.
 */
function documentFragmentIsNotSupported() {
    throw new Error("The document fragment is not supported on this platform.");
}
function isElement(api, vnode) {
    return api.isElement(vnode);
}
function isDocumentFragment(api, vnode) {
    return api.isDocumentFragment(vnode);
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
    var _a;
    const map = {};
    for (let i = beginIdx; i <= endIdx; ++i) {
        const key = (_a = children[i]) === null || _a === void 0 ? void 0 : _a.key;
        if (key !== undefined) {
            map[key] = i;
        }
    }
    return map;
}
const hooks = [
    "create",
    "update",
    "remove",
    "destroy",
    "pre",
    "post",
];
function init(modules, domApi, options) {
    const cbs = {
        create: [],
        update: [],
        remove: [],
        destroy: [],
        pre: [],
        post: [],
    };
    const api = domApi !== undefined ? domApi : _htmldomapi__WEBPACK_IMPORTED_MODULE_1__.htmlDomApi;
    for (const hook of hooks) {
        for (const module of modules) {
            const currentHook = module[hook];
            if (currentHook !== undefined) {
                cbs[hook].push(currentHook);
            }
        }
    }
    function emptyNodeAt(elm) {
        const id = elm.id ? "#" + elm.id : "";
        // elm.className doesn't return a string when elm is an SVG element inside a shadowRoot.
        // https://stackoverflow.com/questions/29454340/detecting-classname-of-svganimatedstring
        const classes = elm.getAttribute("class");
        const c = classes ? "." + classes.split(" ").join(".") : "";
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);
    }
    function emptyDocumentFragmentAt(frag) {
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(undefined, {}, [], undefined, frag);
    }
    function createRmCb(childElm, listeners) {
        return function rmCb() {
            if (--listeners === 0) {
                const parent = api.parentNode(childElm);
                api.removeChild(parent, childElm);
            }
        };
    }
    function createElm(vnode, insertedVnodeQueue) {
        var _a, _b, _c, _d;
        let i;
        let data = vnode.data;
        if (data !== undefined) {
            const init = (_a = data.hook) === null || _a === void 0 ? void 0 : _a.init;
            if (isDef(init)) {
                init(vnode);
                data = vnode.data;
            }
        }
        const children = vnode.children;
        const sel = vnode.sel;
        if (sel === "!") {
            if (isUndef(vnode.text)) {
                vnode.text = "";
            }
            vnode.elm = api.createComment(vnode.text);
        }
        else if (sel !== undefined) {
            // Parse selector
            const hashIdx = sel.indexOf("#");
            const dotIdx = sel.indexOf(".", hashIdx);
            const hash = hashIdx > 0 ? hashIdx : sel.length;
            const dot = dotIdx > 0 ? dotIdx : sel.length;
            const tag = hashIdx !== -1 || dotIdx !== -1
                ? sel.slice(0, Math.min(hash, dot))
                : sel;
            const elm = (vnode.elm =
                isDef(data) && isDef((i = data.ns))
                    ? api.createElementNS(i, tag, data)
                    : api.createElement(tag, data));
            if (hash < dot)
                elm.setAttribute("id", sel.slice(hash + 1, dot));
            if (dotIdx > 0)
                elm.setAttribute("class", sel.slice(dot + 1).replace(/\./g, " "));
            for (i = 0; i < cbs.create.length; ++i)
                cbs.create[i](emptyNode, vnode);
            if (_is__WEBPACK_IMPORTED_MODULE_2__.array(children)) {
                for (i = 0; i < children.length; ++i) {
                    const ch = children[i];
                    if (ch != null) {
                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));
                    }
                }
            }
            else if (_is__WEBPACK_IMPORTED_MODULE_2__.primitive(vnode.text)) {
                api.appendChild(elm, api.createTextNode(vnode.text));
            }
            const hook = vnode.data.hook;
            if (isDef(hook)) {
                (_b = hook.create) === null || _b === void 0 ? void 0 : _b.call(hook, emptyNode, vnode);
                if (hook.insert) {
                    insertedVnodeQueue.push(vnode);
                }
            }
        }
        else if (((_c = options === null || options === void 0 ? void 0 : options.experimental) === null || _c === void 0 ? void 0 : _c.fragments) && vnode.children) {
            vnode.elm = ((_d = api.createDocumentFragment) !== null && _d !== void 0 ? _d : documentFragmentIsNotSupported)();
            for (i = 0; i < cbs.create.length; ++i)
                cbs.create[i](emptyNode, vnode);
            for (i = 0; i < vnode.children.length; ++i) {
                const ch = vnode.children[i];
                if (ch != null) {
                    api.appendChild(vnode.elm, createElm(ch, insertedVnodeQueue));
                }
            }
        }
        else {
            vnode.elm = api.createTextNode(vnode.text);
        }
        return vnode.elm;
    }
    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {
        for (; startIdx <= endIdx; ++startIdx) {
            const ch = vnodes[startIdx];
            if (ch != null) {
                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);
            }
        }
    }
    function invokeDestroyHook(vnode) {
        var _a, _b;
        const data = vnode.data;
        if (data !== undefined) {
            (_b = (_a = data === null || data === void 0 ? void 0 : data.hook) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a, vnode);
            for (let i = 0; i < cbs.destroy.length; ++i)
                cbs.destroy[i](vnode);
            if (vnode.children !== undefined) {
                for (let j = 0; j < vnode.children.length; ++j) {
                    const child = vnode.children[j];
                    if (child != null && typeof child !== "string") {
                        invokeDestroyHook(child);
                    }
                }
            }
        }
    }
    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
        var _a, _b;
        for (; startIdx <= endIdx; ++startIdx) {
            let listeners;
            let rm;
            const ch = vnodes[startIdx];
            if (ch != null) {
                if (isDef(ch.sel)) {
                    invokeDestroyHook(ch);
                    listeners = cbs.remove.length + 1;
                    rm = createRmCb(ch.elm, listeners);
                    for (let i = 0; i < cbs.remove.length; ++i)
                        cbs.remove[i](ch, rm);
                    const removeHook = (_b = (_a = ch === null || ch === void 0 ? void 0 : ch.data) === null || _a === void 0 ? void 0 : _a.hook) === null || _b === void 0 ? void 0 : _b.remove;
                    if (isDef(removeHook)) {
                        removeHook(ch, rm);
                    }
                    else {
                        rm();
                    }
                }
                else if (ch.children) {
                    // Fragment node
                    invokeDestroyHook(ch);
                    removeVnodes(parentElm, ch.children, 0, ch.children.length - 1);
                }
                else {
                    // Text node
                    api.removeChild(parentElm, ch.elm);
                }
            }
        }
    }
    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {
        let oldStartIdx = 0;
        let newStartIdx = 0;
        let oldEndIdx = oldCh.length - 1;
        let oldStartVnode = oldCh[0];
        let oldEndVnode = oldCh[oldEndIdx];
        let newEndIdx = newCh.length - 1;
        let newStartVnode = newCh[0];
        let newEndVnode = newCh[newEndIdx];
        let oldKeyToIdx;
        let idxInOld;
        let elmToMove;
        let before;
        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
            if (oldStartVnode == null) {
                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left
            }
            else if (oldEndVnode == null) {
                oldEndVnode = oldCh[--oldEndIdx];
            }
            else if (newStartVnode == null) {
                newStartVnode = newCh[++newStartIdx];
            }
            else if (newEndVnode == null) {
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newStartVnode)) {
                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
                oldStartVnode = oldCh[++oldStartIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else if (sameVnode(oldEndVnode, newEndVnode)) {
                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
                oldEndVnode = oldCh[--oldEndIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldStartVnode, newEndVnode)) {
                // Vnode moved right
                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));
                oldStartVnode = oldCh[++oldStartIdx];
                newEndVnode = newCh[--newEndIdx];
            }
            else if (sameVnode(oldEndVnode, newStartVnode)) {
                // Vnode moved left
                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                oldEndVnode = oldCh[--oldEndIdx];
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                if (oldKeyToIdx === undefined) {
                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                }
                idxInOld = oldKeyToIdx[newStartVnode.key];
                if (isUndef(idxInOld)) {
                    // New element
                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                }
                else {
                    elmToMove = oldCh[idxInOld];
                    if (elmToMove.sel !== newStartVnode.sel) {
                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);
                    }
                    else {
                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
                        oldCh[idxInOld] = undefined;
                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
                    }
                }
                newStartVnode = newCh[++newStartIdx];
            }
        }
        if (newStartIdx <= newEndIdx) {
            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;
            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
        }
        if (oldStartIdx <= oldEndIdx) {
            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
        }
    }
    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const hook = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.hook;
        (_b = hook === null || hook === void 0 ? void 0 : hook.prepatch) === null || _b === void 0 ? void 0 : _b.call(hook, oldVnode, vnode);
        const elm = (vnode.elm = oldVnode.elm);
        if (oldVnode === vnode)
            return;
        if (vnode.data !== undefined ||
            (isDef(vnode.text) && vnode.text !== oldVnode.text)) {
            (_c = vnode.data) !== null && _c !== void 0 ? _c : (vnode.data = {});
            (_d = oldVnode.data) !== null && _d !== void 0 ? _d : (oldVnode.data = {});
            for (let i = 0; i < cbs.update.length; ++i)
                cbs.update[i](oldVnode, vnode);
            (_g = (_f = (_e = vnode.data) === null || _e === void 0 ? void 0 : _e.hook) === null || _f === void 0 ? void 0 : _f.update) === null || _g === void 0 ? void 0 : _g.call(_f, oldVnode, vnode);
        }
        const oldCh = oldVnode.children;
        const ch = vnode.children;
        if (isUndef(vnode.text)) {
            if (isDef(oldCh) && isDef(ch)) {
                if (oldCh !== ch)
                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);
            }
            else if (isDef(ch)) {
                if (isDef(oldVnode.text))
                    api.setTextContent(elm, "");
                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
            }
            else if (isDef(oldCh)) {
                removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            }
            else if (isDef(oldVnode.text)) {
                api.setTextContent(elm, "");
            }
        }
        else if (oldVnode.text !== vnode.text) {
            if (isDef(oldCh)) {
                removeVnodes(elm, oldCh, 0, oldCh.length - 1);
            }
            api.setTextContent(elm, vnode.text);
        }
        (_h = hook === null || hook === void 0 ? void 0 : hook.postpatch) === null || _h === void 0 ? void 0 : _h.call(hook, oldVnode, vnode);
    }
    return function patch(oldVnode, vnode) {
        let i, elm, parent;
        const insertedVnodeQueue = [];
        for (i = 0; i < cbs.pre.length; ++i)
            cbs.pre[i]();
        if (isElement(api, oldVnode)) {
            oldVnode = emptyNodeAt(oldVnode);
        }
        else if (isDocumentFragment(api, oldVnode)) {
            oldVnode = emptyDocumentFragmentAt(oldVnode);
        }
        if (sameVnode(oldVnode, vnode)) {
            patchVnode(oldVnode, vnode, insertedVnodeQueue);
        }
        else {
            elm = oldVnode.elm;
            parent = api.parentNode(elm);
            createElm(vnode, insertedVnodeQueue);
            if (parent !== null) {
                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));
                removeVnodes(parent, [oldVnode], 0, 0);
            }
        }
        for (i = 0; i < insertedVnodeQueue.length; ++i) {
            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
        }
        for (i = 0; i < cbs.post.length; ++i)
            cbs.post[i]();
        return vnode;
    };
}


/***/ }),

/***/ "./node_modules/snabbdom/build/is.js":
/*!*******************************************!*\
  !*** ./node_modules/snabbdom/build/is.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "array": () => (/* binding */ array),
/* harmony export */   "primitive": () => (/* binding */ primitive)
/* harmony export */ });
const array = Array.isArray;
function primitive(s) {
    return (typeof s === "string" ||
        typeof s === "number" ||
        s instanceof String ||
        s instanceof Number);
}


/***/ }),

/***/ "./node_modules/snabbdom/build/jsx.js":
/*!********************************************!*\
  !*** ./node_modules/snabbdom/build/jsx.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Fragment": () => (/* binding */ Fragment),
/* harmony export */   "jsx": () => (/* binding */ jsx)
/* harmony export */ });
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vnode */ "./node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./h */ "./node_modules/snabbdom/build/h.js");
/* eslint-disable @typescript-eslint/no-namespace, import/export */


function Fragment(data, ...children) {
    const flatChildren = flattenAndFilter(children, []);
    if (flatChildren.length === 1 &&
        !flatChildren[0].sel &&
        flatChildren[0].text) {
        // only child is a simple text node, pass as text for a simpler vtree
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(undefined, undefined, undefined, flatChildren[0].text, undefined);
    }
    else {
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(undefined, data !== null && data !== void 0 ? data : {}, flatChildren, undefined, undefined);
    }
}
function flattenAndFilter(children, flattened) {
    for (const child of children) {
        // filter out falsey children, except 0 since zero can be a valid value e.g inside a chart
        if (child !== undefined &&
            child !== null &&
            child !== false &&
            child !== "") {
            if (Array.isArray(child)) {
                flattenAndFilter(child, flattened);
            }
            else if (typeof child === "string" ||
                typeof child === "number" ||
                typeof child === "boolean") {
                flattened.push((0,_vnode__WEBPACK_IMPORTED_MODULE_0__.vnode)(undefined, undefined, undefined, String(child), undefined));
            }
            else {
                flattened.push(child);
            }
        }
    }
    return flattened;
}
/**
 * jsx/tsx compatible factory function
 * see: https://www.typescriptlang.org/docs/handbook/jsx.html#factory-functions
 */
function jsx(tag, data, ...children) {
    const flatChildren = flattenAndFilter(children, []);
    if (typeof tag === "function") {
        // tag is a function component
        return tag(data, flatChildren);
    }
    else {
        if (flatChildren.length === 1 &&
            !flatChildren[0].sel &&
            flatChildren[0].text) {
            // only child is a simple text node, pass as text for a simpler vtree
            return (0,_h__WEBPACK_IMPORTED_MODULE_1__.h)(tag, data, flatChildren[0].text);
        }
        else {
            return (0,_h__WEBPACK_IMPORTED_MODULE_1__.h)(tag, data, flatChildren);
        }
    }
}
(function (jsx) {
})(jsx || (jsx = {}));


/***/ }),

/***/ "./node_modules/snabbdom/build/modules/attributes.js":
/*!***********************************************************!*\
  !*** ./node_modules/snabbdom/build/modules/attributes.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attributesModule": () => (/* binding */ attributesModule)
/* harmony export */ });
const xlinkNS = "http://www.w3.org/1999/xlink";
const xmlNS = "http://www.w3.org/XML/1998/namespace";
const colonChar = 58;
const xChar = 120;
function updateAttrs(oldVnode, vnode) {
    let key;
    const elm = vnode.elm;
    let oldAttrs = oldVnode.data.attrs;
    let attrs = vnode.data.attrs;
    if (!oldAttrs && !attrs)
        return;
    if (oldAttrs === attrs)
        return;
    oldAttrs = oldAttrs || {};
    attrs = attrs || {};
    // update modified attributes, add new attributes
    for (key in attrs) {
        const cur = attrs[key];
        const old = oldAttrs[key];
        if (old !== cur) {
            if (cur === true) {
                elm.setAttribute(key, "");
            }
            else if (cur === false) {
                elm.removeAttribute(key);
            }
            else {
                if (key.charCodeAt(0) !== xChar) {
                    elm.setAttribute(key, cur);
                }
                else if (key.charCodeAt(3) === colonChar) {
                    // Assume xml namespace
                    elm.setAttributeNS(xmlNS, key, cur);
                }
                else if (key.charCodeAt(5) === colonChar) {
                    // Assume xlink namespace
                    elm.setAttributeNS(xlinkNS, key, cur);
                }
                else {
                    elm.setAttribute(key, cur);
                }
            }
        }
    }
    // remove removed attributes
    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)
    // the other option is to remove all attributes with value == undefined
    for (key in oldAttrs) {
        if (!(key in attrs)) {
            elm.removeAttribute(key);
        }
    }
}
const attributesModule = {
    create: updateAttrs,
    update: updateAttrs,
};


/***/ }),

/***/ "./node_modules/snabbdom/build/modules/class.js":
/*!******************************************************!*\
  !*** ./node_modules/snabbdom/build/modules/class.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "classModule": () => (/* binding */ classModule)
/* harmony export */ });
function updateClass(oldVnode, vnode) {
    let cur;
    let name;
    const elm = vnode.elm;
    let oldClass = oldVnode.data.class;
    let klass = vnode.data.class;
    if (!oldClass && !klass)
        return;
    if (oldClass === klass)
        return;
    oldClass = oldClass || {};
    klass = klass || {};
    for (name in oldClass) {
        if (oldClass[name] && !Object.prototype.hasOwnProperty.call(klass, name)) {
            // was `true` and now not provided
            elm.classList.remove(name);
        }
    }
    for (name in klass) {
        cur = klass[name];
        if (cur !== oldClass[name]) {
            elm.classList[cur ? "add" : "remove"](name);
        }
    }
}
const classModule = { create: updateClass, update: updateClass };


/***/ }),

/***/ "./node_modules/snabbdom/build/modules/dataset.js":
/*!********************************************************!*\
  !*** ./node_modules/snabbdom/build/modules/dataset.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "datasetModule": () => (/* binding */ datasetModule)
/* harmony export */ });
const CAPS_REGEX = /[A-Z]/g;
function updateDataset(oldVnode, vnode) {
    const elm = vnode.elm;
    let oldDataset = oldVnode.data.dataset;
    let dataset = vnode.data.dataset;
    let key;
    if (!oldDataset && !dataset)
        return;
    if (oldDataset === dataset)
        return;
    oldDataset = oldDataset || {};
    dataset = dataset || {};
    const d = elm.dataset;
    for (key in oldDataset) {
        if (!dataset[key]) {
            if (d) {
                if (key in d) {
                    delete d[key];
                }
            }
            else {
                elm.removeAttribute("data-" + key.replace(CAPS_REGEX, "-$&").toLowerCase());
            }
        }
    }
    for (key in dataset) {
        if (oldDataset[key] !== dataset[key]) {
            if (d) {
                d[key] = dataset[key];
            }
            else {
                elm.setAttribute("data-" + key.replace(CAPS_REGEX, "-$&").toLowerCase(), dataset[key]);
            }
        }
    }
}
const datasetModule = {
    create: updateDataset,
    update: updateDataset,
};


/***/ }),

/***/ "./node_modules/snabbdom/build/modules/eventlisteners.js":
/*!***************************************************************!*\
  !*** ./node_modules/snabbdom/build/modules/eventlisteners.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eventListenersModule": () => (/* binding */ eventListenersModule)
/* harmony export */ });
function invokeHandler(handler, vnode, event) {
    if (typeof handler === "function") {
        // call function handler
        handler.call(vnode, event, vnode);
    }
    else if (typeof handler === "object") {
        // call multiple handlers
        for (let i = 0; i < handler.length; i++) {
            invokeHandler(handler[i], vnode, event);
        }
    }
}
function handleEvent(event, vnode) {
    const name = event.type;
    const on = vnode.data.on;
    // call event handler(s) if exists
    if (on && on[name]) {
        invokeHandler(on[name], vnode, event);
    }
}
function createListener() {
    return function handler(event) {
        handleEvent(event, handler.vnode);
    };
}
function updateEventListeners(oldVnode, vnode) {
    const oldOn = oldVnode.data.on;
    const oldListener = oldVnode.listener;
    const oldElm = oldVnode.elm;
    const on = vnode && vnode.data.on;
    const elm = (vnode && vnode.elm);
    let name;
    // optimization for reused immutable handlers
    if (oldOn === on) {
        return;
    }
    // remove existing listeners which no longer used
    if (oldOn && oldListener) {
        // if element changed or deleted we remove all existing listeners unconditionally
        if (!on) {
            for (name in oldOn) {
                // remove listener if element was changed or existing listeners removed
                oldElm.removeEventListener(name, oldListener, false);
            }
        }
        else {
            for (name in oldOn) {
                // remove listener if existing listener removed
                if (!on[name]) {
                    oldElm.removeEventListener(name, oldListener, false);
                }
            }
        }
    }
    // add new listeners which has not already attached
    if (on) {
        // reuse existing listener or create new
        const listener = (vnode.listener =
            oldVnode.listener || createListener());
        // update vnode for listener
        listener.vnode = vnode;
        // if element changed or added we add all needed listeners unconditionally
        if (!oldOn) {
            for (name in on) {
                // add listener if element was changed or new listeners added
                elm.addEventListener(name, listener, false);
            }
        }
        else {
            for (name in on) {
                // add listener if new listener added
                if (!oldOn[name]) {
                    elm.addEventListener(name, listener, false);
                }
            }
        }
    }
}
const eventListenersModule = {
    create: updateEventListeners,
    update: updateEventListeners,
    destroy: updateEventListeners,
};


/***/ }),

/***/ "./node_modules/snabbdom/build/modules/props.js":
/*!******************************************************!*\
  !*** ./node_modules/snabbdom/build/modules/props.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "propsModule": () => (/* binding */ propsModule)
/* harmony export */ });
function updateProps(oldVnode, vnode) {
    let key;
    let cur;
    let old;
    const elm = vnode.elm;
    let oldProps = oldVnode.data.props;
    let props = vnode.data.props;
    if (!oldProps && !props)
        return;
    if (oldProps === props)
        return;
    oldProps = oldProps || {};
    props = props || {};
    for (key in props) {
        cur = props[key];
        old = oldProps[key];
        if (old !== cur && (key !== "value" || elm[key] !== cur)) {
            elm[key] = cur;
        }
    }
}
const propsModule = { create: updateProps, update: updateProps };


/***/ }),

/***/ "./node_modules/snabbdom/build/modules/style.js":
/*!******************************************************!*\
  !*** ./node_modules/snabbdom/build/modules/style.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "styleModule": () => (/* binding */ styleModule)
/* harmony export */ });
// Bindig `requestAnimationFrame` like this fixes a bug in IE/Edge. See #360 and #409.
const raf = (typeof window !== "undefined" &&
    window.requestAnimationFrame.bind(window)) ||
    setTimeout;
const nextFrame = function (fn) {
    raf(function () {
        raf(fn);
    });
};
let reflowForced = false;
function setNextFrame(obj, prop, val) {
    nextFrame(function () {
        obj[prop] = val;
    });
}
function updateStyle(oldVnode, vnode) {
    let cur;
    let name;
    const elm = vnode.elm;
    let oldStyle = oldVnode.data.style;
    let style = vnode.data.style;
    if (!oldStyle && !style)
        return;
    if (oldStyle === style)
        return;
    oldStyle = oldStyle || {};
    style = style || {};
    const oldHasDel = "delayed" in oldStyle;
    for (name in oldStyle) {
        if (!style[name]) {
            if (name[0] === "-" && name[1] === "-") {
                elm.style.removeProperty(name);
            }
            else {
                elm.style[name] = "";
            }
        }
    }
    for (name in style) {
        cur = style[name];
        if (name === "delayed" && style.delayed) {
            for (const name2 in style.delayed) {
                cur = style.delayed[name2];
                if (!oldHasDel || cur !== oldStyle.delayed[name2]) {
                    setNextFrame(elm.style, name2, cur);
                }
            }
        }
        else if (name !== "remove" && cur !== oldStyle[name]) {
            if (name[0] === "-" && name[1] === "-") {
                elm.style.setProperty(name, cur);
            }
            else {
                elm.style[name] = cur;
            }
        }
    }
}
function applyDestroyStyle(vnode) {
    let style;
    let name;
    const elm = vnode.elm;
    const s = vnode.data.style;
    if (!s || !(style = s.destroy))
        return;
    for (name in style) {
        elm.style[name] = style[name];
    }
}
function applyRemoveStyle(vnode, rm) {
    const s = vnode.data.style;
    if (!s || !s.remove) {
        rm();
        return;
    }
    if (!reflowForced) {
        // eslint-disable-next-line @typescript-eslint/no-unused-expressions
        vnode.elm.offsetLeft;
        reflowForced = true;
    }
    let name;
    const elm = vnode.elm;
    let i = 0;
    const style = s.remove;
    let amount = 0;
    const applied = [];
    for (name in style) {
        applied.push(name);
        elm.style[name] = style[name];
    }
    const compStyle = getComputedStyle(elm);
    const props = compStyle["transition-property"].split(", ");
    for (; i < props.length; ++i) {
        if (applied.indexOf(props[i]) !== -1)
            amount++;
    }
    elm.addEventListener("transitionend", function (ev) {
        if (ev.target === elm)
            --amount;
        if (amount === 0)
            rm();
    });
}
function forceReflow() {
    reflowForced = false;
}
const styleModule = {
    pre: forceReflow,
    create: updateStyle,
    update: updateStyle,
    destroy: applyDestroyStyle,
    remove: applyRemoveStyle,
};


/***/ }),

/***/ "./node_modules/snabbdom/build/thunk.js":
/*!**********************************************!*\
  !*** ./node_modules/snabbdom/build/thunk.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "thunk": () => (/* binding */ thunk)
/* harmony export */ });
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./h */ "./node_modules/snabbdom/build/h.js");

function copyToThunk(vnode, thunk) {
    var _a;
    const ns = (_a = thunk.data) === null || _a === void 0 ? void 0 : _a.ns;
    vnode.data.fn = thunk.data.fn;
    vnode.data.args = thunk.data.args;
    thunk.data = vnode.data;
    thunk.children = vnode.children;
    thunk.text = vnode.text;
    thunk.elm = vnode.elm;
    if (ns)
        (0,_h__WEBPACK_IMPORTED_MODULE_0__.addNS)(thunk.data, thunk.children, thunk.sel);
}
function init(thunk) {
    const cur = thunk.data;
    const vnode = cur.fn(...cur.args);
    copyToThunk(vnode, thunk);
}
function prepatch(oldVnode, thunk) {
    let i;
    const old = oldVnode.data;
    const cur = thunk.data;
    const oldArgs = old.args;
    const args = cur.args;
    if (old.fn !== cur.fn || oldArgs.length !== args.length) {
        copyToThunk(cur.fn(...args), thunk);
        return;
    }
    for (i = 0; i < args.length; ++i) {
        if (oldArgs[i] !== args[i]) {
            copyToThunk(cur.fn(...args), thunk);
            return;
        }
    }
    copyToThunk(oldVnode, thunk);
}
const thunk = function thunk(sel, key, fn, args) {
    if (args === undefined) {
        args = fn;
        fn = key;
        key = undefined;
    }
    return (0,_h__WEBPACK_IMPORTED_MODULE_0__.h)(sel, {
        key: key,
        hook: { init, prepatch },
        fn: fn,
        args: args,
    });
};


/***/ }),

/***/ "./node_modules/snabbdom/build/tovnode.js":
/*!************************************************!*\
  !*** ./node_modules/snabbdom/build/tovnode.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toVNode": () => (/* binding */ toVNode)
/* harmony export */ });
/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./h */ "./node_modules/snabbdom/build/h.js");
/* harmony import */ var _vnode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vnode */ "./node_modules/snabbdom/build/vnode.js");
/* harmony import */ var _htmldomapi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./htmldomapi */ "./node_modules/snabbdom/build/htmldomapi.js");



function toVNode(node, domApi) {
    const api = domApi !== undefined ? domApi : _htmldomapi__WEBPACK_IMPORTED_MODULE_0__.htmlDomApi;
    let text;
    if (api.isElement(node)) {
        const id = node.id ? "#" + node.id : "";
        const cn = node.getAttribute("class");
        const c = cn ? "." + cn.split(" ").join(".") : "";
        const sel = api.tagName(node).toLowerCase() + id + c;
        const attrs = {};
        const dataset = {};
        const data = {};
        const children = [];
        let name;
        let i, n;
        const elmAttrs = node.attributes;
        const elmChildren = node.childNodes;
        for (i = 0, n = elmAttrs.length; i < n; i++) {
            name = elmAttrs[i].nodeName;
            if (name[0] === "d" &&
                name[1] === "a" &&
                name[2] === "t" &&
                name[3] === "a" &&
                name[4] === "-") {
                dataset[name.slice(5)] = elmAttrs[i].nodeValue || "";
            }
            else if (name !== "id" && name !== "class") {
                attrs[name] = elmAttrs[i].nodeValue;
            }
        }
        for (i = 0, n = elmChildren.length; i < n; i++) {
            children.push(toVNode(elmChildren[i], domApi));
        }
        if (Object.keys(attrs).length > 0)
            data.attrs = attrs;
        if (Object.keys(dataset).length > 0)
            data.dataset = dataset;
        if (sel[0] === "s" &&
            sel[1] === "v" &&
            sel[2] === "g" &&
            (sel.length === 3 || sel[3] === "." || sel[3] === "#")) {
            (0,_h__WEBPACK_IMPORTED_MODULE_1__.addNS)(data, children, sel);
        }
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_2__.vnode)(sel, data, children, undefined, node);
    }
    else if (api.isText(node)) {
        text = api.getTextContent(node);
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_2__.vnode)(undefined, undefined, undefined, text, node);
    }
    else if (api.isComment(node)) {
        text = api.getTextContent(node);
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_2__.vnode)("!", {}, [], text, node);
    }
    else {
        return (0,_vnode__WEBPACK_IMPORTED_MODULE_2__.vnode)("", {}, [], undefined, node);
    }
}


/***/ }),

/***/ "./node_modules/snabbdom/build/vnode.js":
/*!**********************************************!*\
  !*** ./node_modules/snabbdom/build/vnode.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "vnode": () => (/* binding */ vnode)
/* harmony export */ });
function vnode(sel, data, children, text, elm) {
    const key = data === undefined ? undefined : data.key;
    return { sel, data, children, text, elm, key };
}


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/action-handler.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/action-handler.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServerActionHandlerRegistry = void 0;
/**
 * Use this service to register handlers to specific actions. The `DiagramServer` queries this registry
 * when an action is received from the client, and falls back to the built-in behavior if no handlers
 * are found.
 */
class ServerActionHandlerRegistry {
    constructor() {
        this.handlers = new Map();
    }
    /**
     * Returns the action handlers for the given action kind, or `undefined` if there are none.
     */
    getHandler(kind) {
        return this.handlers.get(kind);
    }
    /**
     * Add an action handler to be called when an action of the specified kind is received.
     */
    onAction(kind, handler) {
        if (this.handlers.has(kind)) {
            this.handlers.get(kind).push(handler);
        }
        else {
            this.handlers.set(kind, [handler]);
        }
    }
    /**
     * Remove an action handler that was previously added with `onAction`.
     */
    removeActionHandler(kind, handler) {
        const list = this.handlers.get(kind);
        if (list) {
            const index = list.indexOf(handler);
            if (index >= 0) {
                list.splice(index, 1);
            }
        }
    }
}
exports.ServerActionHandlerRegistry = ServerActionHandlerRegistry;


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/actions.js":
/*!******************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/actions.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReconnectAction = exports.ApplyLabelEditAction = exports.DeleteElementAction = exports.CreateElementAction = exports.HoverFeedbackAction = exports.MoveAction = exports.RedoAction = exports.UndoAction = exports.BringToFrontAction = exports.SetViewportAction = exports.FitToScreenAction = exports.CenterAction = exports.LayoutAction = exports.OpenAction = exports.CollapseExpandAllAction = exports.CollapseExpandAction = exports.SelectAllAction = exports.SelectAction = exports.LoggingAction = exports.ComputedBoundsAction = exports.RequestBoundsAction = exports.SetBoundsAction = exports.SetPopupModelAction = exports.RequestPopupModelAction = exports.UpdateModelAction = exports.SetModelAction = exports.RequestModelAction = exports.RejectAction = exports.isResponseAction = exports.generateRequestId = exports.isRequestAction = exports.isAction = exports.isActionMessage = void 0;
const object_1 = __webpack_require__(/*! ./utils/object */ "./node_modules/sprotty-protocol/lib/utils/object.js");
function isActionMessage(object) {
    return (0, object_1.hasOwnProperty)(object, 'action');
}
exports.isActionMessage = isActionMessage;
function isAction(object) {
    return (0, object_1.hasOwnProperty)(object, 'kind', 'string');
}
exports.isAction = isAction;
function isRequestAction(object) {
    return (0, object_1.hasOwnProperty)(object, 'requestId', 'string');
}
exports.isRequestAction = isRequestAction;
let nextRequestId = 1;
/**
 * Generate a unique `requestId` for a request action.
 */
function generateRequestId() {
    return (nextRequestId++).toString();
}
exports.generateRequestId = generateRequestId;
/**
 * A response action is sent to respond to a request action. The `responseId` must match
 * the `requestId` of the preceding request. In case the `responseId` is empty or undefined,
 * the action is handled as standalone, i.e. it was fired without a preceding request.
 */
function isResponseAction(object) {
    return (0, object_1.hasOwnProperty)(object, 'responseId', 'string') && object.responseId !== '';
}
exports.isResponseAction = isResponseAction;
var RejectAction;
(function (RejectAction) {
    RejectAction.KIND = 'rejectRequest';
    function create(options) {
        return {
            kind: RejectAction.KIND,
            message: options.message,
            detail: options.detail,
            responseId: options.requestId
        };
    }
    RejectAction.create = create;
})(RejectAction = exports.RejectAction || (exports.RejectAction = {}));
var RequestModelAction;
(function (RequestModelAction) {
    RequestModelAction.KIND = 'requestModel';
    function create(options) {
        return {
            kind: RequestModelAction.KIND,
            options,
            requestId: generateRequestId()
        };
    }
    RequestModelAction.create = create;
})(RequestModelAction = exports.RequestModelAction || (exports.RequestModelAction = {}));
var SetModelAction;
(function (SetModelAction) {
    SetModelAction.KIND = 'setModel';
    function create(newRoot, requestId = '') {
        return {
            kind: SetModelAction.KIND,
            newRoot,
            responseId: requestId
        };
    }
    SetModelAction.create = create;
})(SetModelAction = exports.SetModelAction || (exports.SetModelAction = {}));
var UpdateModelAction;
(function (UpdateModelAction) {
    UpdateModelAction.KIND = 'updateModel';
    function create(input, options = {}) {
        if (Array.isArray(input)) {
            return {
                kind: UpdateModelAction.KIND,
                matches: input,
                animate: options.animate,
                cause: options.cause
            };
        }
        else {
            return {
                kind: UpdateModelAction.KIND,
                newRoot: input,
                animate: options.animate,
                cause: options.cause
            };
        }
    }
    UpdateModelAction.create = create;
})(UpdateModelAction = exports.UpdateModelAction || (exports.UpdateModelAction = {}));
var RequestPopupModelAction;
(function (RequestPopupModelAction) {
    RequestPopupModelAction.KIND = 'requestPopupModel';
    function create(options) {
        return {
            kind: RequestPopupModelAction.KIND,
            elementId: options.elementId,
            bounds: options.bounds,
            requestId: generateRequestId()
        };
    }
    RequestPopupModelAction.create = create;
})(RequestPopupModelAction = exports.RequestPopupModelAction || (exports.RequestPopupModelAction = {}));
var SetPopupModelAction;
(function (SetPopupModelAction) {
    SetPopupModelAction.KIND = 'setPopupModel';
    function create(newRoot, requestId = '') {
        return {
            kind: SetPopupModelAction.KIND,
            newRoot,
            responseId: requestId
        };
    }
    SetPopupModelAction.create = create;
})(SetPopupModelAction = exports.SetPopupModelAction || (exports.SetPopupModelAction = {}));
var SetBoundsAction;
(function (SetBoundsAction) {
    SetBoundsAction.KIND = 'setBounds';
    function create(bounds) {
        return {
            kind: SetBoundsAction.KIND,
            bounds
        };
    }
    SetBoundsAction.create = create;
})(SetBoundsAction = exports.SetBoundsAction || (exports.SetBoundsAction = {}));
var RequestBoundsAction;
(function (RequestBoundsAction) {
    RequestBoundsAction.KIND = 'requestBounds';
    function create(newRoot) {
        return {
            kind: RequestBoundsAction.KIND,
            newRoot,
            requestId: generateRequestId()
        };
    }
    RequestBoundsAction.create = create;
})(RequestBoundsAction = exports.RequestBoundsAction || (exports.RequestBoundsAction = {}));
var ComputedBoundsAction;
(function (ComputedBoundsAction) {
    ComputedBoundsAction.KIND = 'computedBounds';
    function create(bounds, options = {}) {
        var _a;
        return {
            kind: ComputedBoundsAction.KIND,
            bounds,
            revision: options.revision,
            alignments: options.alignments,
            responseId: (_a = options.requestId) !== null && _a !== void 0 ? _a : ''
        };
    }
    ComputedBoundsAction.create = create;
})(ComputedBoundsAction = exports.ComputedBoundsAction || (exports.ComputedBoundsAction = {}));
var LoggingAction;
(function (LoggingAction) {
    LoggingAction.KIND = 'logging';
    function create(options) {
        return Object.assign({ kind: LoggingAction.KIND }, options);
    }
    LoggingAction.create = create;
})(LoggingAction = exports.LoggingAction || (exports.LoggingAction = {}));
var SelectAction;
(function (SelectAction) {
    SelectAction.KIND = 'elementSelected';
    function create(options) {
        var _a, _b;
        return {
            kind: SelectAction.KIND,
            selectedElementsIDs: (_a = options.selectedElementsIDs) !== null && _a !== void 0 ? _a : [],
            deselectedElementsIDs: (_b = options.deselectedElementsIDs) !== null && _b !== void 0 ? _b : []
        };
    }
    SelectAction.create = create;
})(SelectAction = exports.SelectAction || (exports.SelectAction = {}));
var SelectAllAction;
(function (SelectAllAction) {
    SelectAllAction.KIND = 'allSelected';
    function create(options = {}) {
        var _a;
        return {
            kind: SelectAllAction.KIND,
            select: (_a = options.select) !== null && _a !== void 0 ? _a : true
        };
    }
    SelectAllAction.create = create;
})(SelectAllAction = exports.SelectAllAction || (exports.SelectAllAction = {}));
var CollapseExpandAction;
(function (CollapseExpandAction) {
    CollapseExpandAction.KIND = 'collapseExpand';
    function create(options) {
        var _a, _b;
        return {
            kind: CollapseExpandAction.KIND,
            expandIds: (_a = options.expandIds) !== null && _a !== void 0 ? _a : [],
            collapseIds: (_b = options.collapseIds) !== null && _b !== void 0 ? _b : []
        };
    }
    CollapseExpandAction.create = create;
})(CollapseExpandAction = exports.CollapseExpandAction || (exports.CollapseExpandAction = {}));
var CollapseExpandAllAction;
(function (CollapseExpandAllAction) {
    CollapseExpandAllAction.KIND = 'collapseExpandAll';
    function create(options = {}) {
        var _a;
        return {
            kind: CollapseExpandAllAction.KIND,
            expand: (_a = options.expand) !== null && _a !== void 0 ? _a : true
        };
    }
    CollapseExpandAllAction.create = create;
})(CollapseExpandAllAction = exports.CollapseExpandAllAction || (exports.CollapseExpandAllAction = {}));
var OpenAction;
(function (OpenAction) {
    OpenAction.KIND = 'open';
    function create(elementId) {
        return {
            kind: OpenAction.KIND,
            elementId
        };
    }
    OpenAction.create = create;
})(OpenAction = exports.OpenAction || (exports.OpenAction = {}));
var LayoutAction;
(function (LayoutAction) {
    LayoutAction.KIND = 'layout';
    function create(options = {}) {
        return {
            kind: LayoutAction.KIND,
            layoutType: options.layoutType,
            elementIds: options.elementIds
        };
    }
    LayoutAction.create = create;
})(LayoutAction = exports.LayoutAction || (exports.LayoutAction = {}));
var CenterAction;
(function (CenterAction) {
    CenterAction.KIND = 'center';
    function create(elementIds, options = {}) {
        var _a, _b;
        return {
            kind: CenterAction.KIND,
            elementIds,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true,
            retainZoom: (_b = options.retainZoom) !== null && _b !== void 0 ? _b : false
        };
    }
    CenterAction.create = create;
})(CenterAction = exports.CenterAction || (exports.CenterAction = {}));
var FitToScreenAction;
(function (FitToScreenAction) {
    FitToScreenAction.KIND = 'fit';
    function create(elementIds, options = {}) {
        var _a;
        return {
            kind: FitToScreenAction.KIND,
            elementIds,
            padding: options.padding,
            maxZoom: options.maxZoom,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true
        };
    }
    FitToScreenAction.create = create;
})(FitToScreenAction = exports.FitToScreenAction || (exports.FitToScreenAction = {}));
var SetViewportAction;
(function (SetViewportAction) {
    SetViewportAction.KIND = 'viewport';
    function create(elementId, newViewport, options = {}) {
        var _a;
        return {
            kind: SetViewportAction.KIND,
            elementId,
            newViewport,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true
        };
    }
    SetViewportAction.create = create;
})(SetViewportAction = exports.SetViewportAction || (exports.SetViewportAction = {}));
var BringToFrontAction;
(function (BringToFrontAction) {
    BringToFrontAction.KIND = 'bringToFront';
    function create(elementIDs) {
        return {
            kind: BringToFrontAction.KIND,
            elementIDs
        };
    }
    BringToFrontAction.create = create;
})(BringToFrontAction = exports.BringToFrontAction || (exports.BringToFrontAction = {}));
var UndoAction;
(function (UndoAction) {
    UndoAction.KIND = 'undo';
    function create() {
        return {
            kind: UndoAction.KIND
        };
    }
    UndoAction.create = create;
})(UndoAction = exports.UndoAction || (exports.UndoAction = {}));
var RedoAction;
(function (RedoAction) {
    RedoAction.KIND = 'redo';
    function create() {
        return {
            kind: RedoAction.KIND
        };
    }
    RedoAction.create = create;
})(RedoAction = exports.RedoAction || (exports.RedoAction = {}));
var MoveAction;
(function (MoveAction) {
    MoveAction.KIND = 'move';
    function create(moves, options = {}) {
        var _a, _b;
        return {
            kind: MoveAction.KIND,
            moves,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true,
            finished: (_b = options.finished) !== null && _b !== void 0 ? _b : false
        };
    }
    MoveAction.create = create;
})(MoveAction = exports.MoveAction || (exports.MoveAction = {}));
var HoverFeedbackAction;
(function (HoverFeedbackAction) {
    HoverFeedbackAction.KIND = 'hoverFeedback';
    function create(options) {
        return {
            kind: HoverFeedbackAction.KIND,
            mouseoverElement: options.mouseoverElement,
            mouseIsOver: options.mouseIsOver
        };
    }
    HoverFeedbackAction.create = create;
})(HoverFeedbackAction = exports.HoverFeedbackAction || (exports.HoverFeedbackAction = {}));
var CreateElementAction;
(function (CreateElementAction) {
    CreateElementAction.KIND = 'createElement';
    function create(elementSchema, options) {
        return {
            kind: CreateElementAction.KIND,
            elementSchema,
            containerId: options.containerId
        };
    }
    CreateElementAction.create = create;
})(CreateElementAction = exports.CreateElementAction || (exports.CreateElementAction = {}));
var DeleteElementAction;
(function (DeleteElementAction) {
    DeleteElementAction.KIND = 'delete';
    function create(elementIds) {
        return {
            kind: DeleteElementAction.KIND,
            elementIds
        };
    }
    DeleteElementAction.create = create;
})(DeleteElementAction = exports.DeleteElementAction || (exports.DeleteElementAction = {}));
var ApplyLabelEditAction;
(function (ApplyLabelEditAction) {
    ApplyLabelEditAction.KIND = 'applyLabelEdit';
    function create(labelId, text) {
        return {
            kind: ApplyLabelEditAction.KIND,
            labelId,
            text
        };
    }
    ApplyLabelEditAction.create = create;
})(ApplyLabelEditAction = exports.ApplyLabelEditAction || (exports.ApplyLabelEditAction = {}));
var ReconnectAction;
(function (ReconnectAction) {
    ReconnectAction.KIND = 'reconnect';
    function create(options) {
        return {
            kind: ReconnectAction.KIND,
            routableId: options.routableId,
            newSourceId: options.newSourceId,
            newTargetId: options.newTargetId
        };
    }
    ReconnectAction.create = create;
})(ReconnectAction = exports.ReconnectAction || (exports.ReconnectAction = {}));


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/diagram-server.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/diagram-server.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagramServer = void 0;
const action_handler_1 = __webpack_require__(/*! ./action-handler */ "./node_modules/sprotty-protocol/lib/action-handler.js");
const actions_1 = __webpack_require__(/*! ./actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const async_1 = __webpack_require__(/*! ./utils/async */ "./node_modules/sprotty-protocol/lib/utils/async.js");
const model_utils_1 = __webpack_require__(/*! ./utils/model-utils */ "./node_modules/sprotty-protocol/lib/utils/model-utils.js");
/**
 * An instance of this class is responsible for handling a single diagram client. It holds the current
 * state of the diagram and manages communication with the client via actions.
 */
class DiagramServer {
    constructor(dispatch, services) {
        this.state = {
            currentRoot: {
                type: 'NONE',
                id: 'ROOT'
            },
            revision: 0
        };
        this.requests = new Map();
        this.dispatch = dispatch;
        this.diagramGenerator = services.DiagramGenerator;
        this.layoutEngine = services.ModelLayoutEngine;
        this.actionHandlerRegistry = services.ServerActionHandlerRegistry;
    }
    /**
     * @deprecated Use the `ServerActionHandlerRegistry` service instead
     */
    onAction(kind, handler) {
        if (!this.actionHandlerRegistry) {
            this.actionHandlerRegistry = new action_handler_1.ServerActionHandlerRegistry();
        }
        this.actionHandlerRegistry.onAction(kind, handler);
    }
    /**
     * @deprecated Use the `ServerActionHandlerRegistry` service instead
     */
    removeActionHandler(kind, handler) {
        if (this.actionHandlerRegistry) {
            this.actionHandlerRegistry.removeActionHandler(kind, handler);
        }
    }
    /**
     * Set the model and submit it to the client.
     */
    setModel(newRoot) {
        newRoot.revision = ++this.state.revision;
        this.state.currentRoot = newRoot;
        return this.submitModel(newRoot, false);
    }
    /**
     * Update the model to a new state and submit it to the client.
     */
    updateModel(newRoot) {
        newRoot.revision = ++this.state.revision;
        this.state.currentRoot = newRoot;
        return this.submitModel(newRoot, true);
    }
    /**
     * Whether the client needs to compute the layout of parts of the model. This affects the behavior
     * of `submitModel`.
     *
     * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`
     * from the client. If the client does not specify whether it needs client layout, the default value
     * is `true`.
     */
    get needsClientLayout() {
        if (this.state.options && this.state.options.needsClientLayout !== undefined) {
            return !!this.state.options.needsClientLayout;
        }
        return true;
    }
    /**
     * Whether the server needs to compute the layout of parts of the model. This affects the behavior
     * of `submitModel`.
     *
     * This setting is determined by the `DiagramOptions` that are received with the `RequestModelAction`
     * from the client. If the client does not specify whether it needs server layout, the default value
     * is `false`.
     */
    get needsServerLayout() {
        if (this.state.options && this.state.options.needsServerLayout !== undefined) {
            return !!this.state.options.needsServerLayout;
        }
        return false;
    }
    /**
     * Called when an action is received from the client.
     */
    accept(action) {
        if ((0, actions_1.isResponseAction)(action)) {
            const id = action.responseId;
            const future = this.requests.get(id);
            if (future) {
                this.requests.delete(id);
                if (action.kind === actions_1.RejectAction.KIND) {
                    const rejectAction = action;
                    future.reject(new Error(rejectAction.message));
                    console.warn(`Request with id ${action.responseId} failed: ${rejectAction.message}`, rejectAction.detail);
                }
                else {
                    future.resolve(action);
                }
                return Promise.resolve();
            }
            console.info('No matching request for response:', action);
        }
        return this.handleAction(action);
    }
    /**
     * Send a request action to the client. The resulting promise is resolved when a matching
     * response is received and rejected when a `RejectAction` is received.
     */
    request(action) {
        if (!action.requestId) {
            action.requestId = 'server_' + (0, actions_1.generateRequestId)();
        }
        const future = new async_1.Deferred();
        this.requests.set(action.requestId, future);
        this.dispatch(action).catch(err => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.requests.delete(action.requestId);
            future.reject(err);
        });
        return future.promise;
    }
    /**
     * Send a `RejectAction` to the client to notify that a request could not be fulfilled.
     */
    rejectRemoteRequest(action, error) {
        if (action && (0, actions_1.isRequestAction)(action)) {
            this.dispatch({
                kind: actions_1.RejectAction.KIND,
                responseId: action.requestId,
                message: error.message,
                detail: error.stack
            });
        }
    }
    handleAction(action) {
        var _a;
        // Find a matching action handler in the registry
        const handlers = (_a = this.actionHandlerRegistry) === null || _a === void 0 ? void 0 : _a.getHandler(action.kind);
        if (handlers && handlers.length === 1) {
            return handlers[0](action, this.state, this);
        }
        else if (handlers && handlers.length > 1) {
            return Promise.all(handlers.map(h => h(action, this.state, this)));
        }
        // If no handler is registered, call one of the default handling methods
        switch (action.kind) {
            case actions_1.RequestModelAction.KIND:
                return this.handleRequestModel(action);
            case actions_1.ComputedBoundsAction.KIND:
                return this.handleComputedBounds(action);
            case actions_1.LayoutAction.KIND:
                return this.handleLayout(action);
        }
        // We don't know this action kind, sigh
        console.warn(`Unhandled action from client: ${action.kind}`);
        return Promise.resolve();
    }
    async handleRequestModel(action) {
        var _a;
        this.state.options = action.options;
        try {
            const newRoot = await this.diagramGenerator.generate({
                options: (_a = this.state.options) !== null && _a !== void 0 ? _a : {},
                state: this.state
            });
            newRoot.revision = ++this.state.revision;
            this.state.currentRoot = newRoot;
            await this.submitModel(this.state.currentRoot, false, action);
        }
        catch (err) {
            this.rejectRemoteRequest(action, err);
            console.error('Failed to generate diagram:', err);
        }
    }
    /**
     * Submit a model to the client after it has been updated in the server state.
     */
    async submitModel(newRoot, update, cause) {
        if (this.needsClientLayout) {
            if (!this.needsServerLayout) {
                // In this case the client won't send us the computed bounds
                this.dispatch({ kind: actions_1.RequestBoundsAction.KIND, newRoot });
            }
            else {
                const request = actions_1.RequestBoundsAction.create(newRoot);
                const response = await this.request(request);
                const currentRoot = this.state.currentRoot;
                if (response.revision === currentRoot.revision) {
                    (0, model_utils_1.applyBounds)(currentRoot, response);
                    await this.doSubmitModel(currentRoot, update, cause);
                }
                else {
                    this.rejectRemoteRequest(cause, new Error(`Model revision does not match: ${response.revision}`));
                }
            }
        }
        else {
            await this.doSubmitModel(newRoot, update, cause);
        }
    }
    async doSubmitModel(newRoot, update, cause) {
        if (newRoot.revision !== this.state.revision) {
            return;
        }
        if (this.needsServerLayout && this.layoutEngine) {
            newRoot = await this.layoutEngine.layout(newRoot);
        }
        const modelType = newRoot.type;
        if (cause && cause.kind === actions_1.RequestModelAction.KIND) {
            const requestId = cause.requestId;
            const response = actions_1.SetModelAction.create(newRoot, requestId);
            await this.dispatch(response);
        }
        else if (update && modelType === this.state.lastSubmittedModelType) {
            await this.dispatch({ kind: actions_1.UpdateModelAction.KIND, newRoot, cause });
        }
        else {
            await this.dispatch({ kind: actions_1.SetModelAction.KIND, newRoot });
        }
        this.state.lastSubmittedModelType = modelType;
    }
    handleComputedBounds(action) {
        if (action.revision !== this.state.currentRoot.revision) {
            return Promise.reject();
        }
        (0, model_utils_1.applyBounds)(this.state.currentRoot, action);
        return Promise.resolve();
    }
    async handleLayout(action) {
        if (!this.layoutEngine) {
            return;
        }
        if (!this.needsServerLayout) {
            let newRoot = (0, model_utils_1.cloneModel)(this.state.currentRoot);
            newRoot = await this.layoutEngine.layout(newRoot);
            newRoot.revision = ++this.state.revision;
            this.state.currentRoot = newRoot;
        }
        await this.doSubmitModel(this.state.currentRoot, true, action);
    }
}
exports.DiagramServer = DiagramServer;


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/diagram-services.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/diagram-services.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./actions */ "./node_modules/sprotty-protocol/lib/actions.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram-server */ "./node_modules/sprotty-protocol/lib/diagram-server.js"), exports);
__exportStar(__webpack_require__(/*! ./diagram-services */ "./node_modules/sprotty-protocol/lib/diagram-services.js"), exports);
__exportStar(__webpack_require__(/*! ./model */ "./node_modules/sprotty-protocol/lib/model.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/async */ "./node_modules/sprotty-protocol/lib/utils/async.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/json */ "./node_modules/sprotty-protocol/lib/utils/json.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/model-utils */ "./node_modules/sprotty-protocol/lib/utils/model-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/object */ "./node_modules/sprotty-protocol/lib/utils/object.js"), exports);


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/model.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/model.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isZoomable = exports.isScrollable = void 0;
const object_1 = __webpack_require__(/*! ./utils/object */ "./node_modules/sprotty-protocol/lib/utils/object.js");
function isScrollable(element) {
    return (0, object_1.hasOwnProperty)(element, 'scroll');
}
exports.isScrollable = isScrollable;
function isZoomable(element) {
    return (0, object_1.hasOwnProperty)(element, 'zoom');
}
exports.isZoomable = isZoomable;


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/utils/async.js":
/*!**********************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/utils/async.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Deferred = void 0;
/**
 * Simple implementation of the deferred pattern.
 * An object that exposes a promise and functions to resolve and reject it.
 */
class Deferred {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}
exports.Deferred = Deferred;


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/utils/geometry.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/utils/geometry.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.almostEquals = exports.toRadians = exports.toDegrees = exports.Bounds = exports.isBounds = exports.Dimension = exports.centerOfLine = exports.angleBetweenPoints = exports.angleOfPoint = exports.Point = void 0;
const object_1 = __webpack_require__(/*! ./object */ "./node_modules/sprotty-protocol/lib/utils/object.js");
var Point;
(function (Point) {
    /**
     * (x,y) coordinates of the origin.
     */
    Point.ORIGIN = Object.freeze({
        x: 0,
        y: 0
    });
    /**
     * Adds two points.
     * @param {Point} p1 - First point
     * @param {Point} p2 - Second point
     * @returns {Point} The sum of the two points
     */
    function add(p1, p2) {
        return {
            x: p1.x + p2.x,
            y: p1.y + p2.y
        };
    }
    Point.add = add;
    /**
     * Subtracts two points.
     * @param {Point} p1 - First point
     * @param {Point} p2 - Second point
     * @returns {Point} The difference of the two points
     */
    function subtract(p1, p2) {
        return {
            x: p1.x - p2.x,
            y: p1.y - p2.y
        };
    }
    Point.subtract = subtract;
    /**
     * Specifies whether a point has exactly the same coordinates as another point.
     * @param {Point} point1 a point
     * @param {Point} point2 another point
     * @returns {boolean} `true` if `point1` has exactly the same `x` and `y` values as `point2`, `false` otherwise.
     */
    function equals(point1, point2) {
        return point1.x === point2.x && point1.y === point2.y;
    }
    Point.equals = equals;
    /**
     * Computes a point that is the original `point` shifted towards `refPoint` by the given `distance`.
     * @param {Point} point - Point to shift
     * @param {Point} refPoint - Point to shift towards
     * @param {Point} distance - Distance to shift
     */
    function shiftTowards(point, refPoint, distance) {
        const diff = subtract(refPoint, point);
        const normalized = normalize(diff);
        const shift = { x: normalized.x * distance, y: normalized.y * distance };
        return add(point, shift);
    }
    Point.shiftTowards = shiftTowards;
    /**
     * Computes the normalized vector from the vector given in `point`; that is, computing its unit vector.
     * @param {Point} point - Point representing the vector to be normalized
     * @returns {Point} The normalized point
     */
    function normalize(point) {
        const mag = magnitude(point);
        if (mag === 0 || mag === 1) {
            return Point.ORIGIN;
        }
        return {
            x: point.x / mag,
            y: point.y / mag
        };
    }
    Point.normalize = normalize;
    /**
     * Computes the magnitude of the vector given in `point`.
     * @param {Point} point - Point representing the vector to compute the magnitude for
     * @returns {number} The magnitude or also known as length of the `point`
     */
    function magnitude(point) {
        return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
    }
    Point.magnitude = magnitude;
    /**
     * Calculates a linear combination of p0 and p1 using lambda, i.e.
     *   (1-lambda) * p0 + lambda * p1
     */
    function linear(p0, p1, lambda) {
        return {
            x: (1 - lambda) * p0.x + lambda * p1.x,
            y: (1 - lambda) * p0.y + lambda * p1.y
        };
    }
    Point.linear = linear;
    /**
     * Returns the "straight line" distance between two points.
     * @param {Point} a - First point
     * @param {Point} b - Second point
     * @returns {number} The Eucledian distance
     */
    function euclideanDistance(a, b) {
        const dx = b.x - a.x;
        const dy = b.y - a.y;
        return Math.sqrt(dx * dx + dy * dy);
    }
    Point.euclideanDistance = euclideanDistance;
    /**
     * Returns the distance between two points in a grid, using a
     * strictly vertical and/or horizontal path (versus straight line).
     * @param {Point} a - First point
     * @param {Point} b - Second point
     * @returns {number} The Manhattan distance
     */
    function manhattanDistance(a, b) {
        return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);
    }
    Point.manhattanDistance = manhattanDistance;
    /**
     * Returns the maximum of the horizontal and the vertical distance.
     * @param {Point} a - First point
     * @param {Point} b - Second point
     * @returns {number} The maximum distance
     */
    function maxDistance(a, b) {
        return Math.max(Math.abs(b.x - a.x), Math.abs(b.y - a.y));
    }
    Point.maxDistance = maxDistance;
})(Point = exports.Point || (exports.Point = {}));
/**
 * Computes the angle in radians of the given point to the x-axis of the coordinate system.
 * The result is in the range [-pi, pi].
 * @param {Point} p - A point in the Eucledian plane
 */
function angleOfPoint(p) {
    return Math.atan2(p.y, p.x);
}
exports.angleOfPoint = angleOfPoint;
/**
 * Computes the angle in radians between the two given points (relative to the origin of the coordinate system).
 * The result is in the range [0, pi]. Returns NaN if the points are equal.
 * @param {Point} a - First point
 * @param {Point} b - Second point
 */
function angleBetweenPoints(a, b) {
    const lengthProduct = Math.sqrt((a.x * a.x + a.y * a.y) * (b.x * b.x + b.y * b.y));
    if (isNaN(lengthProduct) || lengthProduct === 0)
        return NaN;
    const dotProduct = a.x * b.x + a.y * b.y;
    return Math.acos(dotProduct / lengthProduct);
}
exports.angleBetweenPoints = angleBetweenPoints;
/**
 * Computes the center of the line segment spanned by the two given points.
 * @param {Point} s - Start point of the line
 * @param {Point} e - End point of the line
 */
function centerOfLine(s, e) {
    const b = {
        x: s.x > e.x ? e.x : s.x,
        y: s.y > e.y ? e.y : s.y,
        width: Math.abs(e.x - s.x),
        height: Math.abs(e.y - s.y)
    };
    return Bounds.center(b);
}
exports.centerOfLine = centerOfLine;
var Dimension;
(function (Dimension) {
    /**
     * A dimension with both width and height set to a negative value, which is considered as undefined.
     */
    Dimension.EMPTY = Object.freeze({
        width: -1,
        height: -1
    });
    /**
     * Checks whether the given dimention is valid, i.e. the width and height are non-zero.
     * @param {Dimension} b - Dimension object
     * @returns {boolean} `true` if the dimension is valid
     */
    function isValid(d) {
        return d.width >= 0 && d.height >= 0;
    }
    Dimension.isValid = isValid;
})(Dimension = exports.Dimension || (exports.Dimension = {}));
function isBounds(element) {
    return (0, object_1.hasOwnProperty)(element, ['x', 'y', 'width', 'height']);
}
exports.isBounds = isBounds;
var Bounds;
(function (Bounds) {
    Bounds.EMPTY = Object.freeze({
        x: 0,
        y: 0,
        width: -1,
        height: -1
    });
    /**
     * Combines the bounds of two objects into one, so that the new bounds
     * are the minimum bounds that covers both of the original bounds.
     * @param {Bounds} b0 - First bounds object
     * @param {Bounds} b1 - Second bounds object
     * @returns {Bounds} The combined bounds
     */
    function combine(b0, b1) {
        if (!Dimension.isValid(b0))
            return Dimension.isValid(b1) ? b1 : Bounds.EMPTY;
        if (!Dimension.isValid(b1))
            return b0;
        const minX = Math.min(b0.x, b1.x);
        const minY = Math.min(b0.y, b1.y);
        const maxX = Math.max(b0.x + (b0.width >= 0 ? b0.width : 0), b1.x + (b1.width >= 0 ? b1.width : 0));
        const maxY = Math.max(b0.y + (b0.height >= 0 ? b0.height : 0), b1.y + (b1.height >= 0 ? b1.height : 0));
        return {
            x: minX, y: minY, width: maxX - minX, height: maxY - minY
        };
    }
    Bounds.combine = combine;
    /**
     * Translates the given bounds.
     * @param {Bounds} b - Bounds object
     * @param {Point} p - Vector by which to translate the bounds
     * @returns {Bounds} The translated bounds
     */
    function translate(b, p) {
        return {
            x: b.x + p.x,
            y: b.y + p.y,
            width: b.width,
            height: b.height
        };
    }
    Bounds.translate = translate;
    /**
     * Returns the center point of the bounds of an object
     * @param {Bounds} b - Bounds object
     * @returns {Point} the center point
     */
    function center(b) {
        return {
            x: b.x + (b.width >= 0 ? 0.5 * b.width : 0),
            y: b.y + (b.height >= 0 ? 0.5 * b.height : 0)
        };
    }
    Bounds.center = center;
    /**
    * Checks whether the point p is included in the bounds b.
    */
    function includes(b, p) {
        return p.x >= b.x && p.x <= b.x + b.width && p.y >= b.y && p.y <= b.y + b.height;
    }
    Bounds.includes = includes;
})(Bounds = exports.Bounds || (exports.Bounds = {}));
/**
 * Converts from radians to degrees
 * @param {number} a - A value in radians
 * @returns {number} The converted value
 */
function toDegrees(a) {
    return a * 180 / Math.PI;
}
exports.toDegrees = toDegrees;
/**
 * Converts from degrees to radians
 * @param {number} a - A value in degrees
 * @returns {number} The converted value
 */
function toRadians(a) {
    return a * Math.PI / 180;
}
exports.toRadians = toRadians;
/**
 * Returns whether two numbers are almost equal, within a small margin (0.001)
 * @param {number} a - First number
 * @param {number} b - Second number
 * @returns {boolean} True if the two numbers are almost equal
 */
function almostEquals(a, b) {
    return Math.abs(a - b) < 1e-3;
}
exports.almostEquals = almostEquals;


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/utils/json.js":
/*!*********************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/utils/json.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2020-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/utils/model-utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/utils/model-utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SModelIndex = exports.findElement = exports.getSubType = exports.getBasicType = exports.applyBounds = exports.cloneModel = void 0;
/**
 * Clone a given model. This function requires that the model is serializable, so it's
 * free of cycles and functions.
 */
function cloneModel(model) {
    return JSON.parse(JSON.stringify(model));
}
exports.cloneModel = cloneModel;
/**
 * Apply the computed bounds to the given model. This ensures that the model has complete
 * information about positions and sizes derived from its actual rendering in the frontend.
 */
function applyBounds(root, action) {
    const index = new SModelIndex();
    index.add(root);
    for (const b of action.bounds) {
        const element = index.getById(b.elementId);
        if (element) {
            const bae = element;
            if (b.newPosition) {
                bae.position = { x: b.newPosition.x, y: b.newPosition.y };
            }
            if (b.newSize) {
                bae.size = { width: b.newSize.width, height: b.newSize.height };
            }
        }
    }
    if (action.alignments) {
        for (const a of action.alignments) {
            const element = index.getById(a.elementId);
            if (element) {
                const alignable = element;
                alignable.alignment = { x: a.newAlignment.x, y: a.newAlignment.y };
            }
        }
    }
}
exports.applyBounds = applyBounds;
/**
 * Model element types can include a colon to separate the basic type and a sub-type. This function
 * extracts the basic type of a model element.
 */
function getBasicType(element) {
    if (!element.type) {
        return '';
    }
    const colonIndex = element.type.indexOf(':');
    return colonIndex >= 0 ? element.type.substring(0, colonIndex) : element.type;
}
exports.getBasicType = getBasicType;
/**
 * Model element types can include a colon to separate the basic type and a sub-type. This function
 * extracts the sub-type of a model element.
 */
function getSubType(schema) {
    if (!schema.type) {
        return '';
    }
    const colonIndex = schema.type.indexOf(':');
    return colonIndex >= 0 ? schema.type.substring(colonIndex + 1) : schema.type;
}
exports.getSubType = getSubType;
/**
 * Find the element with the given identifier. If you need to find multiple elements, using an
 * `SModelIndex` might be more effective.
 */
function findElement(parent, elementId) {
    if (parent.id === elementId)
        return parent;
    if (parent.children !== undefined) {
        for (const child of parent.children) {
            const result = findElement(child, elementId);
            if (result !== undefined)
                return result;
        }
    }
    return undefined;
}
exports.findElement = findElement;
/**
 * Used to speed up model element lookup by id.
 * This index implementation is for the serializable _external model_ defined in `sprotty-protocol`.
 */
class SModelIndex {
    constructor() {
        this.id2element = new Map();
        this.id2parent = new Map();
    }
    add(element) {
        if (!element.id) {
            throw new Error("Model element has no ID.");
        }
        else if (this.contains(element)) {
            throw new Error("Duplicate ID in model: " + element.id);
        }
        this.id2element.set(element.id, element);
        if (Array.isArray(element.children)) {
            for (const child of element.children) {
                this.add(child);
                this.id2parent.set(child.id, element);
            }
        }
    }
    remove(element) {
        this.id2element.delete(element.id);
        if (Array.isArray(element.children)) {
            for (const child of element.children) {
                this.id2parent.delete(child.id);
                this.remove(child);
            }
        }
    }
    contains(element) {
        return this.id2element.has(element.id);
    }
    getById(id) {
        return this.id2element.get(id);
    }
    getParent(id) {
        return this.id2parent.get(id);
    }
    getRoot(element) {
        let current = element;
        while (current) {
            const parent = this.id2parent.get(current.id);
            if (parent === undefined) {
                return current;
            }
            current = parent;
        }
        throw new Error("Element has no root");
    }
}
exports.SModelIndex = SModelIndex;


/***/ }),

/***/ "./node_modules/sprotty-protocol/lib/utils/object.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty-protocol/lib/utils/object.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.safeAssign = exports.hasOwnProperty = exports.isObject = void 0;
function isObject(data) {
    return typeof data === 'object' && data !== null;
}
exports.isObject = isObject;
function hasOwnProperty(arg, key, type) {
    if (!isObject(arg)) {
        return false;
    }
    if (Array.isArray(key)) {
        for (const k of key) {
            if (!Object.prototype.hasOwnProperty.call(arg, k)) {
                return false;
            }
            if (typeof type === 'string' && typeof arg[k] !== type) {
                return false;
            }
            else if (typeof type === 'function' && !type(arg[k])) {
                return false;
            }
        }
    }
    else {
        if (!Object.prototype.hasOwnProperty.call(arg, key)) {
            return false;
        }
        if (typeof type === 'string') {
            return typeof arg[key] === type;
        }
        if (typeof type === 'function') {
            return type(arg[key]);
        }
    }
    return true;
}
exports.hasOwnProperty = hasOwnProperty;
function safeAssign(target, partial) {
    return Object.assign(target, partial);
}
exports.safeAssign = safeAssign;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/actions/action-dispatcher.js":
/*!********************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/actions/action-dispatcher.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ActionDispatcher = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const async_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/async */ "./node_modules/sprotty-protocol/lib/utils/async.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const smodel_factory_1 = __webpack_require__(/*! ../model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js");
const animation_frame_syncer_1 = __webpack_require__(/*! ../animations/animation-frame-syncer */ "./node_modules/sprotty/lib/base/animations/animation-frame-syncer.js");
/**
 * Collects actions, converts them to commands and dispatches them.
 * Also acts as the proxy to model sources such as diagram servers.
 */
let ActionDispatcher = class ActionDispatcher {
    constructor() {
        this.postponedActions = [];
        this.requests = new Map();
    }
    initialize() {
        if (!this.initialized) {
            this.initialized = this.actionHandlerRegistryProvider().then(registry => {
                this.actionHandlerRegistry = registry;
                this.handleAction(actions_1.SetModelAction.create(smodel_factory_1.EMPTY_ROOT)).catch(() => { });
            });
        }
        return this.initialized;
    }
    /**
     * Dispatch an action by querying all handlers that are registered for its kind.
     * The returned promise is resolved when all handler results (commands or actions)
     * have been processed.
     */
    dispatch(action) {
        return this.initialize().then(() => {
            if (this.blockUntil !== undefined) {
                return this.handleBlocked(action, this.blockUntil);
            }
            else if (this.diagramLocker.isAllowed(action)) {
                return this.handleAction(action);
            }
            return undefined;
        });
    }
    /**
     * Calls `dispatch` on every action in the given array. The returned promise
     * is resolved when the promises of all `dispatch` calls have been resolved.
     */
    dispatchAll(actions) {
        return Promise.all(actions.map(action => this.dispatch(action)));
    }
    /**
     * Dispatch a request. The returned promise is resolved when a response with matching
     * identifier is dispatched. That response is _not_ passed to the registered action
     * handlers. Instead, it is the responsibility of the caller of this method to handle
     * the response properly. For example, it can be sent to the registered handlers by
     * passing it again to the `dispatch` method.
     */
    request(action) {
        if (!action.requestId) {
            return Promise.reject(new Error('Request without requestId'));
        }
        const deferred = new async_1.Deferred();
        this.requests.set(action.requestId, deferred);
        this.dispatch(action).catch(() => { });
        return deferred.promise;
    }
    handleAction(action) {
        if (action.kind === actions_1.UndoAction.KIND) {
            return this.commandStack.undo().then(() => { });
        }
        if (action.kind === actions_1.RedoAction.KIND) {
            return this.commandStack.redo().then(() => { });
        }
        if ((0, actions_1.isResponseAction)(action)) {
            const deferred = this.requests.get(action.responseId);
            if (deferred !== undefined) {
                this.requests.delete(action.responseId);
                if (action.kind === actions_1.RejectAction.KIND) {
                    const rejectAction = action;
                    deferred.reject(new Error(rejectAction.message));
                    this.logger.warn(this, `Request with id ${action.responseId} failed.`, rejectAction.message, rejectAction.detail);
                }
                else {
                    deferred.resolve(action);
                }
                return Promise.resolve();
            }
            this.logger.log(this, 'No matching request for response', action);
        }
        const handlers = this.actionHandlerRegistry.get(action.kind);
        if (handlers.length === 0) {
            this.logger.warn(this, 'Missing handler for action', action);
            const error = new Error(`Missing handler for action '${action.kind}'`);
            if ((0, actions_1.isRequestAction)(action)) {
                const deferred = this.requests.get(action.requestId);
                if (deferred !== undefined) {
                    this.requests.delete(action.requestId);
                    deferred.reject(error);
                }
            }
            return Promise.reject(error);
        }
        this.logger.log(this, 'Handle', action);
        const promises = [];
        for (const handler of handlers) {
            const result = handler.handle(action);
            if ((0, actions_1.isAction)(result)) {
                promises.push(this.dispatch(result));
            }
            else if (result !== undefined) {
                promises.push(this.commandStack.execute(result));
                this.blockUntil = result.blockUntil;
            }
        }
        return Promise.all(promises);
    }
    handleBlocked(action, predicate) {
        if (predicate(action)) {
            this.blockUntil = undefined;
            const result = this.handleAction(action);
            const actions = this.postponedActions;
            this.postponedActions = [];
            for (const a of actions) {
                this.dispatch(a.action).then(a.resolve, a.reject);
            }
            return result;
        }
        else {
            this.logger.log(this, 'Action is postponed due to block condition', action);
            return new Promise((resolve, reject) => {
                this.postponedActions.push({ action, resolve, reject });
            });
        }
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ActionHandlerRegistryProvider),
    __metadata("design:type", Function)
], ActionDispatcher.prototype, "actionHandlerRegistryProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ICommandStack),
    __metadata("design:type", Object)
], ActionDispatcher.prototype, "commandStack", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], ActionDispatcher.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.AnimationFrameSyncer),
    __metadata("design:type", animation_frame_syncer_1.AnimationFrameSyncer)
], ActionDispatcher.prototype, "syncer", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IDiagramLocker),
    __metadata("design:type", Object)
], ActionDispatcher.prototype, "diagramLocker", void 0);
ActionDispatcher = __decorate([
    (0, inversify_1.injectable)()
], ActionDispatcher);
exports.ActionDispatcher = ActionDispatcher;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/actions/action-handler.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/actions/action-handler.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.onAction = exports.configureActionHandler = exports.ActionHandlerRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "./node_modules/sprotty/lib/utils/registry.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "./node_modules/sprotty/lib/utils/inversify.js");
/**
 * The action handler registry maps actions to their handlers using the Action.kind property.
 */
let ActionHandlerRegistry = class ActionHandlerRegistry extends registry_1.MultiInstanceRegistry {
    constructor(registrations, initializers) {
        super();
        registrations.forEach(registration => this.register(registration.actionKind, registration.factory()));
        initializers.forEach(initializer => this.initializeActionHandler(initializer));
    }
    initializeActionHandler(initializer) {
        initializer.initialize(this);
    }
};
ActionHandlerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.ActionHandlerRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __param(1, (0, inversify_1.multiInject)(types_1.TYPES.IActionHandlerInitializer)),
    __param(1, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array, Array])
], ActionHandlerRegistry);
exports.ActionHandlerRegistry = ActionHandlerRegistry;
/**
 * Utility function to register an action handler for an action kind.
 */
function configureActionHandler(context, kind, constr) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Action handlers should be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.ActionHandlerRegistration).toDynamicValue(ctx => ({
        actionKind: kind,
        factory: () => ctx.container.get(constr)
    }));
}
exports.configureActionHandler = configureActionHandler;
/**
 * Utility function to register an action handler for an action kind.
 */
function onAction(context, kind, handle) {
    context.bind(types_1.TYPES.ActionHandlerRegistration).toConstantValue({
        actionKind: kind,
        factory: () => ({ handle })
    });
}
exports.onAction = onAction;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/actions/action.js":
/*!*********************************************************!*\
  !*** ./node_modules/sprotty/lib/base/actions/action.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isLabeledAction = exports.LabeledAction = exports.RejectAction = exports.isResponseAction = exports.generateRequestId = exports.isRequestAction = exports.isAction = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "./node_modules/sprotty-protocol/lib/utils/object.js");
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function isAction(object) {
    return (0, object_1.hasOwnProperty)(object, 'kind', 'string');
}
exports.isAction = isAction;
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function isRequestAction(object) {
    return isAction(object) && (0, object_1.hasOwnProperty)(object, 'requestId', 'string');
}
exports.isRequestAction = isRequestAction;
/**
 * Generate a unique `requestId` for a request action.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
exports.generateRequestId = actions_1.generateRequestId;
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function isResponseAction(object) {
    return isAction(object) && (0, object_1.hasOwnProperty)(object, 'responseId', 'string')
        && object.responseId !== '';
}
exports.isResponseAction = isResponseAction;
/**
 * A reject action is fired to indicate that a request must be rejected.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class RejectAction {
    constructor(message, responseId, detail) {
        this.message = message;
        this.responseId = responseId;
        this.detail = detail;
        this.kind = RejectAction.KIND;
    }
}
exports.RejectAction = RejectAction;
RejectAction.KIND = 'rejectRequest';
/**
 * A list of actions with a label.
 * Labeled actions are used to denote a group of actions in a user-interface context, e.g.,
 * to define an entry in the command palette or in the context menu.
 */
class LabeledAction {
    constructor(label, actions, icon) {
        this.label = label;
        this.actions = actions;
        this.icon = icon;
    }
}
exports.LabeledAction = LabeledAction;
function isLabeledAction(element) {
    return element !== undefined
        && element.label !== undefined
        && element.actions !== undefined;
}
exports.isLabeledAction = isLabeledAction;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/actions/diagram-locker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/actions/diagram-locker.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultDiagramLocker = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let DefaultDiagramLocker = class DefaultDiagramLocker {
    isAllowed(action) {
        return true;
    }
};
DefaultDiagramLocker = __decorate([
    (0, inversify_1.injectable)()
], DefaultDiagramLocker);
exports.DefaultDiagramLocker = DefaultDiagramLocker;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/animations/animation-frame-syncer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/animations/animation-frame-syncer.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnimationFrameSyncer = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let AnimationFrameSyncer = class AnimationFrameSyncer {
    constructor() {
        this.tasks = [];
        this.endTasks = [];
        this.triggered = false;
    }
    isAvailable() {
        return typeof requestAnimationFrame === "function";
    }
    onNextFrame(task) {
        this.tasks.push(task);
        this.trigger();
    }
    onEndOfNextFrame(task) {
        this.endTasks.push(task);
        this.trigger();
    }
    trigger() {
        if (!this.triggered) {
            this.triggered = true;
            if (this.isAvailable())
                requestAnimationFrame((time) => this.run(time));
            else
                setTimeout((time) => this.run(time));
        }
    }
    run(time) {
        const tasks = this.tasks;
        const endTasks = this.endTasks;
        this.triggered = false;
        this.tasks = [];
        this.endTasks = [];
        tasks.forEach(task => task.call(undefined, time));
        endTasks.forEach(task => task.call(undefined, time));
    }
};
AnimationFrameSyncer = __decorate([
    (0, inversify_1.injectable)()
], AnimationFrameSyncer);
exports.AnimationFrameSyncer = AnimationFrameSyncer;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/animations/animation.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/animations/animation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CompoundAnimation = exports.Animation = void 0;
const easing_1 = __webpack_require__(/*! ./easing */ "./node_modules/sprotty/lib/base/animations/easing.js");
/**
 * An animation uses the rendering loop of the browser to smoothly
 * calculate a transition between two states of a model element.
 */
class Animation {
    constructor(context, ease = easing_1.easeInOut) {
        this.context = context;
        this.ease = ease;
    }
    start() {
        return new Promise((resolve, reject) => {
            let start = undefined;
            let frames = 0;
            const lambda = (time) => {
                frames++;
                let dtime;
                if (start === undefined) {
                    start = time;
                    dtime = 0;
                }
                else {
                    dtime = time - start;
                }
                const t = Math.min(1, dtime / this.context.duration);
                const current = this.tween(this.ease(t), this.context);
                this.context.modelChanged.update(current);
                if (t === 1) {
                    this.context.logger.log(this, (frames * 1000 / this.context.duration) + ' fps');
                    resolve(current);
                }
                else {
                    this.context.syncer.onNextFrame(lambda);
                }
            };
            if (this.context.syncer.isAvailable()) {
                this.context.syncer.onNextFrame(lambda);
            }
            else {
                const finalModel = this.tween(1, this.context);
                resolve(finalModel);
            }
        });
    }
}
exports.Animation = Animation;
class CompoundAnimation extends Animation {
    constructor(model, context, components = [], ease = easing_1.easeInOut) {
        super(context, ease);
        this.model = model;
        this.context = context;
        this.components = components;
        this.ease = ease;
    }
    include(animation) {
        this.components.push(animation);
        return this;
    }
    tween(t, context) {
        for (const a of this.components) {
            a.tween(t, context);
        }
        return this.model;
    }
}
exports.CompoundAnimation = CompoundAnimation;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/animations/easing.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/animations/easing.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.easeInOut = void 0;
/**
 * Slows down animations towards the begin and the end.
 *
 * @param x the value between 0 (start of animation) and 1 (end of
 *     animation) linearly interpolated in time.
 * @returns {number} the eased value between 0 and 1
 */
function easeInOut(x) {
    if (x < 0.5)
        return x * x * 2;
    else
        return 1 - (1 - x) * (1 - x) * 2;
}
exports.easeInOut = easeInOut;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/commands/command-registration.js":
/*!************************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/commands/command-registration.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.configureCommand = exports.CommandActionHandlerInitializer = exports.CommandActionHandler = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "./node_modules/sprotty/lib/utils/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
class CommandActionHandler {
    constructor(commandRegistration) {
        this.commandRegistration = commandRegistration;
    }
    handle(action) {
        return this.commandRegistration.factory(action);
    }
}
exports.CommandActionHandler = CommandActionHandler;
let CommandActionHandlerInitializer = class CommandActionHandlerInitializer {
    constructor(registrations) {
        this.registrations = registrations;
    }
    initialize(registry) {
        this.registrations.forEach(registration => registry.register(registration.kind, new CommandActionHandler(registration)));
    }
};
CommandActionHandlerInitializer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.CommandRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], CommandActionHandlerInitializer);
exports.CommandActionHandlerInitializer = CommandActionHandlerInitializer;
/**
 * Use this method in your DI configuration to register a new command to the diagram.
 */
function configureCommand(context, constr) {
    if (!(0, inversify_2.isInjectable)(constr)) {
        throw new Error(`Commands should be @injectable: ${constr.name}`);
    }
    if (!context.isBound(constr)) {
        context.bind(constr).toSelf();
    }
    context.bind(types_1.TYPES.CommandRegistration).toDynamicValue(ctx => ({
        kind: constr.KIND,
        factory: (action) => {
            const childContainer = new inversify_1.Container();
            childContainer.parent = ctx.container;
            childContainer.bind(types_1.TYPES.Action).toConstantValue(action);
            return childContainer.get(constr);
        }
    }));
}
exports.configureCommand = configureCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/commands/command-stack-options.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/commands/command-stack-options.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.overrideCommandStackOptions = void 0;
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "./node_modules/sprotty-protocol/lib/utils/object.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
function overrideCommandStackOptions(container, options) {
    const defaultOptions = container.get(types_1.TYPES.CommandStackOptions);
    (0, object_1.safeAssign)(defaultOptions, options);
    return defaultOptions;
}
exports.overrideCommandStackOptions = overrideCommandStackOptions;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/commands/command-stack.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/commands/command-stack.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandStack = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const smodel_factory_1 = __webpack_require__(/*! ../model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js");
const smodel_1 = __webpack_require__(/*! ../model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const animation_frame_syncer_1 = __webpack_require__(/*! ../animations/animation-frame-syncer */ "./node_modules/sprotty/lib/base/animations/animation-frame-syncer.js");
const command_1 = __webpack_require__(/*! ./command */ "./node_modules/sprotty/lib/base/commands/command.js");
/**
 * The implementation of the ICommandStack. Clients should not use this
 * class directly.
 *
 * The command stack holds the current model as the result of the current
 * promise. When a new command is executed/undone/redone, its execution is
 * chained using <code>Promise#then()</code> to the current Promise. This
 * way we can handle long running commands without blocking the current
 * thread.
 *
 * The command stack also does the special handling for special commands:
 *
 * System commands should be transparent to the user and as such be
 * automatically undone/redone with the next plain command. Additional care
 * must be taken that system commands that are executed after undo don't
 * break the correspondence between the topmost commands on the undo and
 * redo stacks.
 *
 * Hidden commands only tell the viewer to render a hidden model such that
 * its bounds can be extracted from the DOM and forwarded as separate actions.
 * Hidden commands should not leave any trace on the undo/redo/off stacks.
 *
 * Mergeable commands should be merged with their predecessor if possible,
 * such that e.g. multiple subsequent moves of the smae element can be undone
 * in one single step.
 */
let CommandStack = class CommandStack {
    constructor() {
        this.undoStack = [];
        this.redoStack = [];
        /**
         * System commands should be transparent to the user in undo/redo
         * operations. When a system command is executed when the redo
         * stack is not empty, it is pushed to offStack instead.
         *
         * On redo, all commands form this stack are undone such that the
         * redo operation gets the exact same model as when it was executed
         * first.
         *
         * On undo, all commands form this stack are undone as well as
         * system ommands should be transparent to the user.
         */
        this.offStack = [];
    }
    initialize() {
        this.currentPromise = Promise.resolve({
            main: {
                model: this.modelFactory.createRoot(smodel_factory_1.EMPTY_ROOT),
                modelChanged: false,
            },
            hidden: {
                model: this.modelFactory.createRoot(smodel_factory_1.EMPTY_ROOT),
                modelChanged: false,
            },
            popup: {
                model: this.modelFactory.createRoot(smodel_factory_1.EMPTY_ROOT),
                modelChanged: false,
            }
        });
    }
    get currentModel() {
        return this.currentPromise.then(state => state.main.model);
    }
    executeAll(commands) {
        commands.forEach(command => {
            this.logger.log(this, 'Executing', command);
            this.handleCommand(command, command.execute, this.mergeOrPush);
        });
        return this.thenUpdate();
    }
    execute(command) {
        this.logger.log(this, 'Executing', command);
        this.handleCommand(command, command.execute, this.mergeOrPush);
        return this.thenUpdate();
    }
    undo() {
        this.undoOffStackSystemCommands();
        this.undoPreceedingSystemCommands();
        const command = this.undoStack[this.undoStack.length - 1];
        if (command !== undefined && !this.isBlockUndo(command)) {
            this.undoStack.pop();
            this.logger.log(this, 'Undoing', command);
            this.handleCommand(command, command.undo, (c, context) => {
                this.redoStack.push(c);
            });
        }
        return this.thenUpdate();
    }
    redo() {
        this.undoOffStackSystemCommands();
        const command = this.redoStack.pop();
        if (command !== undefined) {
            this.logger.log(this, 'Redoing', command);
            this.handleCommand(command, command.redo, (c, context) => {
                this.pushToUndoStack(c);
            });
        }
        this.redoFollowingSystemCommands();
        return this.thenUpdate();
    }
    /**
     * Chains the current promise with another Promise that performs the
     * given operation on the given command.
     *
     * @param beforeResolve a function that is called directly before
     *      resolving the Promise to return the new model. Usually puts the
     *      command on the appropriate stack.
     */
    handleCommand(command, operation, beforeResolve) {
        this.currentPromise = this.currentPromise.then(state => new Promise(resolve => {
            let target;
            if (command instanceof command_1.HiddenCommand)
                target = 'hidden';
            else if (command instanceof command_1.PopupCommand)
                target = 'popup';
            else
                target = 'main';
            const context = this.createContext(state.main.model);
            let commandResult;
            try {
                commandResult = operation.call(command, context);
            }
            catch (error) {
                this.logger.error(this, "Failed to execute command:", error);
                commandResult = state[target].model;
            }
            const newState = copyState(state);
            if (commandResult instanceof Promise) {
                commandResult.then(newModel => {
                    if (target === 'main')
                        beforeResolve.call(this, command, context);
                    newState[target] = { model: newModel, modelChanged: true };
                    resolve(newState);
                });
            }
            else if (commandResult instanceof smodel_1.SModelRoot) {
                if (target === 'main')
                    beforeResolve.call(this, command, context);
                newState[target] = { model: commandResult, modelChanged: true };
                resolve(newState);
            }
            else {
                if (target === 'main')
                    beforeResolve.call(this, command, context);
                newState[target] = {
                    model: commandResult.model,
                    modelChanged: state[target].modelChanged || commandResult.modelChanged,
                    cause: commandResult.cause
                };
                resolve(newState);
            }
        }));
    }
    pushToUndoStack(command) {
        this.undoStack.push(command);
        if (this.options.undoHistoryLimit >= 0 && this.undoStack.length > this.options.undoHistoryLimit)
            this.undoStack.splice(0, this.undoStack.length - this.options.undoHistoryLimit);
    }
    /**
     * Notifies the Viewer to render the new model and/or the new hidden model
     * and returns a Promise for the new model.
     */
    thenUpdate() {
        this.currentPromise = this.currentPromise.then(state => {
            const newState = copyState(state);
            if (state.hidden.modelChanged) {
                this.updateHidden(state.hidden.model, state.hidden.cause);
                newState.hidden.modelChanged = false;
                newState.hidden.cause = undefined;
            }
            if (state.main.modelChanged) {
                this.update(state.main.model, state.main.cause);
                newState.main.modelChanged = false;
                newState.main.cause = undefined;
            }
            if (state.popup.modelChanged) {
                this.updatePopup(state.popup.model, state.popup.cause);
                newState.popup.modelChanged = false;
                newState.popup.cause = undefined;
            }
            return newState;
        });
        return this.currentModel;
    }
    /**
     * Notify the `ModelViewer` that the model has changed.
     */
    update(model, cause) {
        if (this.modelViewer === undefined) {
            this.modelViewer = this.viewerProvider.modelViewer;
        }
        this.modelViewer.update(model, cause);
    }
    /**
     * Notify the `HiddenModelViewer` that the hidden model has changed.
     */
    updateHidden(model, cause) {
        if (this.hiddenModelViewer === undefined) {
            this.hiddenModelViewer = this.viewerProvider.hiddenModelViewer;
        }
        this.hiddenModelViewer.update(model, cause);
    }
    /**
     * Notify the `PopupModelViewer` that the popup model has changed.
     */
    updatePopup(model, cause) {
        if (this.popupModelViewer === undefined) {
            this.popupModelViewer = this.viewerProvider.popupModelViewer;
        }
        this.popupModelViewer.update(model, cause);
    }
    /**
     * Handling of commands after their execution.
     *
     * Hidden commands are not pushed to any stack.
     *
     * System commands are pushed to the <code>offStack</code> when the redo
     * stack is not empty, allowing to undo the before a redo to keep the chain
     * of commands consistent.
     *
     * Mergable commands are merged if possible.
     */
    mergeOrPush(command, context) {
        if (this.isBlockUndo(command)) {
            this.undoStack = [];
            this.redoStack = [];
            this.offStack = [];
            this.pushToUndoStack(command);
            return;
        }
        if (this.isPushToOffStack(command) && this.redoStack.length > 0) {
            if (this.offStack.length > 0) {
                const lastCommand = this.offStack[this.offStack.length - 1];
                if (lastCommand instanceof command_1.MergeableCommand && lastCommand.merge(command, context))
                    return;
            }
            this.offStack.push(command);
            return;
        }
        if (this.isPushToUndoStack(command)) {
            this.offStack.forEach(c => this.undoStack.push(c));
            this.offStack = [];
            this.redoStack = [];
            if (this.undoStack.length > 0) {
                const lastCommand = this.undoStack[this.undoStack.length - 1];
                if (lastCommand instanceof command_1.MergeableCommand && lastCommand.merge(command, context))
                    return;
            }
            this.pushToUndoStack(command);
        }
    }
    /**
     * Reverts all system commands on the offStack.
     */
    undoOffStackSystemCommands() {
        let command = this.offStack.pop();
        while (command !== undefined) {
            this.logger.log(this, 'Undoing off-stack', command);
            this.handleCommand(command, command.undo, () => { });
            command = this.offStack.pop();
        }
    }
    /**
     * System commands should be transparent to the user, so this method
     * is called from <code>undo()</code> to revert all system commands
     * at the top of the undoStack.
     */
    undoPreceedingSystemCommands() {
        let command = this.undoStack[this.undoStack.length - 1];
        while (command !== undefined && this.isPushToOffStack(command)) {
            this.undoStack.pop();
            this.logger.log(this, 'Undoing', command);
            this.handleCommand(command, command.undo, (c, context) => {
                this.redoStack.push(c);
            });
            command = this.undoStack[this.undoStack.length - 1];
        }
    }
    /**
     * System commands should be transparent to the user, so this method
     * is called from <code>redo()</code> to re-execute all system commands
     * at the top of the redoStack.
     */
    redoFollowingSystemCommands() {
        let command = this.redoStack[this.redoStack.length - 1];
        while (command !== undefined && this.isPushToOffStack(command)) {
            this.redoStack.pop();
            this.logger.log(this, 'Redoing ', command);
            this.handleCommand(command, command.redo, (c, context) => {
                this.pushToUndoStack(c);
            });
            command = this.redoStack[this.redoStack.length - 1];
        }
    }
    /**
     * Assembles the context object that is passed to the commands execution method.
     */
    createContext(currentModel) {
        return {
            root: currentModel,
            modelChanged: this,
            modelFactory: this.modelFactory,
            duration: this.options.defaultDuration,
            logger: this.logger,
            syncer: this.syncer
        };
    }
    isPushToOffStack(command) {
        return command instanceof command_1.SystemCommand;
    }
    isPushToUndoStack(command) {
        return !(command instanceof command_1.HiddenCommand);
    }
    isBlockUndo(command) {
        return command instanceof command_1.ResetCommand;
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IModelFactory),
    __metadata("design:type", Object)
], CommandStack.prototype, "modelFactory", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IViewerProvider),
    __metadata("design:type", Object)
], CommandStack.prototype, "viewerProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], CommandStack.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.AnimationFrameSyncer),
    __metadata("design:type", animation_frame_syncer_1.AnimationFrameSyncer)
], CommandStack.prototype, "syncer", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.CommandStackOptions),
    __metadata("design:type", Object)
], CommandStack.prototype, "options", void 0);
__decorate([
    (0, inversify_1.postConstruct)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CommandStack.prototype, "initialize", null);
CommandStack = __decorate([
    (0, inversify_1.injectable)()
], CommandStack);
exports.CommandStack = CommandStack;
function copyState(state) {
    return {
        main: Object.assign({}, state.main),
        hidden: Object.assign({}, state.hidden),
        popup: Object.assign({}, state.popup)
    };
}


/***/ }),

/***/ "./node_modules/sprotty/lib/base/commands/command.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/base/commands/command.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResetCommand = exports.SystemCommand = exports.PopupCommand = exports.HiddenCommand = exports.MergeableCommand = exports.Command = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
/**
 * Base class for all commands.
 *
 * Command instances are created via dependency injection and should take
 * the respective action as an injected constructor parameter. They must
 * also define a static <code>KIND</code> which is used to map an
 * <code>Action#kind</code>.
 *
 * <pre>
 * export class MyCommand extends Command {
 *   static KIND = 'MyCommand'
 *   constructor(@inject(TYPES.Action) action: MyAction) {
 *   ...
 * }
 * @inject(TYPES.Action)
 * </pre>
 */
let Command = class Command {
};
Command = __decorate([
    (0, inversify_1.injectable)()
], Command);
exports.Command = Command;
/**
 * A mergeable command can accumulate subsequent commands of the same kind.
 *
 * For example, multiple subsequent move commands can be merged to yield a
 * single command, such that undo will roll them back altogether. Otherwise
 * the user would have to push CTRL-Z for each mouse move element that
 * resuted in a command.
 */
let MergeableCommand = class MergeableCommand extends Command {
    /**
     * Tries to merge the given command with this.
     *
     * @param command
     * @param context
     */
    merge(command, context) {
        return false;
    }
};
MergeableCommand = __decorate([
    (0, inversify_1.injectable)()
], MergeableCommand);
exports.MergeableCommand = MergeableCommand;
/**
 * A hidden command is used to trigger the rendering of a model on a
 * hidden canvas.
 *
 * Some graphical elements are styled using CSS, others have bounds that
 * require to layout their children before being computed. In such cases
 * we cannot tell about the size of elements without acutally rendering
 * the DOM. We render them to an invisible canvas. This can be achieved
 * using hidden commands.
 *
 * Hidden commands do not change the model directly, and are as such
 * neither undoable nor redoable. The command stack does not push them on
 * any stack and forwards the resulting model to the invisible viewer.
 */
let HiddenCommand = class HiddenCommand extends Command {
    undo(context) {
        context.logger.error(this, 'Cannot undo a hidden command');
        return context.root;
    }
    redo(context) {
        context.logger.error(this, 'Cannot redo a hidden command');
        return context.root;
    }
};
HiddenCommand = __decorate([
    (0, inversify_1.injectable)()
], HiddenCommand);
exports.HiddenCommand = HiddenCommand;
let PopupCommand = class PopupCommand extends Command {
};
PopupCommand = __decorate([
    (0, inversify_1.injectable)()
], PopupCommand);
exports.PopupCommand = PopupCommand;
/**
 * A system command is triggered by the system, e.g. in order to update bounds
 * in the model with data fetched from the DOM.
 *
 * As it is automatically triggered it should not count as a single command in
 * undo/redo operations. Into the bargain, such an automatic command could occur
 * after an undo and as such make the next redo command invalid because it is
 * based on a model state that has changed. The command stack handles system
 * commands in a special way to overcome these issues.
 */
let SystemCommand = class SystemCommand extends Command {
};
SystemCommand = __decorate([
    (0, inversify_1.injectable)()
], SystemCommand);
exports.SystemCommand = SystemCommand;
/**
 * A reset command deletes all undo/redo stacks and cannot be undone.
 *
 * It marks a point of no return.
 */
let ResetCommand = class ResetCommand extends Command {
};
ResetCommand = __decorate([
    (0, inversify_1.injectable)()
], ResetCommand);
exports.ResetCommand = ResetCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/commands/request-command.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/commands/request-command.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModelRequestCommand = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const command_1 = __webpack_require__(/*! ./command */ "./node_modules/sprotty/lib/base/commands/command.js");
/**
 * A command that does not modify the internal model, but retrieves information
 * from it by dispatching a response action.
 */
let ModelRequestCommand = class ModelRequestCommand extends command_1.SystemCommand {
    execute(context) {
        const result = this.retrieveResult(context);
        this.actionDispatcher.dispatch(result);
        return { model: context.root, modelChanged: false };
    }
    undo(context) {
        return { model: context.root, modelChanged: false };
    }
    redo(context) {
        return { model: context.root, modelChanged: false };
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ModelRequestCommand.prototype, "actionDispatcher", void 0);
ModelRequestCommand = __decorate([
    (0, inversify_1.injectable)()
], ModelRequestCommand);
exports.ModelRequestCommand = ModelRequestCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/di.config.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty/lib/base/di.config.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ./types */ "./node_modules/sprotty/lib/base/types.js");
const initialize_canvas_1 = __webpack_require__(/*! ./features/initialize-canvas */ "./node_modules/sprotty/lib/base/features/initialize-canvas.js");
const logging_1 = __webpack_require__(/*! ../utils/logging */ "./node_modules/sprotty/lib/utils/logging.js");
const action_dispatcher_1 = __webpack_require__(/*! ./actions/action-dispatcher */ "./node_modules/sprotty/lib/base/actions/action-dispatcher.js");
const action_handler_1 = __webpack_require__(/*! ./actions/action-handler */ "./node_modules/sprotty/lib/base/actions/action-handler.js");
const command_stack_1 = __webpack_require__(/*! ./commands/command-stack */ "./node_modules/sprotty/lib/base/commands/command-stack.js");
const smodel_factory_1 = __webpack_require__(/*! ./model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js");
const animation_frame_syncer_1 = __webpack_require__(/*! ./animations/animation-frame-syncer */ "./node_modules/sprotty/lib/base/animations/animation-frame-syncer.js");
const viewer_1 = __webpack_require__(/*! ./views/viewer */ "./node_modules/sprotty/lib/base/views/viewer.js");
const viewer_options_1 = __webpack_require__(/*! ./views/viewer-options */ "./node_modules/sprotty/lib/base/views/viewer-options.js");
const mouse_tool_1 = __webpack_require__(/*! ./views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const key_tool_1 = __webpack_require__(/*! ./views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const vnode_postprocessor_1 = __webpack_require__(/*! ./views/vnode-postprocessor */ "./node_modules/sprotty/lib/base/views/vnode-postprocessor.js");
const view_1 = __webpack_require__(/*! ./views/view */ "./node_modules/sprotty/lib/base/views/view.js");
const viewer_cache_1 = __webpack_require__(/*! ./views/viewer-cache */ "./node_modules/sprotty/lib/base/views/viewer-cache.js");
const dom_helper_1 = __webpack_require__(/*! ./views/dom-helper */ "./node_modules/sprotty/lib/base/views/dom-helper.js");
const id_postprocessor_1 = __webpack_require__(/*! ./views/id-postprocessor */ "./node_modules/sprotty/lib/base/views/id-postprocessor.js");
const command_registration_1 = __webpack_require__(/*! ./commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const css_class_postprocessor_1 = __webpack_require__(/*! ./views/css-class-postprocessor */ "./node_modules/sprotty/lib/base/views/css-class-postprocessor.js");
const tool_manager_1 = __webpack_require__(/*! ./tool-manager/tool-manager */ "./node_modules/sprotty/lib/base/tool-manager/tool-manager.js");
const tool_1 = __webpack_require__(/*! ./tool-manager/tool */ "./node_modules/sprotty/lib/base/tool-manager/tool.js");
const set_model_1 = __webpack_require__(/*! ./features/set-model */ "./node_modules/sprotty/lib/base/features/set-model.js");
const ui_extension_registry_1 = __webpack_require__(/*! ./ui-extensions/ui-extension-registry */ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js");
const diagram_locker_1 = __webpack_require__(/*! ./actions/diagram-locker */ "./node_modules/sprotty/lib/base/actions/diagram-locker.js");
const defaultContainerModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    // Logging ---------------------------------------------
    bind(types_1.TYPES.ILogger).to(logging_1.NullLogger).inSingletonScope();
    bind(types_1.TYPES.LogLevel).toConstantValue(logging_1.LogLevel.warn);
    // Registries ---------------------------------------------
    bind(types_1.TYPES.SModelRegistry).to(smodel_factory_1.SModelRegistry).inSingletonScope();
    bind(action_handler_1.ActionHandlerRegistry).toSelf().inSingletonScope();
    bind(types_1.TYPES.ActionHandlerRegistryProvider).toProvider(ctx => {
        return () => {
            return new Promise((resolve) => {
                resolve(ctx.container.get(action_handler_1.ActionHandlerRegistry));
            });
        };
    });
    bind(types_1.TYPES.ViewRegistry).to(view_1.ViewRegistry).inSingletonScope();
    // Model Creation ---------------------------------------------
    bind(types_1.TYPES.IModelFactory).to(smodel_factory_1.SModelFactory).inSingletonScope();
    // Action Dispatcher ---------------------------------------------
    bind(types_1.TYPES.IActionDispatcher).to(action_dispatcher_1.ActionDispatcher).inSingletonScope();
    bind(types_1.TYPES.IActionDispatcherProvider).toProvider(ctx => {
        return () => {
            return new Promise((resolve) => {
                resolve(ctx.container.get(types_1.TYPES.IActionDispatcher));
            });
        };
    });
    bind(types_1.TYPES.IDiagramLocker).to(diagram_locker_1.DefaultDiagramLocker).inSingletonScope();
    // Action handler
    bind(types_1.TYPES.IActionHandlerInitializer).to(command_registration_1.CommandActionHandlerInitializer);
    // Command Stack ---------------------------------------------
    bind(types_1.TYPES.ICommandStack).to(command_stack_1.CommandStack).inSingletonScope();
    bind(types_1.TYPES.ICommandStackProvider).toProvider(ctx => {
        return () => {
            return new Promise((resolve) => {
                resolve(ctx.container.get(types_1.TYPES.ICommandStack));
            });
        };
    });
    bind(types_1.TYPES.CommandStackOptions).toConstantValue({
        defaultDuration: 250,
        undoHistoryLimit: 50
    });
    // Viewer ---------------------------------------------
    bind(viewer_1.ModelViewer).toSelf().inSingletonScope();
    bind(viewer_1.HiddenModelViewer).toSelf().inSingletonScope();
    bind(viewer_1.PopupModelViewer).toSelf().inSingletonScope();
    bind(types_1.TYPES.ModelViewer).toDynamicValue(ctx => {
        const container = ctx.container.createChild();
        container.bind(types_1.TYPES.IViewer).toService(viewer_1.ModelViewer);
        container.bind(viewer_cache_1.ViewerCache).toSelf();
        return container.get(viewer_cache_1.ViewerCache);
    }).inSingletonScope();
    bind(types_1.TYPES.PopupModelViewer).toDynamicValue(ctx => {
        const container = ctx.container.createChild();
        container.bind(types_1.TYPES.IViewer).toService(viewer_1.PopupModelViewer);
        container.bind(viewer_cache_1.ViewerCache).toSelf();
        return container.get(viewer_cache_1.ViewerCache);
    }).inSingletonScope();
    bind(types_1.TYPES.HiddenModelViewer).toService(viewer_1.HiddenModelViewer);
    bind(types_1.TYPES.IViewerProvider).toDynamicValue(ctx => {
        return {
            get modelViewer() {
                return ctx.container.get(types_1.TYPES.ModelViewer);
            },
            get hiddenModelViewer() {
                return ctx.container.get(types_1.TYPES.HiddenModelViewer);
            },
            get popupModelViewer() {
                return ctx.container.get(types_1.TYPES.PopupModelViewer);
            }
        };
    });
    bind(types_1.TYPES.ViewerOptions).toConstantValue((0, viewer_options_1.defaultViewerOptions)());
    bind(types_1.TYPES.PatcherProvider).to(viewer_1.PatcherProvider).inSingletonScope();
    bind(types_1.TYPES.DOMHelper).to(dom_helper_1.DOMHelper).inSingletonScope();
    bind(types_1.TYPES.ModelRendererFactory).toFactory(ctx => {
        return (targetKind, processors, args = {}) => {
            const viewRegistry = ctx.container.get(types_1.TYPES.ViewRegistry);
            return new viewer_1.ModelRenderer(viewRegistry, targetKind, processors, args);
        };
    });
    // Tools & Postprocessors --------------------------------------
    bind(id_postprocessor_1.IdPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(id_postprocessor_1.IdPostprocessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(id_postprocessor_1.IdPostprocessor);
    bind(css_class_postprocessor_1.CssClassPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(css_class_postprocessor_1.CssClassPostprocessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(css_class_postprocessor_1.CssClassPostprocessor);
    bind(mouse_tool_1.MouseTool).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(mouse_tool_1.MouseTool);
    bind(key_tool_1.KeyTool).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(key_tool_1.KeyTool);
    bind(vnode_postprocessor_1.FocusFixPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(vnode_postprocessor_1.FocusFixPostprocessor);
    bind(types_1.TYPES.PopupVNodePostprocessor).toService(id_postprocessor_1.IdPostprocessor);
    bind(mouse_tool_1.PopupMouseTool).toSelf().inSingletonScope();
    bind(types_1.TYPES.PopupVNodePostprocessor).toService(mouse_tool_1.PopupMouseTool);
    // Animation Frame Sync ------------------------------------------
    bind(types_1.TYPES.AnimationFrameSyncer).to(animation_frame_syncer_1.AnimationFrameSyncer).inSingletonScope();
    // Canvas Initialization ---------------------------------------------
    const context = { bind, isBound };
    (0, command_registration_1.configureCommand)(context, initialize_canvas_1.InitializeCanvasBoundsCommand);
    bind(initialize_canvas_1.CanvasBoundsInitializer).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(initialize_canvas_1.CanvasBoundsInitializer);
    // Model commands ---------------------------------------------
    (0, command_registration_1.configureCommand)(context, set_model_1.SetModelCommand);
    // Tool manager initialization ------------------------------------
    bind(types_1.TYPES.IToolManager).to(tool_manager_1.ToolManager).inSingletonScope();
    bind(tool_manager_1.DefaultToolsEnablingKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(tool_manager_1.DefaultToolsEnablingKeyListener);
    bind(tool_manager_1.ToolManagerActionHandler).toSelf().inSingletonScope();
    (0, action_handler_1.configureActionHandler)(context, tool_1.EnableDefaultToolsAction.KIND, tool_manager_1.ToolManagerActionHandler);
    (0, action_handler_1.configureActionHandler)(context, tool_1.EnableToolsAction.KIND, tool_manager_1.ToolManagerActionHandler);
    // UIExtension registry initialization ------------------------------------
    bind(types_1.TYPES.UIExtensionRegistry).to(ui_extension_registry_1.UIExtensionRegistry).inSingletonScope();
    (0, command_registration_1.configureCommand)(context, ui_extension_registry_1.SetUIExtensionVisibilityCommand);
    // Tracker for last known mouse position on diagram ------------------------
    bind(mouse_tool_1.MousePositionTracker).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(mouse_tool_1.MousePositionTracker);
});
exports["default"] = defaultContainerModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/features/initialize-canvas.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/features/initialize-canvas.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InitializeCanvasBoundsCommand = exports.InitializeCanvasBoundsAction = exports.CanvasBoundsInitializer = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ../model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const command_1 = __webpack_require__(/*! ../commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sprotty/lib/utils/browser.js");
/**
 * Grabs the bounds from the root element in page coordinates and fires a
 * InitializeCanvasBoundsAction. This size is needed for other actions such
 * as FitToScreenAction.
 */
let CanvasBoundsInitializer = class CanvasBoundsInitializer {
    decorate(vnode, element) {
        if (element instanceof smodel_1.SModelRoot && !geometry_1.Dimension.isValid(element.canvasBounds)) {
            this.rootAndVnode = [element, vnode];
        }
        return vnode;
    }
    postUpdate() {
        if (this.rootAndVnode !== undefined) {
            const domElement = this.rootAndVnode[1].elm;
            const oldBounds = this.rootAndVnode[0].canvasBounds;
            if (domElement !== undefined) {
                const newBounds = this.getBoundsInPage(domElement);
                if (!((0, geometry_1.almostEquals)(newBounds.x, oldBounds.x)
                    && (0, geometry_1.almostEquals)(newBounds.y, oldBounds.y)
                    && (0, geometry_1.almostEquals)(newBounds.width, oldBounds.width)
                    && (0, geometry_1.almostEquals)(newBounds.height, oldBounds.width)))
                    this.actionDispatcher.dispatch(InitializeCanvasBoundsAction.create(newBounds));
            }
            this.rootAndVnode = undefined;
        }
    }
    getBoundsInPage(element) {
        const bounds = element.getBoundingClientRect();
        const scroll = (0, browser_1.getWindowScroll)();
        return {
            x: bounds.left + scroll.x,
            y: bounds.top + scroll.y,
            width: bounds.width,
            height: bounds.height
        };
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], CanvasBoundsInitializer.prototype, "actionDispatcher", void 0);
CanvasBoundsInitializer = __decorate([
    (0, inversify_1.injectable)()
], CanvasBoundsInitializer);
exports.CanvasBoundsInitializer = CanvasBoundsInitializer;
var InitializeCanvasBoundsAction;
(function (InitializeCanvasBoundsAction) {
    InitializeCanvasBoundsAction.KIND = 'initializeCanvasBounds';
    function create(newCanvasBounds) {
        return {
            kind: InitializeCanvasBoundsAction.KIND,
            newCanvasBounds
        };
    }
    InitializeCanvasBoundsAction.create = create;
})(InitializeCanvasBoundsAction = exports.InitializeCanvasBoundsAction || (exports.InitializeCanvasBoundsAction = {}));
let InitializeCanvasBoundsCommand = class InitializeCanvasBoundsCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.newCanvasBounds = this.action.newCanvasBounds;
        context.root.canvasBounds = this.newCanvasBounds;
        return context.root;
    }
    undo(context) {
        return context.root;
    }
    redo(context) {
        return context.root;
    }
};
InitializeCanvasBoundsCommand.KIND = InitializeCanvasBoundsAction.KIND;
InitializeCanvasBoundsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], InitializeCanvasBoundsCommand);
exports.InitializeCanvasBoundsCommand = InitializeCanvasBoundsCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/features/set-model.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/features/set-model.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetModelCommand = exports.SetModelAction = exports.RequestModelAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const initialize_canvas_1 = __webpack_require__(/*! ./initialize-canvas */ "./node_modules/sprotty/lib/base/features/initialize-canvas.js");
/**
 * Sent from the client to the model source (e.g. a DiagramServer) in order to request a model. Usually this
 * is the first message that is sent to the source, so it is also used to initiate the communication.
 * The response is a SetModelAction or an UpdateModelAction.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class RequestModelAction {
    constructor(options, requestId = '') {
        this.options = options;
        this.requestId = requestId;
        this.kind = RequestModelAction.KIND;
    }
    /** Factory function to dispatch a request with the `IActionDispatcher` */
    static create(options) {
        return new RequestModelAction(options, (0, actions_1.generateRequestId)());
    }
}
exports.RequestModelAction = RequestModelAction;
RequestModelAction.KIND = 'requestModel';
/**
 * Sent from the model source to the client in order to set the model. If a model is already present, it is replaced.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class SetModelAction {
    constructor(newRoot, responseId = '') {
        this.newRoot = newRoot;
        this.responseId = responseId;
        this.kind = SetModelAction.KIND;
    }
}
exports.SetModelAction = SetModelAction;
SetModelAction.KIND = 'setModel';
let SetModelCommand = class SetModelCommand extends command_1.ResetCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.oldRoot = context.modelFactory.createRoot(context.root);
        this.newRoot = context.modelFactory.createRoot(this.action.newRoot);
        return this.newRoot;
    }
    undo(context) {
        return this.oldRoot;
    }
    redo(context) {
        return this.newRoot;
    }
    get blockUntil() {
        return action => action.kind === initialize_canvas_1.InitializeCanvasBoundsCommand.KIND;
    }
};
SetModelCommand.KIND = actions_1.SetModelAction.KIND;
SetModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetModelCommand);
exports.SetModelCommand = SetModelCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/model/smodel-extension.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/model/smodel-extension.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./node_modules/sprotty/lib/base/model/smodel-factory.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/model/smodel-factory.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFeatureSet = exports.EMPTY_ROOT = exports.SModelFactory = exports.SModelRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "./node_modules/sprotty/lib/utils/registry.js");
const smodel_1 = __webpack_require__(/*! ./smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
/**
 * Model element classes registered here are considered automatically when constructring a model from its schema.
 */
let SModelRegistry = class SModelRegistry extends registry_1.FactoryRegistry {
    constructor(registrations) {
        super();
        registrations.forEach(registration => {
            let defaultFeatures = this.getDefaultFeatures(registration.constr);
            if (!defaultFeatures && registration.features && registration.features.enable)
                defaultFeatures = [];
            if (defaultFeatures) {
                const featureSet = createFeatureSet(defaultFeatures, registration.features);
                this.register(registration.type, () => {
                    const element = new registration.constr();
                    element.features = featureSet;
                    return element;
                });
            }
            else {
                this.register(registration.type, () => new registration.constr());
            }
        });
    }
    getDefaultFeatures(constr) {
        let obj = constr;
        do {
            const defaultFeatures = obj.DEFAULT_FEATURES;
            if (defaultFeatures)
                return defaultFeatures;
            obj = Object.getPrototypeOf(obj);
        } while (obj);
        return undefined;
    }
};
SModelRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.SModelElementRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], SModelRegistry);
exports.SModelRegistry = SModelRegistry;
/**
 * The default model factory creates SModelRoot for the root element and SChildElement for all other
 * model elements.
 */
let SModelFactory = class SModelFactory {
    createElement(schema, parent) {
        let child;
        if (this.registry.hasKey(schema.type)) {
            const regElement = this.registry.get(schema.type, undefined);
            if (!(regElement instanceof smodel_1.SChildElement))
                throw new Error(`Element with type ${schema.type} was expected to be an SChildElement.`);
            child = regElement;
        }
        else {
            child = new smodel_1.SChildElement();
        }
        return this.initializeChild(child, schema, parent);
    }
    createRoot(schema) {
        let root;
        if (this.registry.hasKey(schema.type)) {
            const regElement = this.registry.get(schema.type, undefined);
            if (!(regElement instanceof smodel_1.SModelRoot))
                throw new Error(`Element with type ${schema.type} was expected to be an SModelRoot.`);
            root = regElement;
        }
        else {
            root = new smodel_1.SModelRoot();
        }
        return this.initializeRoot(root, schema);
    }
    createSchema(element) {
        const schema = {};
        for (const key in element) {
            if (!this.isReserved(element, key)) {
                const value = element[key];
                if (typeof value !== 'function')
                    schema[key] = value;
            }
        }
        if (element instanceof smodel_1.SParentElement)
            schema['children'] = element.children.map(child => this.createSchema(child));
        return schema;
    }
    initializeElement(element, schema) {
        for (const key in schema) {
            if (!this.isReserved(element, key)) {
                const value = schema[key];
                if (typeof value !== 'function')
                    element[key] = value;
            }
        }
        return element;
    }
    isReserved(element, propertyName) {
        if (['children', 'parent', 'index'].indexOf(propertyName) >= 0)
            return true;
        let obj = element;
        do {
            const descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);
            if (descriptor !== undefined)
                return descriptor.get !== undefined;
            obj = Object.getPrototypeOf(obj);
        } while (obj);
        return false;
    }
    initializeParent(parent, schema) {
        this.initializeElement(parent, schema);
        if ((0, smodel_1.isParent)(schema)) {
            parent.children = schema.children.map(childSchema => this.createElement(childSchema, parent));
        }
        return parent;
    }
    initializeChild(child, schema, parent) {
        this.initializeParent(child, schema);
        if (parent !== undefined) {
            child.parent = parent;
        }
        return child;
    }
    initializeRoot(root, schema) {
        this.initializeParent(root, schema);
        root.index.add(root);
        return root;
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.SModelRegistry),
    __metadata("design:type", SModelRegistry)
], SModelFactory.prototype, "registry", void 0);
SModelFactory = __decorate([
    (0, inversify_1.injectable)()
], SModelFactory);
exports.SModelFactory = SModelFactory;
exports.EMPTY_ROOT = Object.freeze({
    type: 'NONE',
    id: 'EMPTY'
});
function createFeatureSet(defaults, custom) {
    const featureSet = new Set(defaults);
    if (custom && custom.enable) {
        for (const f of custom.enable) {
            featureSet.add(f);
        }
    }
    if (custom && custom.disable) {
        for (const f of custom.disable) {
            featureSet.delete(f);
        }
    }
    return featureSet;
}
exports.createFeatureSet = createFeatureSet;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/model/smodel-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/model/smodel-utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transformToRootBounds = exports.containsSome = exports.translateBounds = exports.translatePoint = exports.findParentByFeature = exports.findParent = exports.findElement = exports.getSubType = exports.getBasicType = exports.registerModelElement = void 0;
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ./smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
/**
 * Register a model element constructor for an element type.
 */
function registerModelElement(context, type, constr, features) {
    context.bind(types_1.TYPES.SModelElementRegistration).toConstantValue({
        type, constr, features
    });
}
exports.registerModelElement = registerModelElement;
/**
 * Model element types can include a colon to separate the basic type and a sub-type. This function
 * extracts the basic type of a model element.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function getBasicType(schema) {
    if (!schema.type)
        return '';
    const colonIndex = schema.type.indexOf(':');
    if (colonIndex >= 0)
        return schema.type.substring(0, colonIndex);
    else
        return schema.type;
}
exports.getBasicType = getBasicType;
/**
 * Model element types can include a colon to separate the basic type and a sub-type. This function
 * extracts the sub-type of a model element.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function getSubType(schema) {
    if (!schema.type)
        return '';
    const colonIndex = schema.type.indexOf(':');
    if (colonIndex >= 0)
        return schema.type.substring(colonIndex + 1);
    else
        return schema.type;
}
exports.getSubType = getSubType;
/**
 * Find the element with the given identifier. If you need to find multiple elements, using an
 * SModelIndex might be more effective.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function findElement(parent, elementId) {
    if (parent.id === elementId)
        return parent;
    if (parent.children !== undefined) {
        for (const child of parent.children) {
            const result = findElement(child, elementId);
            if (result !== undefined)
                return result;
        }
    }
    return undefined;
}
exports.findElement = findElement;
/**
 * Find a parent element that satisfies the given predicate.
 */
function findParent(element, predicate) {
    let current = element;
    while (current !== undefined) {
        if (predicate(current))
            return current;
        else if (current instanceof smodel_1.SChildElement)
            current = current.parent;
        else
            current = undefined;
    }
    return current;
}
exports.findParent = findParent;
/**
 * Find a parent element that implements the feature identified with the given predicate.
 */
function findParentByFeature(element, predicate) {
    let current = element;
    while (current !== undefined) {
        if (predicate(current))
            return current;
        else if (current instanceof smodel_1.SChildElement)
            current = current.parent;
        else
            current = undefined;
    }
    return current;
}
exports.findParentByFeature = findParentByFeature;
/**
 * Translate a point from the coordinate system of the source element to the coordinate system
 * of the target element.
 */
function translatePoint(point, source, target) {
    if (source !== target) {
        // Translate from the source to the root element
        while (source instanceof smodel_1.SChildElement) {
            point = source.localToParent(point);
            source = source.parent;
            if (source === target)
                return point;
        }
        // Translate from the root to the target element
        const targetTrace = [];
        while (target instanceof smodel_1.SChildElement) {
            targetTrace.push(target);
            target = target.parent;
        }
        if (source !== target)
            throw new Error("Incompatible source and target: " + source.id + ", " + target.id);
        for (let i = targetTrace.length - 1; i >= 0; i--) {
            point = targetTrace[i].parentToLocal(point);
        }
    }
    return point;
}
exports.translatePoint = translatePoint;
/**
 * Translate some bounds from the coordinate system of the source element to the coordinate system
 * of the target element.
 */
function translateBounds(bounds, source, target) {
    const upperLeft = translatePoint(bounds, source, target);
    const lowerRight = translatePoint({ x: bounds.x + bounds.width, y: bounds.y + bounds.height }, source, target);
    return {
        x: upperLeft.x,
        y: upperLeft.y,
        width: lowerRight.x - upperLeft.x,
        height: lowerRight.y - upperLeft.y
    };
}
exports.translateBounds = translateBounds;
/**
 * Tests if the given model contains an id of then given element or one of its descendants.
 */
function containsSome(root, element) {
    const test = (el) => root.index.getById(el.id) !== undefined;
    const find = (elements) => elements.some(el => test(el) || find(el.children));
    return find([element]);
}
exports.containsSome = containsSome;
/**
 * Transforms the local bounds all the way up to the root.
 */
function transformToRootBounds(parent, bounds) {
    while (parent instanceof smodel_1.SChildElement) {
        bounds = parent.localToParent(bounds);
        parent = parent.parent;
    }
    return bounds;
}
exports.transformToRootBounds = transformToRootBounds;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/model/smodel.js":
/*!*******************************************************!*\
  !*** ./node_modules/sprotty/lib/base/model/smodel.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ModelIndexImpl = exports.createRandomId = exports.SModelRoot = exports.SChildElement = exports.SParentElement = exports.isParent = exports.SModelElement = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "./node_modules/sprotty/lib/utils/iterable.js");
/**
 * Base class for all elements of the diagram model.
 * Each model element must have a unique ID and a type that is used to look up its view.
 */
class SModelElement {
    get root() {
        let current = this;
        while (current) {
            if (current instanceof SModelRoot)
                return current;
            else if (current instanceof SChildElement)
                current = current.parent;
            else
                current = undefined;
        }
        throw new Error("Element has no root");
    }
    get index() {
        return this.root.index;
    }
    /**
     * A feature is a symbol identifying some functionality that can be enabled or disabled for
     * a model element. The set of supported features is determined by the `features` property.
     */
    hasFeature(feature) {
        return this.features !== undefined && this.features.has(feature);
    }
}
exports.SModelElement = SModelElement;
function isParent(element) {
    const children = element.children;
    return children !== undefined && children.constructor === Array;
}
exports.isParent = isParent;
/**
 * A parent element may contain child elements, thus the diagram model forms a tree.
 */
class SParentElement extends SModelElement {
    constructor() {
        super(...arguments);
        this.children = [];
    }
    add(child, index) {
        const children = this.children;
        if (index === undefined) {
            children.push(child);
        }
        else {
            if (index < 0 || index > this.children.length) {
                throw new Error(`Child index ${index} out of bounds (0..${children.length})`);
            }
            children.splice(index, 0, child);
        }
        child.parent = this;
        this.index.add(child);
    }
    remove(child) {
        const children = this.children;
        const i = children.indexOf(child);
        if (i < 0) {
            throw new Error(`No such child ${child.id}`);
        }
        children.splice(i, 1);
        this.index.remove(child);
    }
    removeAll(filter) {
        const children = this.children;
        if (filter !== undefined) {
            for (let i = children.length - 1; i >= 0; i--) {
                if (filter(children[i])) {
                    const child = children.splice(i, 1)[0];
                    this.index.remove(child);
                }
            }
        }
        else {
            children.forEach(child => {
                this.index.remove(child);
            });
            children.splice(0, children.length);
        }
    }
    move(child, newIndex) {
        const children = this.children;
        const i = children.indexOf(child);
        if (i === -1) {
            throw new Error(`No such child ${child.id}`);
        }
        else {
            if (newIndex < 0 || newIndex > children.length - 1) {
                throw new Error(`Child index ${newIndex} out of bounds (0..${children.length})`);
            }
            children.splice(i, 1);
            children.splice(newIndex, 0, child);
        }
    }
    /**
     * Transform the given bounds from the local coordinate system of this element to the coordinate
     * system of its parent. This function should consider any transformation that is applied to the
     * view of this element and its contents.
     * The base implementation assumes that this element does not define a local coordinate system,
     * so it leaves the bounds unchanged.
     */
    localToParent(point) {
        return (0, geometry_1.isBounds)(point) ? point : { x: point.x, y: point.y, width: -1, height: -1 };
    }
    /**
     * Transform the given bounds from the coordinate system of this element's parent to its local
     * coordinate system. This function should consider any transformation that is applied to the
     * view of this element and its contents.
     * The base implementation assumes that this element does not define a local coordinate system,
     * so it leaves the bounds unchanged.
     */
    parentToLocal(point) {
        return (0, geometry_1.isBounds)(point) ? point : { x: point.x, y: point.y, width: -1, height: -1 };
    }
}
exports.SParentElement = SParentElement;
/**
 * A child element is contained in a parent element. All elements except the model root are child
 * elements. In order to keep the model class hierarchy simple, every child element is also a
 * parent element, although for many elements the array of children is empty (i.e. they are
 * leafs in the model element tree).
 */
class SChildElement extends SParentElement {
}
exports.SChildElement = SChildElement;
/**
 * Base class for the root element of the diagram model tree.
 */
class SModelRoot extends SParentElement {
    constructor(index = new ModelIndexImpl()) {
        super();
        this.canvasBounds = geometry_1.Bounds.EMPTY;
        // Override the index property from SModelElement, which has a getter, with a data property
        Object.defineProperty(this, 'index', {
            value: index,
            writable: false
        });
    }
}
exports.SModelRoot = SModelRoot;
const ID_CHARS = "0123456789abcdefghijklmnopqrstuvwxyz";
function createRandomId(length = 8) {
    let id = "";
    for (let i = 0; i < length; i++) {
        id += ID_CHARS.charAt(Math.floor(Math.random() * ID_CHARS.length));
    }
    return id;
}
exports.createRandomId = createRandomId;
/**
 * This index implementation is for the _internal model_ that is used for rendering.
 */
class ModelIndexImpl {
    constructor() {
        this.id2element = new Map();
    }
    add(element) {
        if (!element.id) {
            do {
                element.id = createRandomId();
            } while (this.contains(element));
        }
        else if (this.contains(element)) {
            throw new Error("Duplicate ID in model: " + element.id);
        }
        this.id2element.set(element.id, element);
        if (element instanceof SParentElement) {
            for (const child of element.children) {
                this.add(child);
            }
        }
    }
    remove(element) {
        this.id2element.delete(element.id);
        if (element instanceof SParentElement) {
            for (const child of element.children) {
                this.remove(child);
            }
        }
    }
    contains(element) {
        return this.id2element.has(element.id);
    }
    getById(id) {
        return this.id2element.get(id);
    }
    getAttachedElements(element) {
        return [];
    }
    all() {
        return (0, iterable_1.mapIterable)(this.id2element, ([key, value]) => value);
    }
}
exports.ModelIndexImpl = ModelIndexImpl;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/tool-manager/tool-manager.js":
/*!********************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/tool-manager/tool-manager.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultToolsEnablingKeyListener = exports.ToolManagerActionHandler = exports.ToolManager = void 0;
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const tool_1 = __webpack_require__(/*! ./tool */ "./node_modules/sprotty/lib/base/tool-manager/tool.js");
const key_tool_1 = __webpack_require__(/*! ../views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
let ToolManager = class ToolManager {
    constructor() {
        this.tools = [];
        this.defaultTools = [];
        this.actives = [];
    }
    get managedTools() {
        return this.defaultTools.concat(this.tools);
    }
    get activeTools() {
        return this.actives;
    }
    disableActiveTools() {
        this.actives.forEach(tool => tool.disable());
        this.actives.splice(0, this.actives.length);
    }
    enableDefaultTools() {
        this.enable(this.defaultTools.map(tool => tool.id));
    }
    enable(toolIds) {
        this.disableActiveTools();
        const tools = toolIds.map(id => this.tool(id));
        tools.forEach(tool => {
            if (tool !== undefined) {
                tool.enable();
                this.actives.push(tool);
            }
        });
    }
    tool(toolId) {
        return this.managedTools.find(tool => tool.id === toolId);
    }
    registerDefaultTools(...tools) {
        for (const tool of tools) {
            this.defaultTools.push(tool);
        }
    }
    registerTools(...tools) {
        for (const tool of tools) {
            this.tools.push(tool);
        }
    }
};
ToolManager = __decorate([
    (0, inversify_1.injectable)()
], ToolManager);
exports.ToolManager = ToolManager;
let ToolManagerActionHandler = class ToolManagerActionHandler {
    handle(action) {
        switch (action.kind) {
            case tool_1.EnableDefaultToolsAction.KIND:
                this.toolManager.enableDefaultTools();
                break;
            case tool_1.EnableToolsAction.KIND:
                this.toolManager.enable(action.toolIds);
                break;
        }
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IToolManager),
    __metadata("design:type", Object)
], ToolManagerActionHandler.prototype, "toolManager", void 0);
ToolManagerActionHandler = __decorate([
    (0, inversify_1.injectable)()
], ToolManagerActionHandler);
exports.ToolManagerActionHandler = ToolManagerActionHandler;
let DefaultToolsEnablingKeyListener = class DefaultToolsEnablingKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            return [tool_1.EnableDefaultToolsAction.create()];
        }
        return [];
    }
};
DefaultToolsEnablingKeyListener = __decorate([
    (0, inversify_1.injectable)()
], DefaultToolsEnablingKeyListener);
exports.DefaultToolsEnablingKeyListener = DefaultToolsEnablingKeyListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/tool-manager/tool.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/tool-manager/tool.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnableDefaultToolsAction = exports.EnableToolsAction = void 0;
var EnableToolsAction;
(function (EnableToolsAction) {
    EnableToolsAction.KIND = "enable-tools";
    function create(toolIds) {
        return {
            kind: EnableToolsAction.KIND,
            toolIds
        };
    }
    EnableToolsAction.create = create;
})(EnableToolsAction = exports.EnableToolsAction || (exports.EnableToolsAction = {}));
var EnableDefaultToolsAction;
(function (EnableDefaultToolsAction) {
    EnableDefaultToolsAction.KIND = "enable-default-tools";
    function create() {
        return {
            kind: EnableDefaultToolsAction.KIND
        };
    }
    EnableDefaultToolsAction.create = create;
})(EnableDefaultToolsAction = exports.EnableDefaultToolsAction || (exports.EnableDefaultToolsAction = {}));


/***/ }),

/***/ "./node_modules/sprotty/lib/base/types.js":
/*!************************************************!*\
  !*** ./node_modules/sprotty/lib/base/types.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TYPES = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
exports.TYPES = {
    Action: Symbol('Action'),
    IActionDispatcher: Symbol('IActionDispatcher'),
    IActionDispatcherProvider: Symbol('IActionDispatcherProvider'),
    IActionHandlerInitializer: Symbol('IActionHandlerInitializer'),
    ActionHandlerRegistration: Symbol('ActionHandlerRegistration'),
    ActionHandlerRegistryProvider: Symbol('ActionHandlerRegistryProvider'),
    IAnchorComputer: Symbol('IAnchor'),
    AnimationFrameSyncer: Symbol('AnimationFrameSyncer'),
    /** @deprecated deprecated since 0.12.0 - please use `configureButtonHandler` */
    IButtonHandler: Symbol('IButtonHandler'),
    IButtonHandlerRegistration: Symbol('IButtonHandlerRegistration'),
    ICommandPaletteActionProvider: Symbol('ICommandPaletteActionProvider'),
    ICommandPaletteActionProviderRegistry: Symbol('ICommandPaletteActionProviderRegistry'),
    CommandRegistration: Symbol('CommandRegistration'),
    ICommandStack: Symbol('ICommandStack'),
    CommandStackOptions: Symbol('CommandStackOptions'),
    ICommandStackProvider: Symbol('ICommandStackProvider'),
    IContextMenuItemProvider: Symbol.for("IContextMenuProvider"),
    IContextMenuProviderRegistry: Symbol.for("IContextMenuProviderRegistry"),
    IContextMenuService: Symbol.for("IContextMenuService"),
    IContextMenuServiceProvider: Symbol.for("IContextMenuServiceProvider"),
    DOMHelper: Symbol('DOMHelper'),
    IDiagramLocker: Symbol('IDiagramLocker'),
    IEdgeRouter: Symbol('IEdgeRouter'),
    IEdgeRoutePostprocessor: Symbol('IEdgeRoutePostprocessor'),
    IEditLabelValidationDecorator: Symbol('IEditLabelValidationDecorator'),
    IEditLabelValidator: Symbol('IEditLabelValidator'),
    HiddenModelViewer: Symbol('HiddenModelViewer'),
    HiddenVNodePostprocessor: Symbol('HiddenVNodeDecorator'),
    HoverState: Symbol('HoverState'),
    KeyListener: Symbol('KeyListener'),
    LayoutRegistration: Symbol('LayoutRegistration'),
    LayoutRegistry: Symbol('LayoutRegistry'),
    Layouter: Symbol('Layouter'),
    LogLevel: Symbol('LogLevel'),
    ILogger: Symbol('ILogger'),
    IModelFactory: Symbol('IModelFactory'),
    IModelLayoutEngine: Symbol('IModelLayoutEngine'),
    ModelRendererFactory: Symbol('ModelRendererFactory'),
    ModelSource: Symbol('ModelSource'),
    ModelSourceProvider: Symbol('ModelSourceProvider'),
    ModelViewer: Symbol('ModelViewer'),
    MouseListener: Symbol('MouseListener'),
    PatcherProvider: Symbol('PatcherProvider'),
    IPopupModelProvider: Symbol('IPopupModelProvider'),
    PopupModelViewer: Symbol('PopupModelViewer'),
    PopupMouseListener: Symbol('PopupMouseListener'),
    PopupVNodePostprocessor: Symbol('PopupVNodeDecorator'),
    SModelElementRegistration: Symbol('SModelElementRegistration'),
    SModelRegistry: Symbol('SModelRegistry'),
    ISnapper: Symbol('ISnapper'),
    SvgExporter: Symbol('SvgExporter'),
    IToolManager: Symbol('IToolManager'),
    IUIExtension: Symbol('IUIExtension'),
    UIExtensionRegistry: Symbol('UIExtensionRegistry'),
    IVNodePostprocessor: Symbol('IVNodePostprocessor'),
    ViewRegistration: Symbol('ViewRegistration'),
    ViewRegistry: Symbol('ViewRegistry'),
    IViewer: Symbol('IViewer'),
    ViewerOptions: Symbol('ViewerOptions'),
    IViewerProvider: Symbol('IViewerProvider'),
};
/* eslint-enable */


/***/ }),

/***/ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js":
/*!******************************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SetUIExtensionVisibilityCommand = exports.SetUIExtensionVisibilityAction = exports.UIExtensionRegistry = void 0;
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "./node_modules/sprotty/lib/utils/registry.js");
const command_1 = __webpack_require__(/*! ../commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
/**
 * The registry maintaining UI extensions registered via `TYPES.IUIExtension`.
 */
let UIExtensionRegistry = class UIExtensionRegistry extends registry_1.InstanceRegistry {
    constructor(extensions = []) {
        super();
        extensions.forEach((extension) => this.register(extension.id(), extension));
    }
};
UIExtensionRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IUIExtension)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], UIExtensionRegistry);
exports.UIExtensionRegistry = UIExtensionRegistry;
var SetUIExtensionVisibilityAction;
(function (SetUIExtensionVisibilityAction) {
    SetUIExtensionVisibilityAction.KIND = "setUIExtensionVisibility";
    function create(options) {
        var _a;
        return {
            kind: SetUIExtensionVisibilityAction.KIND,
            extensionId: options.extensionId,
            visible: options.visible,
            contextElementsId: (_a = options.contextElementsId) !== null && _a !== void 0 ? _a : []
        };
    }
    SetUIExtensionVisibilityAction.create = create;
})(SetUIExtensionVisibilityAction = exports.SetUIExtensionVisibilityAction || (exports.SetUIExtensionVisibilityAction = {}));
let SetUIExtensionVisibilityCommand = class SetUIExtensionVisibilityCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const extension = this.registry.get(this.action.extensionId);
        if (extension) {
            this.action.visible ? extension.show(context.root, ...this.action.contextElementsId) : extension.hide();
        }
        return { model: context.root, modelChanged: false };
    }
    undo(context) {
        return { model: context.root, modelChanged: false };
    }
    redo(context) {
        return { model: context.root, modelChanged: false };
    }
};
SetUIExtensionVisibilityCommand.KIND = SetUIExtensionVisibilityAction.KIND;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.UIExtensionRegistry),
    __metadata("design:type", UIExtensionRegistry)
], SetUIExtensionVisibilityCommand.prototype, "registry", void 0);
SetUIExtensionVisibilityCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetUIExtensionVisibilityCommand);
exports.SetUIExtensionVisibilityCommand = SetUIExtensionVisibilityCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/ui-extensions/ui-extension.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractUIExtension = void 0;
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
/**
 * Abstract base class for UI extensions.
 */
let AbstractUIExtension = class AbstractUIExtension {
    show(root, ...contextElementIds) {
        this.activeElement = document.activeElement;
        if (!this.containerElement) {
            if (!this.initialize())
                return;
        }
        this.onBeforeShow(this.containerElement, root, ...contextElementIds);
        this.setContainerVisible(true);
    }
    hide() {
        this.setContainerVisible(false);
        this.restoreFocus();
        this.activeElement = null;
    }
    restoreFocus() {
        const focusedElement = this.activeElement;
        if (focusedElement) {
            focusedElement.focus();
        }
    }
    initialize() {
        const baseDiv = document.getElementById(this.options.baseDiv);
        if (!baseDiv) {
            this.logger.warn(this, `Could not obtain sprotty base container for initializing UI extension ${this.id}`, this);
            return false;
        }
        this.containerElement = this.getOrCreateContainer(baseDiv.id);
        this.initializeContents(this.containerElement);
        if (baseDiv) {
            baseDiv.insertBefore(this.containerElement, baseDiv.firstChild);
        }
        return true;
    }
    getOrCreateContainer(baseDivId) {
        let container = document.getElementById(this.id());
        if (container === null) {
            container = document.createElement('div');
            container.id = baseDivId + "_" + this.id();
            container.classList.add(this.containerClass());
        }
        return container;
    }
    setContainerVisible(visible) {
        if (this.containerElement) {
            if (visible) {
                this.containerElement.style.visibility = 'visible';
                this.containerElement.style.opacity = '1';
            }
            else {
                this.containerElement.style.visibility = 'hidden';
                this.containerElement.style.opacity = '0';
            }
        }
    }
    /**
     * Updates the `containerElement` under the given `context` before it becomes visible.
     *
     * Subclasses may override this method to, for instance, modifying the position of the
     * `containerElement`, add or remove elements, etc. depending on the specified `root`
     * or `contextElementIds`.
     */
    onBeforeShow(containerElement, root, ...contextElementIds) {
        // default: do nothing
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], AbstractUIExtension.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], AbstractUIExtension.prototype, "logger", void 0);
AbstractUIExtension = __decorate([
    (0, inversify_1.injectable)()
], AbstractUIExtension);
exports.AbstractUIExtension = AbstractUIExtension;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/css-class-postprocessor.js":
/*!************************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/css-class-postprocessor.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CssClassPostprocessor = void 0;
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "./node_modules/sprotty-protocol/lib/utils/model-utils.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let CssClassPostprocessor = class CssClassPostprocessor {
    decorate(vnode, element) {
        if (element.cssClasses) {
            for (const cssClass of element.cssClasses)
                (0, vnode_utils_1.setClass)(vnode, cssClass, true);
        }
        // append model subtype as class
        const subType = (0, model_utils_1.getSubType)(element);
        if (subType && subType !== element.type) {
            (0, vnode_utils_1.setClass)(vnode, subType, true);
        }
        return vnode;
    }
    postUpdate() {
        // empty
    }
};
CssClassPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], CssClassPostprocessor);
exports.CssClassPostprocessor = CssClassPostprocessor;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/dom-helper.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/dom-helper.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DOMHelper = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
let DOMHelper = class DOMHelper {
    getPrefix() {
        const prefix = this.viewerOptions !== undefined && this.viewerOptions.baseDiv !== undefined ?
            this.viewerOptions.baseDiv + "_" : "";
        return prefix;
    }
    createUniqueDOMElementId(element) {
        return this.getPrefix() + element.id;
    }
    findSModelIdByDOMElement(element) {
        return element.id.replace(this.getPrefix(), '');
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], DOMHelper.prototype, "viewerOptions", void 0);
DOMHelper = __decorate([
    (0, inversify_1.injectable)()
], DOMHelper);
exports.DOMHelper = DOMHelper;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/id-postprocessor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/id-postprocessor.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IdPostprocessor = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const dom_helper_1 = __webpack_require__(/*! ./dom-helper */ "./node_modules/sprotty/lib/base/views/dom-helper.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
let IdPostprocessor = class IdPostprocessor {
    decorate(vnode, element) {
        const attrs = (0, vnode_utils_1.getAttrs)(vnode);
        if (attrs.id !== undefined)
            this.logger.warn(vnode, 'Overriding id of vnode (' + attrs.id + '). Make sure not to set it manually in view.');
        attrs.id = this.domHelper.createUniqueDOMElementId(element);
        if (!vnode.key)
            vnode.key = element.id;
        return vnode;
    }
    postUpdate() {
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], IdPostprocessor.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.DOMHelper),
    __metadata("design:type", dom_helper_1.DOMHelper)
], IdPostprocessor.prototype, "domHelper", void 0);
IdPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], IdPostprocessor);
exports.IdPostprocessor = IdPostprocessor;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/key-tool.js":
/*!*********************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/key-tool.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyListener = exports.KeyTool = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ../model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
let KeyTool = class KeyTool {
    constructor(keyListeners = []) {
        this.keyListeners = keyListeners;
    }
    register(keyListener) {
        this.keyListeners.push(keyListener);
    }
    deregister(keyListener) {
        const index = this.keyListeners.indexOf(keyListener);
        if (index >= 0)
            this.keyListeners.splice(index, 1);
    }
    handleEvent(methodName, model, event) {
        const actions = this.keyListeners
            .map(listener => listener[methodName].apply(listener, [model, event]))
            .reduce((a, b) => a.concat(b));
        if (actions.length > 0) {
            event.preventDefault();
            this.actionDispatcher.dispatchAll(actions);
        }
    }
    keyDown(element, event) {
        this.handleEvent('keyDown', element, event);
    }
    keyUp(element, event) {
        this.handleEvent('keyUp', element, event);
    }
    focus() { }
    decorate(vnode, element) {
        if (element instanceof smodel_1.SModelRoot) {
            (0, vnode_utils_1.on)(vnode, 'focus', this.focus.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'keydown', this.keyDown.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'keyup', this.keyUp.bind(this, element));
        }
        return vnode;
    }
    postUpdate() {
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], KeyTool.prototype, "actionDispatcher", void 0);
KeyTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.KeyListener)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], KeyTool);
exports.KeyTool = KeyTool;
let KeyListener = class KeyListener {
    keyDown(element, event) {
        return [];
    }
    keyUp(element, event) {
        return [];
    }
};
KeyListener = __decorate([
    (0, inversify_1.injectable)()
], KeyListener);
exports.KeyListener = KeyListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/mouse-tool.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/mouse-tool.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MousePositionTracker = exports.MouseListener = exports.PopupMouseTool = exports.MouseTool = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const smodel_1 = __webpack_require__(/*! ../model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const dom_helper_1 = __webpack_require__(/*! ./dom-helper */ "./node_modules/sprotty/lib/base/views/dom-helper.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
let MouseTool = class MouseTool {
    constructor(mouseListeners = []) {
        this.mouseListeners = mouseListeners;
    }
    register(mouseListener) {
        this.mouseListeners.push(mouseListener);
    }
    deregister(mouseListener) {
        const index = this.mouseListeners.indexOf(mouseListener);
        if (index >= 0)
            this.mouseListeners.splice(index, 1);
    }
    getTargetElement(model, event) {
        let target = event.target;
        const index = model.index;
        while (target) {
            if (target.id) {
                const element = index.getById(this.domHelper.findSModelIdByDOMElement(target));
                if (element !== undefined)
                    return element;
            }
            target = target.parentNode;
        }
        return undefined;
    }
    handleEvent(methodName, model, event) {
        this.focusOnMouseEvent(methodName, model);
        const element = this.getTargetElement(model, event);
        if (!element)
            return;
        const actions = this.mouseListeners
            .map(listener => listener[methodName](element, event))
            .reduce((a, b) => a.concat(b));
        if (actions.length > 0) {
            event.preventDefault();
            for (const actionOrPromise of actions) {
                if ((0, actions_1.isAction)(actionOrPromise)) {
                    this.actionDispatcher.dispatch(actionOrPromise);
                }
                else {
                    actionOrPromise.then((action) => {
                        this.actionDispatcher.dispatch(action);
                    });
                }
            }
        }
    }
    focusOnMouseEvent(methodName, model) {
        if (document && methodName === 'mouseDown') {
            const domElement = document.getElementById(this.domHelper.createUniqueDOMElementId(model));
            if (domElement !== null && typeof domElement.focus === 'function')
                domElement.focus();
        }
    }
    mouseOver(model, event) {
        this.handleEvent('mouseOver', model, event);
    }
    mouseOut(model, event) {
        this.handleEvent('mouseOut', model, event);
    }
    mouseEnter(model, event) {
        this.handleEvent('mouseEnter', model, event);
    }
    mouseLeave(model, event) {
        this.handleEvent('mouseLeave', model, event);
    }
    mouseDown(model, event) {
        this.handleEvent('mouseDown', model, event);
    }
    mouseMove(model, event) {
        this.handleEvent('mouseMove', model, event);
    }
    mouseUp(model, event) {
        this.handleEvent('mouseUp', model, event);
    }
    wheel(model, event) {
        this.handleEvent('wheel', model, event);
    }
    contextMenu(model, event) {
        event.preventDefault();
        this.handleEvent('contextMenu', model, event);
    }
    doubleClick(model, event) {
        this.handleEvent('doubleClick', model, event);
    }
    decorate(vnode, element) {
        if (element instanceof smodel_1.SModelRoot) {
            (0, vnode_utils_1.on)(vnode, 'mouseover', this.mouseOver.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mouseout', this.mouseOut.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mouseenter', this.mouseEnter.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mouseleave', this.mouseLeave.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mousedown', this.mouseDown.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mouseup', this.mouseUp.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'mousemove', this.mouseMove.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'wheel', this.wheel.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'contextmenu', this.contextMenu.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'dblclick', this.doubleClick.bind(this, element));
            (0, vnode_utils_1.on)(vnode, 'dragover', (event) => this.handleEvent('dragOver', element, event));
            (0, vnode_utils_1.on)(vnode, 'drop', (event) => this.handleEvent('drop', element, event));
        }
        vnode = this.mouseListeners.reduce((n, listener) => listener.decorate(n, element), vnode);
        return vnode;
    }
    postUpdate() {
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], MouseTool.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.DOMHelper),
    __metadata("design:type", dom_helper_1.DOMHelper)
], MouseTool.prototype, "domHelper", void 0);
MouseTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.MouseListener)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], MouseTool);
exports.MouseTool = MouseTool;
let PopupMouseTool = class PopupMouseTool extends MouseTool {
    constructor(mouseListeners = []) {
        super(mouseListeners);
        this.mouseListeners = mouseListeners;
    }
};
PopupMouseTool = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.PopupMouseListener)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], PopupMouseTool);
exports.PopupMouseTool = PopupMouseTool;
let MouseListener = class MouseListener {
    mouseOver(target, event) {
        return [];
    }
    mouseOut(target, event) {
        return [];
    }
    mouseEnter(target, event) {
        return [];
    }
    mouseLeave(target, event) {
        return [];
    }
    mouseDown(target, event) {
        return [];
    }
    mouseMove(target, event) {
        return [];
    }
    mouseUp(target, event) {
        return [];
    }
    wheel(target, event) {
        return [];
    }
    doubleClick(target, event) {
        return [];
    }
    contextMenu(target, event) {
        return [];
    }
    dragOver(target, event) {
        return [];
    }
    drop(target, event) {
        return [];
    }
    decorate(vnode, element) {
        return vnode;
    }
};
MouseListener = __decorate([
    (0, inversify_1.injectable)()
], MouseListener);
exports.MouseListener = MouseListener;
let MousePositionTracker = class MousePositionTracker extends MouseListener {
    mouseMove(target, event) {
        this.lastPosition = target.root.parentToLocal({ x: event.offsetX, y: event.offsetY });
        return [];
    }
    /**
     * Returns the last tracked mouse cursor position relative to the diagram root or `undefined`
     * if no mouse cursor position was ever tracked yet.
     */
    get lastPositionOnDiagram() {
        return this.lastPosition;
    }
};
MousePositionTracker = __decorate([
    (0, inversify_1.injectable)()
], MousePositionTracker);
exports.MousePositionTracker = MousePositionTracker;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/thunk-view.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/thunk-view.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isThunk = exports.ThunkView = void 0;
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "./node_modules/snabbdom/build/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
/**
 * An view that avoids calculation and patching of VNodes unless some model properties have changed.
 * Based on snabbdom's thunks.
 */
let ThunkView = class ThunkView {
    render(model, context) {
        return (0, snabbdom_1.h)(this.selector(model), {
            key: model.id,
            hook: {
                init: this.init.bind(this),
                prepatch: this.prepatch.bind(this)
            },
            fn: () => this.renderAndDecorate(model, context),
            args: this.watchedArgs(model),
            thunk: true
        });
    }
    renderAndDecorate(model, context) {
        const vnode = this.doRender(model, context);
        context.decorate(vnode, model);
        return vnode;
    }
    copyToThunk(vnode, thunk) {
        thunk.elm = vnode.elm;
        vnode.data.fn = thunk.data.fn;
        vnode.data.args = thunk.data.args;
        thunk.data = vnode.data;
        thunk.children = vnode.children;
        thunk.text = vnode.text;
        thunk.elm = vnode.elm;
    }
    init(thunk) {
        const cur = thunk.data;
        const vnode = cur.fn.apply(undefined, cur.args);
        this.copyToThunk(vnode, thunk);
    }
    prepatch(oldVnode, thunk) {
        const old = oldVnode.data, cur = thunk.data;
        if (!this.equals(old.args, cur.args))
            this.copyToThunk(cur.fn.apply(undefined, cur.args), thunk);
        else
            this.copyToThunk(oldVnode, thunk);
    }
    equals(oldArg, newArg) {
        if (Array.isArray(oldArg) && Array.isArray(newArg)) {
            if (oldArg.length !== newArg.length)
                return false;
            for (let i = 0; i < newArg.length; ++i) {
                if (!this.equals(oldArg[i], newArg[i]))
                    return false;
            }
        }
        else if (typeof oldArg === 'object' && typeof newArg === 'object') {
            if (Object.keys(oldArg).length !== Object.keys(newArg).length)
                return false;
            for (const key in oldArg) {
                if (key !== 'parent' && key !== 'root' && (!(key in newArg) || !this.equals(oldArg[key], newArg[key])))
                    return false;
            }
        }
        else if (oldArg !== newArg) {
            return false;
        }
        return true;
    }
};
ThunkView = __decorate([
    (0, inversify_1.injectable)()
], ThunkView);
exports.ThunkView = ThunkView;
function isThunk(vnode) {
    return 'thunk' in vnode;
}
exports.isThunk = isThunk;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/view.js":
/*!*****************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/view.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MissingView = exports.EmptyView = exports.configureView = exports.configureModelElement = exports.ViewRegistry = exports.findArgValue = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "./node_modules/sprotty/lib/utils/registry.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "./node_modules/sprotty/lib/utils/inversify.js");
const smodel_factory_1 = __webpack_require__(/*! ../model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js");
const smodel_utils_1 = __webpack_require__(/*! ../model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "./node_modules/sprotty-protocol/lib/index.js");
/**
 * Searches for the property specified in `key` in the specified `args`,
 * including its direct or indirect `IRenderingArgs#parentArgs`.
 *
 * @param arg the rendering arguments.
 * @param key the key to search for.
 * @returns the found value or `undefined.
 */
function findArgValue(arg, key) {
    while (arg !== undefined && !(key in arg) && arg.parentArgs) {
        arg = arg.parentArgs;
    }
    return arg ? arg[key] : undefined;
}
exports.findArgValue = findArgValue;
/**
 * Allows to look up the IView for a given SModelElement based on its type.
 */
let ViewRegistry = class ViewRegistry extends registry_1.InstanceRegistry {
    constructor(registrations) {
        super();
        this.registerDefaults();
        registrations.forEach(registration => this.register(registration.type, registration.factory()));
    }
    registerDefaults() {
        this.register(smodel_factory_1.EMPTY_ROOT.type, new EmptyView());
    }
    missing(key) {
        return new MissingView();
    }
};
ViewRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.ViewRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], ViewRegistry);
exports.ViewRegistry = ViewRegistry;
/**
 * Combines `registerModelElement` and `configureView`.
 */
function configureModelElement(context, type, modelConstr, viewConstr, features) {
    (0, smodel_utils_1.registerModelElement)(context, type, modelConstr, features);
    configureView(context, type, viewConstr);
}
exports.configureModelElement = configureModelElement;
/**
 * Utility function to register a view for a model element type.
 */
function configureView(context, type, constr) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Views should be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.ViewRegistration).toDynamicValue(ctx => ({
        type,
        factory: () => ctx.container.get(constr)
    }));
}
exports.configureView = configureView;
/**
 * This view is used when the model is the EMPTY_ROOT.
 */
let EmptyView = class EmptyView {
    render(model, context) {
        return (0, jsx_1.svg)("svg", { "class-sprotty-empty": true });
    }
};
EmptyView = __decorate([
    (0, inversify_1.injectable)()
], EmptyView);
exports.EmptyView = EmptyView;
/**
 * This view is used when no view has been registered for a model element type.
 */
let MissingView = class MissingView {
    render(model, context) {
        const position = model.position || sprotty_protocol_1.Point.ORIGIN;
        return (0, jsx_1.svg)("text", { "class-sprotty-missing": true, x: position.x, y: position.y },
            "?",
            model.id,
            "?");
    }
};
MissingView = __decorate([
    (0, inversify_1.injectable)()
], MissingView);
exports.MissingView = MissingView;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/viewer-cache.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/viewer-cache.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewerCache = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const animation_frame_syncer_1 = __webpack_require__(/*! ../animations/animation-frame-syncer */ "./node_modules/sprotty/lib/base/animations/animation-frame-syncer.js");
/**
 * Updating the view is rather expensive, and it doesn't make sense to calculate
 * more then one update per animation (rendering) frame. So this class batches
 * all incoming model changes and only renders the last one when the next animation
 * frame comes.
 */
let ViewerCache = class ViewerCache {
    update(model, cause) {
        if (cause !== undefined) {
            // Forward the update immediately in order to pass the cause action
            this.delegate.update(model, cause);
            this.cachedModel = undefined;
        }
        else {
            const isCacheEmpty = this.cachedModel === undefined;
            this.cachedModel = model;
            if (isCacheEmpty) {
                this.scheduleUpdate();
            }
        }
    }
    scheduleUpdate() {
        this.syncer.onEndOfNextFrame(() => {
            if (this.cachedModel) {
                this.delegate.update(this.cachedModel);
                this.cachedModel = undefined;
            }
        });
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IViewer),
    __metadata("design:type", Object)
], ViewerCache.prototype, "delegate", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.AnimationFrameSyncer),
    __metadata("design:type", animation_frame_syncer_1.AnimationFrameSyncer)
], ViewerCache.prototype, "syncer", void 0);
ViewerCache = __decorate([
    (0, inversify_1.injectable)()
], ViewerCache);
exports.ViewerCache = ViewerCache;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/viewer-options.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/viewer-options.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.overrideViewerOptions = exports.configureViewerOptions = exports.defaultViewerOptions = void 0;
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "./node_modules/sprotty-protocol/lib/utils/object.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const defaultViewerOptions = () => ({
    baseDiv: 'sprotty',
    baseClass: 'sprotty',
    hiddenDiv: 'sprotty-hidden',
    hiddenClass: 'sprotty-hidden',
    popupDiv: 'sprotty-popup',
    popupClass: 'sprotty-popup',
    popupClosedClass: 'sprotty-popup-closed',
    needsClientLayout: true,
    needsServerLayout: false,
    popupOpenDelay: 1000,
    popupCloseDelay: 300
});
exports.defaultViewerOptions = defaultViewerOptions;
/**
 * Utility function to partially set viewer options. Default values (from `defaultViewerOptions`) are used for
 * options that are not specified.
 */
function configureViewerOptions(context, options) {
    const opt = Object.assign(Object.assign({}, (0, exports.defaultViewerOptions)()), options);
    if (context.isBound(types_1.TYPES.ViewerOptions))
        context.rebind(types_1.TYPES.ViewerOptions).toConstantValue(opt);
    else
        context.bind(types_1.TYPES.ViewerOptions).toConstantValue(opt);
}
exports.configureViewerOptions = configureViewerOptions;
/**
 * Utility function to partially override the currently configured viewer options in a DI container.
 */
function overrideViewerOptions(container, options) {
    const opt = container.get(types_1.TYPES.ViewerOptions);
    (0, object_1.safeAssign)(opt, options);
    return opt;
}
exports.overrideViewerOptions = overrideViewerOptions;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/viewer.js":
/*!*******************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/viewer.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupModelViewer = exports.HiddenModelViewer = exports.ModelViewer = exports.PatcherProvider = exports.ModelRenderer = void 0;
/** @jsx html */
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "./node_modules/snabbdom/build/index.js");
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "./node_modules/sprotty/lib/lib/jsx.js"); // must be html here, as we're creating a div
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sprotty/lib/utils/browser.js");
const initialize_canvas_1 = __webpack_require__(/*! ../features/initialize-canvas */ "./node_modules/sprotty/lib/base/features/initialize-canvas.js");
const smodel_factory_1 = __webpack_require__(/*! ../model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js");
const types_1 = __webpack_require__(/*! ../types */ "./node_modules/sprotty/lib/base/types.js");
const thunk_view_1 = __webpack_require__(/*! ./thunk-view */ "./node_modules/sprotty/lib/base/views/thunk-view.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
class ModelRenderer {
    constructor(viewRegistry, targetKind, postprocessors, args = {}) {
        this.viewRegistry = viewRegistry;
        this.targetKind = targetKind;
        this.postprocessors = postprocessors;
        this.args = args;
    }
    decorate(vnode, element) {
        if ((0, thunk_view_1.isThunk)(vnode)) {
            return vnode;
        }
        return this.postprocessors.reduce((n, processor) => processor.decorate(n, element), vnode);
    }
    renderElement(element) {
        const view = this.viewRegistry.get(element.type);
        const vnode = view.render(element, this, this.args);
        if (vnode) {
            return this.decorate(vnode, element);
        }
        else {
            return undefined;
        }
    }
    renderChildren(element, args) {
        const context = args ?
            new ModelRenderer(this.viewRegistry, this.targetKind, this.postprocessors, Object.assign(Object.assign({}, args), { parentArgs: this.args })) : this;
        return element.children
            .map(child => context.renderElement(child))
            .filter(vnode => vnode !== undefined);
    }
    postUpdate(cause) {
        this.postprocessors.forEach(processor => processor.postUpdate(cause));
    }
}
exports.ModelRenderer = ModelRenderer;
let PatcherProvider = class PatcherProvider {
    constructor() {
        this.patcher = (0, snabbdom_1.init)(this.createModules());
    }
    createModules() {
        return [
            snabbdom_1.propsModule,
            snabbdom_1.attributesModule,
            snabbdom_1.classModule,
            snabbdom_1.styleModule,
            snabbdom_1.eventListenersModule
        ];
    }
};
PatcherProvider = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], PatcherProvider);
exports.PatcherProvider = PatcherProvider;
/**
 * The component that turns the model into an SVG DOM.
 * Uses a VDOM based on snabbdom.js for performance.
 */
let ModelViewer = class ModelViewer {
    constructor(modelRendererFactory, patcherProvider, postprocessors) {
        this.renderer = modelRendererFactory('main', postprocessors);
        this.patcher = patcherProvider.patcher;
    }
    update(model, cause) {
        this.logger.log(this, 'rendering', model);
        const newVDOM = (0, jsx_1.html)("div", { id: this.options.baseDiv }, this.renderer.renderElement(model));
        if (this.lastVDOM !== undefined) {
            const hadFocus = this.hasFocus();
            (0, vnode_utils_1.copyClassesFromVNode)(this.lastVDOM, newVDOM);
            this.lastVDOM = this.patcher.call(this, this.lastVDOM, newVDOM);
            this.restoreFocus(hadFocus);
        }
        else if (typeof document !== 'undefined') {
            const placeholder = document.getElementById(this.options.baseDiv);
            if (placeholder !== null) {
                if (typeof window !== 'undefined') {
                    window.addEventListener('resize', () => {
                        this.onWindowResize(newVDOM);
                    });
                }
                (0, vnode_utils_1.copyClassesFromElement)(placeholder, newVDOM);
                (0, vnode_utils_1.setClass)(newVDOM, this.options.baseClass, true);
                this.lastVDOM = this.patcher.call(this, placeholder, newVDOM);
            }
            else {
                this.logger.error(this, 'element not in DOM:', this.options.baseDiv);
            }
        }
        this.renderer.postUpdate(cause);
    }
    hasFocus() {
        if (typeof document !== 'undefined' && document.activeElement && this.lastVDOM.children && this.lastVDOM.children.length > 0) {
            const lastRootVNode = this.lastVDOM.children[0];
            if (typeof lastRootVNode === 'object') {
                const lastElement = lastRootVNode.elm;
                return document.activeElement === lastElement;
            }
        }
        return false;
    }
    restoreFocus(focus) {
        if (focus && this.lastVDOM.children && this.lastVDOM.children.length > 0) {
            const lastRootVNode = this.lastVDOM.children[0];
            if (typeof lastRootVNode === 'object') {
                const lastElement = lastRootVNode.elm;
                if (lastElement && typeof lastElement.focus === 'function')
                    lastElement.focus();
            }
        }
    }
    onWindowResize(vdom) {
        const baseDiv = document.getElementById(this.options.baseDiv);
        if (baseDiv !== null) {
            const newBounds = this.getBoundsInPage(baseDiv);
            this.actiondispatcher.dispatch(initialize_canvas_1.InitializeCanvasBoundsAction.create(newBounds));
        }
    }
    getBoundsInPage(element) {
        const bounds = element.getBoundingClientRect();
        const scroll = (0, browser_1.getWindowScroll)();
        return {
            x: bounds.left + scroll.x,
            y: bounds.top + scroll.y,
            width: bounds.width,
            height: bounds.height
        };
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ModelViewer.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], ModelViewer.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ModelViewer.prototype, "actiondispatcher", void 0);
ModelViewer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.ModelRendererFactory)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.PatcherProvider)),
    __param(2, (0, inversify_1.multiInject)(types_1.TYPES.IVNodePostprocessor)),
    __param(2, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Function, PatcherProvider, Array])
], ModelViewer);
exports.ModelViewer = ModelViewer;
/**
 * Viewer for the _hidden_ model. This serves as an intermediate step to compute bounds
 * of elements. The model is rendered in a section that is not visible to the user,
 * and then the bounds are extracted from the DOM.
 */
let HiddenModelViewer = class HiddenModelViewer {
    constructor(modelRendererFactory, patcherProvider, hiddenPostprocessors) {
        this.hiddenRenderer = modelRendererFactory('hidden', hiddenPostprocessors);
        this.patcher = patcherProvider.patcher;
    }
    update(hiddenModel, cause) {
        this.logger.log(this, 'rendering hidden');
        let newVDOM;
        if (hiddenModel.type === smodel_factory_1.EMPTY_ROOT.type) {
            newVDOM = (0, jsx_1.html)("div", { id: this.options.hiddenDiv });
        }
        else {
            const hiddenVNode = this.hiddenRenderer.renderElement(hiddenModel);
            if (hiddenVNode) {
                (0, vnode_utils_1.setAttr)(hiddenVNode, 'opacity', 0);
            }
            newVDOM = (0, jsx_1.html)("div", { id: this.options.hiddenDiv }, hiddenVNode);
        }
        if (this.lastHiddenVDOM !== undefined) {
            (0, vnode_utils_1.copyClassesFromVNode)(this.lastHiddenVDOM, newVDOM);
            this.lastHiddenVDOM = this.patcher.call(this, this.lastHiddenVDOM, newVDOM);
        }
        else {
            let placeholder = document.getElementById(this.options.hiddenDiv);
            if (placeholder === null) {
                placeholder = document.createElement('div');
                document.body.appendChild(placeholder);
            }
            else {
                (0, vnode_utils_1.copyClassesFromElement)(placeholder, newVDOM);
            }
            (0, vnode_utils_1.setClass)(newVDOM, this.options.baseClass, true);
            (0, vnode_utils_1.setClass)(newVDOM, this.options.hiddenClass, true);
            this.lastHiddenVDOM = this.patcher.call(this, placeholder, newVDOM);
        }
        this.hiddenRenderer.postUpdate(cause);
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], HiddenModelViewer.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], HiddenModelViewer.prototype, "logger", void 0);
HiddenModelViewer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.ModelRendererFactory)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.PatcherProvider)),
    __param(2, (0, inversify_1.multiInject)(types_1.TYPES.HiddenVNodePostprocessor)),
    __param(2, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Function, PatcherProvider, Array])
], HiddenModelViewer);
exports.HiddenModelViewer = HiddenModelViewer;
let PopupModelViewer = class PopupModelViewer {
    constructor(modelRendererFactory, patcherProvider, popupPostprocessors) {
        this.modelRendererFactory = modelRendererFactory;
        this.popupRenderer = this.modelRendererFactory('popup', popupPostprocessors);
        this.patcher = patcherProvider.patcher;
    }
    update(model, cause) {
        this.logger.log(this, 'rendering popup', model);
        const popupClosed = model.type === smodel_factory_1.EMPTY_ROOT.type;
        let newVDOM;
        if (popupClosed) {
            newVDOM = (0, jsx_1.html)("div", { id: this.options.popupDiv });
        }
        else {
            const position = model.canvasBounds;
            const inlineStyle = {
                top: position.y + 'px',
                left: position.x + 'px'
            };
            newVDOM = (0, jsx_1.html)("div", { id: this.options.popupDiv, style: inlineStyle }, this.popupRenderer.renderElement(model));
        }
        if (this.lastPopupVDOM !== undefined) {
            (0, vnode_utils_1.copyClassesFromVNode)(this.lastPopupVDOM, newVDOM);
            (0, vnode_utils_1.setClass)(newVDOM, this.options.popupClosedClass, popupClosed);
            this.lastPopupVDOM = this.patcher.call(this, this.lastPopupVDOM, newVDOM);
        }
        else if (typeof document !== 'undefined') {
            let placeholder = document.getElementById(this.options.popupDiv);
            if (placeholder === null) {
                placeholder = document.createElement('div');
                document.body.appendChild(placeholder);
            }
            else {
                (0, vnode_utils_1.copyClassesFromElement)(placeholder, newVDOM);
            }
            (0, vnode_utils_1.setClass)(newVDOM, this.options.popupClass, true);
            (0, vnode_utils_1.setClass)(newVDOM, this.options.popupClosedClass, popupClosed);
            this.lastPopupVDOM = this.patcher.call(this, placeholder, newVDOM);
        }
        this.popupRenderer.postUpdate(cause);
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], PopupModelViewer.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], PopupModelViewer.prototype, "logger", void 0);
PopupModelViewer = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.ModelRendererFactory)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.PatcherProvider)),
    __param(2, (0, inversify_1.multiInject)(types_1.TYPES.PopupVNodePostprocessor)),
    __param(2, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Function, PatcherProvider, Array])
], PopupModelViewer);
exports.PopupModelViewer = PopupModelViewer;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/vnode-postprocessor.js":
/*!********************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/vnode-postprocessor.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FocusFixPostprocessor = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const vnode_utils_1 = __webpack_require__(/*! ./vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
let FocusFixPostprocessor = class FocusFixPostprocessor {
    decorate(vnode, element) {
        if (vnode.sel && vnode.sel.startsWith('svg'))
            // allows to set focus in Firefox
            (0, vnode_utils_1.setAttr)(vnode, 'tabindex', 0);
        return vnode;
    }
    postUpdate() {
    }
};
FocusFixPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], FocusFixPostprocessor);
exports.FocusFixPostprocessor = FocusFixPostprocessor;


/***/ }),

/***/ "./node_modules/sprotty/lib/base/views/vnode-utils.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/base/views/vnode-utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getAttrs = exports.on = exports.mergeStyle = exports.copyClassesFromElement = exports.copyClassesFromVNode = exports.setNamespace = exports.setClass = exports.setAttr = void 0;
function setAttr(vnode, name, value) {
    getAttrs(vnode)[name] = value;
}
exports.setAttr = setAttr;
function setClass(vnode, name, value) {
    getClass(vnode)[name] = value;
}
exports.setClass = setClass;
function setNamespace(node, ns) {
    if (node.data === undefined)
        node.data = {};
    node.data.ns = ns;
    const children = node.children;
    if (children !== undefined) {
        for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (typeof child !== 'string')
                setNamespace(child, ns);
        }
    }
}
exports.setNamespace = setNamespace;
function copyClassesFromVNode(source, target) {
    const classList = getClass(source);
    Object.keys(classList).forEach(c => setClass(target, c, true));
}
exports.copyClassesFromVNode = copyClassesFromVNode;
function copyClassesFromElement(element, target) {
    const classList = element.classList;
    for (let i = 0; i < classList.length; i++) {
        const item = classList.item(i);
        if (item)
            setClass(target, item, true);
    }
}
exports.copyClassesFromElement = copyClassesFromElement;
function mergeStyle(vnode, style) {
    getData(vnode).style = Object.assign(Object.assign({}, (getData(vnode).style || {})), style);
}
exports.mergeStyle = mergeStyle;
function on(vnode, event, listener) {
    const val = getOn(vnode);
    if (val[event]) {
        throw new Error('EventListener for ' + event + ' already registered on VNode');
    }
    val[event] = listener;
}
exports.on = on;
function getAttrs(vnode) {
    const data = getData(vnode);
    if (!data.attrs)
        data.attrs = {};
    return data.attrs;
}
exports.getAttrs = getAttrs;
function getData(vnode) {
    if (!vnode.data)
        vnode.data = {};
    return vnode.data;
}
function getClass(vnode) {
    const data = getData(vnode);
    if (!data.class)
        data.class = {};
    return data.class;
}
function getOn(vnode) {
    const data = getData(vnode);
    if (!data.on)
        data.on = {};
    return data.on;
}


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/abstract-layout.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/abstract-layout.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractLayout = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let AbstractLayout = class AbstractLayout {
    layout(container, layouter) {
        const boundsData = layouter.getBoundsData(container);
        const options = this.getLayoutOptions(container);
        const childrenSize = this.getChildrenSize(container, options, layouter);
        const maxWidth = options.paddingFactor * (options.resizeContainer
            ? childrenSize.width
            : Math.max(0, this.getFixedContainerBounds(container, options, layouter).width) - options.paddingLeft - options.paddingRight);
        const maxHeight = options.paddingFactor * (options.resizeContainer
            ? childrenSize.height
            : Math.max(0, this.getFixedContainerBounds(container, options, layouter).height) - options.paddingTop - options.paddingBottom);
        if (maxWidth > 0 && maxHeight > 0) {
            const offset = this.layoutChildren(container, layouter, options, maxWidth, maxHeight);
            boundsData.bounds = this.getFinalContainerBounds(container, offset, options, maxWidth, maxHeight);
            boundsData.boundsChanged = true;
        }
    }
    getFinalContainerBounds(container, lastOffset, options, maxWidth, maxHeight) {
        return {
            x: container.bounds.x,
            y: container.bounds.y,
            width: Math.max(options.minWidth, maxWidth + options.paddingLeft + options.paddingRight),
            height: Math.max(options.minHeight, maxHeight + options.paddingTop + options.paddingBottom)
        };
    }
    getFixedContainerBounds(container, layoutOptions, layouter) {
        let currentContainer = container;
        while (true) {
            if ((0, model_1.isBoundsAware)(currentContainer)) {
                const bounds = currentContainer.bounds;
                if ((0, model_1.isLayoutContainer)(currentContainer) && layoutOptions.resizeContainer)
                    layouter.log.error(currentContainer, 'Resizable container found while detecting fixed bounds');
                if (geometry_1.Dimension.isValid(bounds))
                    return bounds;
            }
            if (currentContainer instanceof smodel_1.SChildElement) {
                currentContainer = currentContainer.parent;
            }
            else {
                layouter.log.error(currentContainer, 'Cannot detect fixed bounds');
                return geometry_1.Bounds.EMPTY;
            }
        }
    }
    layoutChildren(container, layouter, containerOptions, maxWidth, maxHeight) {
        let currentOffset = {
            x: containerOptions.paddingLeft + 0.5 * (maxWidth - (maxWidth / containerOptions.paddingFactor)),
            y: containerOptions.paddingTop + 0.5 * (maxHeight - (maxHeight / containerOptions.paddingFactor))
        };
        container.children.forEach(child => {
            if ((0, model_1.isLayoutableChild)(child)) {
                const boundsData = layouter.getBoundsData(child);
                const bounds = boundsData.bounds;
                const childOptions = this.getChildLayoutOptions(child, containerOptions);
                if (bounds !== undefined && geometry_1.Dimension.isValid(bounds)) {
                    currentOffset = this.layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight);
                }
            }
        });
        return currentOffset;
    }
    getDx(hAlign, bounds, maxWidth) {
        switch (hAlign) {
            case 'left':
                return 0;
            case 'center':
                return 0.5 * (maxWidth - bounds.width);
            case 'right':
                return maxWidth - bounds.width;
        }
    }
    getDy(vAlign, bounds, maxHeight) {
        switch (vAlign) {
            case 'top':
                return 0;
            case 'center':
                return 0.5 * (maxHeight - bounds.height);
            case 'bottom':
                return maxHeight - bounds.height;
        }
    }
    getChildLayoutOptions(child, containerOptions) {
        const layoutOptions = child.layoutOptions;
        if (layoutOptions === undefined)
            return containerOptions;
        else
            return this.spread(containerOptions, layoutOptions);
    }
    getLayoutOptions(element) {
        let current = element;
        const allOptions = [];
        while (current !== undefined) {
            const layoutOptions = current.layoutOptions;
            if (layoutOptions !== undefined)
                allOptions.push(layoutOptions);
            if (current instanceof smodel_1.SChildElement)
                current = current.parent;
            else
                break;
        }
        return allOptions.reverse().reduce((a, b) => { return this.spread(a, b); }, this.getDefaultLayoutOptions());
    }
};
AbstractLayout = __decorate([
    (0, inversify_1.injectable)()
], AbstractLayout);
exports.AbstractLayout = AbstractLayout;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/bounds-manipulation.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/bounds-manipulation.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RequestBoundsCommand = exports.SetBoundsCommand = exports.LayoutAction = exports.ComputedBoundsAction = exports.RequestBoundsAction = exports.SetBoundsAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const protocol = __importStar(__webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js"));
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/bounds/model.js");
/**
 * Sent from the model source (e.g. a DiagramServer) to the client to update the bounds of some
 * (or all) model elements.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class SetBoundsAction {
    constructor(bounds) {
        this.bounds = bounds;
        this.kind = SetBoundsAction.KIND;
    }
}
exports.SetBoundsAction = SetBoundsAction;
SetBoundsAction.KIND = 'setBounds';
/**
 * Sent from the model source to the client to request bounds for the given model. The model is
 * rendered invisibly so the bounds can derived from the DOM. The response is a ComputedBoundsAction.
 * This hidden rendering round-trip is necessary if the client is responsible for parts of the layout
 * (see `needsClientLayout` viewer option).
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class RequestBoundsAction {
    constructor(newRoot, requestId = '') {
        this.newRoot = newRoot;
        this.requestId = requestId;
        this.kind = RequestBoundsAction.KIND;
    }
    /** Factory function to dispatch a request with the `IActionDispatcher` */
    static create(newRoot) {
        return new RequestBoundsAction(newRoot, (0, actions_1.generateRequestId)());
    }
}
exports.RequestBoundsAction = RequestBoundsAction;
RequestBoundsAction.KIND = 'requestBounds';
/**
 * Sent from the client to the model source (e.g. a DiagramServer) to transmit the result of bounds
 * computation as a response to a RequestBoundsAction. If the server is responsible for parts of
 * the layout (see `needsServerLayout` viewer option), it can do so after applying the computed bounds
 * received with this action. Otherwise there is no need to send the computed bounds to the server,
 * so they can be processed locally by the client.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class ComputedBoundsAction {
    constructor(bounds, revision, alignments, responseId = '') {
        this.bounds = bounds;
        this.revision = revision;
        this.alignments = alignments;
        this.responseId = responseId;
        this.kind = ComputedBoundsAction.KIND;
    }
}
exports.ComputedBoundsAction = ComputedBoundsAction;
ComputedBoundsAction.KIND = 'computedBounds';
/**
 * Request a layout of the diagram or the selected elements only.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class LayoutAction {
    constructor() {
        this.kind = LayoutAction.KIND;
    }
}
exports.LayoutAction = LayoutAction;
LayoutAction.KIND = 'layout';
let SetBoundsCommand = class SetBoundsCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
        this.bounds = [];
    }
    execute(context) {
        this.action.bounds.forEach(b => {
            const element = context.root.index.getById(b.elementId);
            if (element && (0, model_1.isBoundsAware)(element)) {
                this.bounds.push({
                    element: element,
                    oldBounds: element.bounds,
                    newPosition: b.newPosition,
                    newSize: b.newSize
                });
            }
        });
        return this.redo(context);
    }
    undo(context) {
        this.bounds.forEach(b => b.element.bounds = b.oldBounds);
        return context.root;
    }
    redo(context) {
        this.bounds.forEach(b => {
            if (b.newPosition)
                b.element.bounds = Object.assign(Object.assign({}, b.newPosition), b.newSize);
            else
                // keep the position
                b.element.bounds = Object.assign({ x: b.element.bounds.x, y: b.element.bounds.y }, b.newSize);
        });
        return context.root;
    }
};
SetBoundsCommand.KIND = protocol.SetBoundsAction.KIND;
SetBoundsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetBoundsCommand);
exports.SetBoundsCommand = SetBoundsCommand;
let RequestBoundsCommand = class RequestBoundsCommand extends command_1.HiddenCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        return {
            model: context.modelFactory.createRoot(this.action.newRoot),
            modelChanged: true,
            cause: this.action
        };
    }
    get blockUntil() {
        return action => action.kind === ComputedBoundsAction.KIND;
    }
};
RequestBoundsCommand.KIND = protocol.RequestBoundsAction.KIND;
RequestBoundsCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], RequestBoundsCommand);
exports.RequestBoundsCommand = RequestBoundsCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/di.config.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/di.config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const bounds_manipulation_1 = __webpack_require__(/*! ./bounds-manipulation */ "./node_modules/sprotty/lib/features/bounds/bounds-manipulation.js");
const hidden_bounds_updater_1 = __webpack_require__(/*! ./hidden-bounds-updater */ "./node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js");
const layout_1 = __webpack_require__(/*! ./layout */ "./node_modules/sprotty/lib/features/bounds/layout.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const hbox_layout_1 = __webpack_require__(/*! ./hbox-layout */ "./node_modules/sprotty/lib/features/bounds/hbox-layout.js");
const vbox_layout_1 = __webpack_require__(/*! ./vbox-layout */ "./node_modules/sprotty/lib/features/bounds/vbox-layout.js");
const stack_layout_1 = __webpack_require__(/*! ./stack-layout */ "./node_modules/sprotty/lib/features/bounds/stack-layout.js");
const boundsModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, bounds_manipulation_1.SetBoundsCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, bounds_manipulation_1.RequestBoundsCommand);
    bind(hidden_bounds_updater_1.HiddenBoundsUpdater).toSelf().inSingletonScope();
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(hidden_bounds_updater_1.HiddenBoundsUpdater);
    bind(types_1.TYPES.Layouter).to(layout_1.Layouter).inSingletonScope();
    bind(types_1.TYPES.LayoutRegistry).to(layout_1.LayoutRegistry).inSingletonScope();
    (0, layout_1.configureLayout)({ bind, isBound }, vbox_layout_1.VBoxLayouter.KIND, vbox_layout_1.VBoxLayouter);
    (0, layout_1.configureLayout)({ bind, isBound }, hbox_layout_1.HBoxLayouter.KIND, hbox_layout_1.HBoxLayouter);
    (0, layout_1.configureLayout)({ bind, isBound }, stack_layout_1.StackLayouter.KIND, stack_layout_1.StackLayouter);
});
exports["default"] = boundsModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/hbox-layout.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/hbox-layout.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HBoxLayouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const abstract_layout_1 = __webpack_require__(/*! ./abstract-layout */ "./node_modules/sprotty/lib/features/bounds/abstract-layout.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/bounds/model.js");
/**
 * Layouts children of a container in horizontal (left->right) direction.
 */
let HBoxLayouter = class HBoxLayouter extends abstract_layout_1.AbstractLayout {
    getChildrenSize(container, containerOptions, layouter) {
        let maxWidth = 0;
        let maxHeight = -1;
        let isFirst = true;
        container.children.forEach(child => {
            if ((0, model_1.isLayoutableChild)(child)) {
                const bounds = layouter.getBoundsData(child).bounds;
                if (bounds !== undefined && geometry_1.Dimension.isValid(bounds)) {
                    if (isFirst)
                        isFirst = false;
                    else
                        maxWidth += containerOptions.hGap;
                    maxWidth += bounds.width;
                    maxHeight = Math.max(maxHeight, bounds.height);
                }
            }
        });
        return {
            width: maxWidth,
            height: maxHeight
        };
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight) {
        const dy = this.getDy(childOptions.vAlign, bounds, maxHeight);
        boundsData.bounds = {
            x: currentOffset.x + child.bounds.x - bounds.x,
            y: containerOptions.paddingTop + child.bounds.y - bounds.y + dy,
            width: bounds.width,
            height: bounds.height
        };
        boundsData.boundsChanged = true;
        return {
            x: currentOffset.x + bounds.width + containerOptions.hGap,
            y: currentOffset.y
        };
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 5,
            paddingBottom: 5,
            paddingLeft: 5,
            paddingRight: 5,
            paddingFactor: 1,
            hGap: 1,
            vAlign: 'center',
            minWidth: 0,
            minHeight: 0
        };
    }
    spread(a, b) {
        return Object.assign(Object.assign({}, a), b);
    }
};
HBoxLayouter.KIND = 'hbox';
HBoxLayouter = __decorate([
    (0, inversify_1.injectable)()
], HBoxLayouter);
exports.HBoxLayouter = HBoxLayouter;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js":
/*!***************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HiddenBoundsUpdater = exports.BoundsData = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const layout_1 = __webpack_require__(/*! ./layout */ "./node_modules/sprotty/lib/features/bounds/layout.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/bounds/model.js");
class BoundsData {
}
exports.BoundsData = BoundsData;
/**
 * Grabs the bounds from hidden SVG DOM elements, applies layouts and fires
 * ComputedBoundsActions.
 *
 * The actual bounds of an element can usually not be determined from the SModel
 * as they depend on the view implementation and CSS stylings. So the best way is
 * to grab them from a live (but hidden) SVG using getBBox().
 *
 * If an element is Alignable, and the top-left corner of its bounding box is not
 * the origin, we also issue a realign with the ComputedBoundsAction.
 */
let HiddenBoundsUpdater = class HiddenBoundsUpdater {
    constructor() {
        this.element2boundsData = new Map;
    }
    decorate(vnode, element) {
        if ((0, model_1.isSizeable)(element) || (0, model_1.isLayoutContainer)(element)) {
            this.element2boundsData.set(element, {
                vnode: vnode,
                bounds: element.bounds,
                boundsChanged: false,
                alignmentChanged: false
            });
        }
        if (element instanceof smodel_1.SModelRoot)
            this.root = element;
        return vnode;
    }
    postUpdate(cause) {
        if (cause === undefined || cause.kind !== actions_1.RequestBoundsAction.KIND) {
            return;
        }
        const request = cause;
        this.getBoundsFromDOM();
        this.layouter.layout(this.element2boundsData);
        const resizes = [];
        const alignments = [];
        this.element2boundsData.forEach((boundsData, element) => {
            if (boundsData.boundsChanged && boundsData.bounds !== undefined) {
                const resize = {
                    elementId: element.id,
                    newSize: {
                        width: boundsData.bounds.width,
                        height: boundsData.bounds.height
                    }
                };
                // don't copy position if the element is layouted by the server
                if (element instanceof smodel_1.SChildElement && (0, model_1.isLayoutContainer)(element.parent)) {
                    resize.newPosition = {
                        x: boundsData.bounds.x,
                        y: boundsData.bounds.y,
                    };
                }
                resizes.push(resize);
            }
            if (boundsData.alignmentChanged && boundsData.alignment !== undefined) {
                alignments.push({
                    elementId: element.id,
                    newAlignment: boundsData.alignment
                });
            }
        });
        const revision = (this.root !== undefined) ? this.root.revision : undefined;
        this.actionDispatcher.dispatch(actions_1.ComputedBoundsAction.create(resizes, { revision, alignments, requestId: request.requestId }));
        this.element2boundsData.clear();
    }
    getBoundsFromDOM() {
        this.element2boundsData.forEach((boundsData, element) => {
            if (boundsData.bounds && (0, model_1.isSizeable)(element)) {
                const vnode = boundsData.vnode;
                if (vnode && vnode.elm) {
                    const boundingBox = this.getBounds(vnode.elm, element);
                    if ((0, model_1.isAlignable)(element) && !((0, geometry_1.almostEquals)(boundingBox.x, 0) && (0, geometry_1.almostEquals)(boundingBox.y, 0))) {
                        boundsData.alignment = {
                            x: -boundingBox.x,
                            y: -boundingBox.y
                        };
                        boundsData.alignmentChanged = true;
                    }
                    const newBounds = {
                        x: element.bounds.x,
                        y: element.bounds.y,
                        width: boundingBox.width,
                        height: boundingBox.height
                    };
                    if (!((0, geometry_1.almostEquals)(newBounds.x, element.bounds.x)
                        && (0, geometry_1.almostEquals)(newBounds.y, element.bounds.y)
                        && (0, geometry_1.almostEquals)(newBounds.width, element.bounds.width)
                        && (0, geometry_1.almostEquals)(newBounds.height, element.bounds.height))) {
                        boundsData.bounds = newBounds;
                        boundsData.boundsChanged = true;
                    }
                }
            }
        });
    }
    getBounds(elm, element) {
        if (typeof elm.getBBox !== 'function') {
            this.logger.error(this, 'Not an SVG element:', elm);
            return geometry_1.Bounds.EMPTY;
        }
        const bounds = elm.getBBox();
        return {
            x: bounds.x,
            y: bounds.y,
            width: bounds.width,
            height: bounds.height
        };
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], HiddenBoundsUpdater.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], HiddenBoundsUpdater.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.Layouter),
    __metadata("design:type", layout_1.Layouter)
], HiddenBoundsUpdater.prototype, "layouter", void 0);
HiddenBoundsUpdater = __decorate([
    (0, inversify_1.injectable)()
], HiddenBoundsUpdater);
exports.HiddenBoundsUpdater = HiddenBoundsUpdater;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/layout.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/layout.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.configureLayout = exports.StatefulLayouter = exports.Layouter = exports.LayoutRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "./node_modules/sprotty/lib/utils/registry.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "./node_modules/sprotty/lib/utils/inversify.js");
let LayoutRegistry = class LayoutRegistry extends registry_1.InstanceRegistry {
    constructor(layouts = []) {
        super();
        layouts.forEach(layout => {
            if (this.hasKey(layout.layoutKind)) {
                this.logger.warn('Layout kind is already defined: ', layout.layoutKind);
            }
            else {
                this.register(layout.layoutKind, layout.factory());
            }
        });
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], LayoutRegistry.prototype, "logger", void 0);
LayoutRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.LayoutRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], LayoutRegistry);
exports.LayoutRegistry = LayoutRegistry;
let Layouter = class Layouter {
    layout(element2boundsData) {
        new StatefulLayouter(element2boundsData, this.layoutRegistry, this.logger).layout();
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.LayoutRegistry),
    __metadata("design:type", LayoutRegistry)
], Layouter.prototype, "layoutRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], Layouter.prototype, "logger", void 0);
Layouter = __decorate([
    (0, inversify_1.injectable)()
], Layouter);
exports.Layouter = Layouter;
class StatefulLayouter {
    constructor(element2boundsData, layoutRegistry, log) {
        this.element2boundsData = element2boundsData;
        this.layoutRegistry = layoutRegistry;
        this.log = log;
        this.toBeLayouted = [];
        element2boundsData.forEach((data, element) => {
            if ((0, model_1.isLayoutContainer)(element))
                this.toBeLayouted.push(element);
        });
    }
    getBoundsData(element) {
        let boundsData = this.element2boundsData.get(element);
        let bounds = element.bounds;
        if ((0, model_1.isLayoutContainer)(element) && this.toBeLayouted.indexOf(element) >= 0) {
            bounds = this.doLayout(element);
        }
        if (!boundsData) {
            boundsData = {
                bounds: bounds,
                boundsChanged: false,
                alignmentChanged: false
            };
            this.element2boundsData.set(element, boundsData);
        }
        return boundsData;
    }
    layout() {
        while (this.toBeLayouted.length > 0) {
            const element = this.toBeLayouted[0];
            this.doLayout(element);
        }
    }
    doLayout(element) {
        const index = this.toBeLayouted.indexOf(element);
        if (index >= 0)
            this.toBeLayouted.splice(index, 1);
        const layout = this.layoutRegistry.get(element.layout);
        if (layout)
            layout.layout(element, this);
        const boundsData = this.element2boundsData.get(element);
        if (boundsData !== undefined && boundsData.bounds !== undefined) {
            return boundsData.bounds;
        }
        else {
            this.log.error(element, 'Layout failed');
            return geometry_1.Bounds.EMPTY;
        }
    }
}
exports.StatefulLayouter = StatefulLayouter;
function configureLayout(context, kind, constr) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Layouts be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.LayoutRegistration).toDynamicValue(ctx => ({
        layoutKind: kind,
        factory: () => ctx.container.get(constr)
    }));
}
exports.configureLayout = configureLayout;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/model.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/model.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SShapeElement = exports.findChildrenAtPosition = exports.getAbsoluteClientBounds = exports.getAbsoluteBounds = exports.isAlignable = exports.isSizeable = exports.isLayoutableChild = exports.isLayoutContainer = exports.isBoundsAware = exports.alignFeature = exports.layoutableChildFeature = exports.layoutContainerFeature = exports.boundsFeature = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sprotty/lib/utils/browser.js");
exports.boundsFeature = Symbol('boundsFeature');
exports.layoutContainerFeature = Symbol('layoutContainerFeature');
exports.layoutableChildFeature = Symbol('layoutableChildFeature');
exports.alignFeature = Symbol('alignFeature');
function isBoundsAware(element) {
    return 'bounds' in element;
}
exports.isBoundsAware = isBoundsAware;
function isLayoutContainer(element) {
    return isBoundsAware(element)
        && element.hasFeature(exports.layoutContainerFeature)
        && 'layout' in element;
}
exports.isLayoutContainer = isLayoutContainer;
function isLayoutableChild(element) {
    return isBoundsAware(element)
        && element.hasFeature(exports.layoutableChildFeature);
}
exports.isLayoutableChild = isLayoutableChild;
function isSizeable(element) {
    return element.hasFeature(exports.boundsFeature) && isBoundsAware(element);
}
exports.isSizeable = isSizeable;
function isAlignable(element) {
    return element.hasFeature(exports.alignFeature)
        && 'alignment' in element;
}
exports.isAlignable = isAlignable;
function getAbsoluteBounds(element) {
    const boundsAware = (0, smodel_utils_1.findParentByFeature)(element, isBoundsAware);
    if (boundsAware !== undefined) {
        let bounds = boundsAware.bounds;
        let current = boundsAware;
        while (current instanceof smodel_1.SChildElement) {
            const parent = current.parent;
            bounds = parent.localToParent(bounds);
            current = parent;
        }
        return bounds;
    }
    else if (element instanceof smodel_1.SModelRoot) {
        const canvasBounds = element.canvasBounds;
        return { x: 0, y: 0, width: canvasBounds.width, height: canvasBounds.height };
    }
    else {
        return geometry_1.Bounds.EMPTY;
    }
}
exports.getAbsoluteBounds = getAbsoluteBounds;
/**
 * Returns the "client-absolute" bounds of the specified `element`.
 *
 * The client-absolute bounds are relative to the entire browser page.
 *
 * @param element The element to get the bounds for.
 * @param domHelper The dom helper to obtain the SVG element's id.
 * @param viewerOptions The viewer options to obtain sprotty's container div id.
 */
function getAbsoluteClientBounds(element, domHelper, viewerOptions) {
    let x = 0;
    let y = 0;
    let width = 0;
    let height = 0;
    const svgElementId = domHelper.createUniqueDOMElementId(element);
    const svgElement = document.getElementById(svgElementId);
    if (svgElement) {
        const rect = svgElement.getBoundingClientRect();
        const scroll = (0, browser_1.getWindowScroll)();
        x = rect.left + scroll.x;
        y = rect.top + scroll.y;
        width = rect.width;
        height = rect.height;
    }
    let container = document.getElementById(viewerOptions.baseDiv);
    if (container) {
        while (container.offsetParent instanceof HTMLElement
            && (container = container.offsetParent)) {
            x -= container.offsetLeft;
            y -= container.offsetTop;
        }
    }
    return { x, y, width, height };
}
exports.getAbsoluteClientBounds = getAbsoluteClientBounds;
function findChildrenAtPosition(parent, point) {
    const matches = [];
    doFindChildrenAtPosition(parent, point, matches);
    return matches;
}
exports.findChildrenAtPosition = findChildrenAtPosition;
function doFindChildrenAtPosition(parent, point, matches) {
    parent.children.forEach(child => {
        if (isBoundsAware(child) && geometry_1.Bounds.includes(child.bounds, point))
            matches.push(child);
        if (child instanceof smodel_1.SParentElement) {
            const newPoint = child.parentToLocal(point);
            doFindChildrenAtPosition(child, newPoint, matches);
        }
    });
}
/**
 * Abstract class for elements with a position and a size.
 */
class SShapeElement extends smodel_1.SChildElement {
    constructor() {
        super(...arguments);
        this.position = geometry_1.Point.ORIGIN;
        this.size = geometry_1.Dimension.EMPTY;
    }
    get bounds() {
        return {
            x: this.position.x,
            y: this.position.y,
            width: this.size.width,
            height: this.size.height
        };
    }
    set bounds(newBounds) {
        this.position = {
            x: newBounds.x,
            y: newBounds.y
        };
        this.size = {
            width: newBounds.width,
            height: newBounds.height
        };
    }
    localToParent(point) {
        const result = {
            x: point.x + this.position.x,
            y: point.y + this.position.y,
            width: -1,
            height: -1
        };
        if ((0, geometry_1.isBounds)(point)) {
            result.width = point.width;
            result.height = point.height;
        }
        return result;
    }
    parentToLocal(point) {
        const result = {
            x: point.x - this.position.x,
            y: point.y - this.position.y,
            width: -1,
            height: -1
        };
        if ((0, geometry_1.isBounds)(point)) {
            result.width = point.width;
            result.height = point.height;
        }
        return result;
    }
}
exports.SShapeElement = SShapeElement;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/resize.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/resize.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ResizeAnimation = void 0;
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "./node_modules/sprotty/lib/base/animations/animation.js");
class ResizeAnimation extends animation_1.Animation {
    constructor(model, elementResizes, context, reverse = false) {
        super(context);
        this.model = model;
        this.elementResizes = elementResizes;
        this.reverse = reverse;
    }
    tween(t) {
        this.elementResizes.forEach((elementResize) => {
            const element = elementResize.element;
            const newDimension = (this.reverse) ? {
                width: (1 - t) * elementResize.toDimension.width + t * elementResize.fromDimension.width,
                height: (1 - t) * elementResize.toDimension.height + t * elementResize.fromDimension.height
            } : {
                width: (1 - t) * elementResize.fromDimension.width + t * elementResize.toDimension.width,
                height: (1 - t) * elementResize.fromDimension.height + t * elementResize.toDimension.height
            };
            element.bounds = {
                x: element.bounds.x,
                y: element.bounds.y,
                width: newDimension.width,
                height: newDimension.height
            };
        });
        return this.model;
    }
}
exports.ResizeAnimation = ResizeAnimation;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/stack-layout.js":
/*!******************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/stack-layout.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StackLayouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const abstract_layout_1 = __webpack_require__(/*! ./abstract-layout */ "./node_modules/sprotty/lib/features/bounds/abstract-layout.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/bounds/model.js");
let StackLayouter = class StackLayouter extends abstract_layout_1.AbstractLayout {
    getChildrenSize(container, options, layouter) {
        let maxWidth = -1;
        let maxHeight = -1;
        container.children.forEach(child => {
            if ((0, model_1.isLayoutableChild)(child)) {
                const bounds = layouter.getBoundsData(child).bounds;
                if (bounds !== undefined && geometry_1.Dimension.isValid(bounds)) {
                    maxWidth = Math.max(maxWidth, bounds.width);
                    maxHeight = Math.max(maxHeight, bounds.height);
                }
            }
        });
        return {
            width: maxWidth,
            height: maxHeight
        };
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight) {
        const dx = this.getDx(childOptions.hAlign, bounds, maxWidth);
        const dy = this.getDy(childOptions.vAlign, bounds, maxHeight);
        boundsData.bounds = {
            x: containerOptions.paddingLeft + child.bounds.x - bounds.x + dx,
            y: containerOptions.paddingTop + child.bounds.y - bounds.y + dy,
            width: bounds.width,
            height: bounds.height
        };
        boundsData.boundsChanged = true;
        return currentOffset;
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 5,
            paddingBottom: 5,
            paddingLeft: 5,
            paddingRight: 5,
            paddingFactor: 1,
            hAlign: 'center',
            vAlign: 'center',
            minWidth: 0,
            minHeight: 0
        };
    }
    spread(a, b) {
        return Object.assign(Object.assign({}, a), b);
    }
};
StackLayouter.KIND = 'stack';
StackLayouter = __decorate([
    (0, inversify_1.injectable)()
], StackLayouter);
exports.StackLayouter = StackLayouter;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/vbox-layout.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/vbox-layout.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VBoxLayouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const abstract_layout_1 = __webpack_require__(/*! ./abstract-layout */ "./node_modules/sprotty/lib/features/bounds/abstract-layout.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/bounds/model.js");
/**
 * Layouts children of a container in vertical (top->bottom) direction.
 */
let VBoxLayouter = class VBoxLayouter extends abstract_layout_1.AbstractLayout {
    getChildrenSize(container, containerOptions, layouter) {
        let maxWidth = -1;
        let maxHeight = 0;
        let isFirst = true;
        container.children.forEach(child => {
            if ((0, model_1.isLayoutableChild)(child)) {
                const bounds = layouter.getBoundsData(child).bounds;
                if (bounds !== undefined && geometry_1.Dimension.isValid(bounds)) {
                    maxHeight += bounds.height;
                    if (isFirst)
                        isFirst = false;
                    else
                        maxHeight += containerOptions.vGap;
                    maxWidth = Math.max(maxWidth, bounds.width);
                }
            }
        });
        return {
            width: maxWidth,
            height: maxHeight
        };
    }
    layoutChild(child, boundsData, bounds, childOptions, containerOptions, currentOffset, maxWidth, maxHeight) {
        const dx = this.getDx(childOptions.hAlign, bounds, maxWidth);
        boundsData.bounds = {
            x: containerOptions.paddingLeft + child.bounds.x - bounds.x + dx,
            y: currentOffset.y + child.bounds.y - bounds.y,
            width: bounds.width,
            height: bounds.height
        };
        boundsData.boundsChanged = true;
        return {
            x: currentOffset.x,
            y: currentOffset.y + bounds.height + containerOptions.vGap
        };
    }
    getDefaultLayoutOptions() {
        return {
            resizeContainer: true,
            paddingTop: 5,
            paddingBottom: 5,
            paddingLeft: 5,
            paddingRight: 5,
            paddingFactor: 1,
            vGap: 1,
            hAlign: 'center',
            minWidth: 0,
            minHeight: 0
        };
    }
    spread(a, b) {
        return Object.assign(Object.assign({}, a), b);
    }
};
VBoxLayouter.KIND = 'vbox';
VBoxLayouter = __decorate([
    (0, inversify_1.injectable)()
], VBoxLayouter);
exports.VBoxLayouter = VBoxLayouter;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/bounds/views.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/bounds/views.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShapeView = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/bounds/model.js");
let ShapeView = class ShapeView {
    /**
     * Check whether the given model element is in the current viewport. Use this method
     * in your `render` implementation to skip rendering in case the element is not visible.
     * This can greatly enhance performance for large models.
     */
    isVisible(model, context) {
        if (context.targetKind === 'hidden') {
            // Don't hide any element for hidden rendering
            return true;
        }
        if (!geometry_1.Dimension.isValid(model.bounds)) {
            // We should hide only if we know the element's bounds
            return true;
        }
        const ab = (0, model_1.getAbsoluteBounds)(model);
        const canvasBounds = model.root.canvasBounds;
        return ab.x <= canvasBounds.width
            && ab.x + ab.width >= 0
            && ab.y <= canvasBounds.height
            && ab.y + ab.height >= 0;
    }
};
ShapeView = __decorate([
    (0, inversify_1.injectable)()
], ShapeView);
exports.ShapeView = ShapeView;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/button/button-handler.js":
/*!********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/button/button-handler.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.configureButtonHandler = exports.ButtonHandlerRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "./node_modules/sprotty/lib/utils/registry.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const inversify_2 = __webpack_require__(/*! ../../utils/inversify */ "./node_modules/sprotty/lib/utils/inversify.js");
let ButtonHandlerRegistry = class ButtonHandlerRegistry extends registry_1.InstanceRegistry {
    constructor(buttonHandlerRegistrations, 
    // deprecated, but keep support for now
    buttonHandlerFactories) {
        super();
        buttonHandlerRegistrations.forEach(factory => this.register(factory.TYPE, factory.factory()));
        // deprecated, but keep support for now
        buttonHandlerFactories.forEach(factory => this.register(factory.TYPE, new factory()));
    }
};
ButtonHandlerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IButtonHandlerRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __param(1, (0, inversify_1.multiInject)(types_1.TYPES.IButtonHandler)),
    __param(1, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array, Array])
], ButtonHandlerRegistry);
exports.ButtonHandlerRegistry = ButtonHandlerRegistry;
/**
 * Utility function to register a button handler for an button type.
 */
function configureButtonHandler(context, type, constr) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Button handlers should be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.IButtonHandlerRegistration).toDynamicValue(ctx => ({
        TYPE: type,
        factory: () => ctx.container.get(constr)
    }));
}
exports.configureButtonHandler = configureButtonHandler;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/button/di.config.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/button/di.config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const button_handler_1 = __webpack_require__(/*! ./button-handler */ "./node_modules/sprotty/lib/features/button/button-handler.js");
const buttonModule = new inversify_1.ContainerModule(bind => {
    bind(button_handler_1.ButtonHandlerRegistry).toSelf().inSingletonScope();
});
exports["default"] = buttonModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/button/model.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/button/model.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SButton = void 0;
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../fade/model */ "./node_modules/sprotty/lib/features/fade/model.js");
class SButton extends model_1.SShapeElement {
    constructor() {
        super(...arguments);
        this.enabled = true;
    }
}
exports.SButton = SButton;
SButton.DEFAULT_FEATURES = [model_1.boundsFeature, model_1.layoutableChildFeature, model_2.fadeFeature];


/***/ }),

/***/ "./node_modules/sprotty/lib/features/command-palette/action-providers.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/command-palette/action-providers.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RevealNamedElementActionProvider = exports.CommandPaletteActionProviderRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const action_1 = __webpack_require__(/*! ../../base/actions/action */ "./node_modules/sprotty/lib/base/actions/action.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "./node_modules/sprotty/lib/utils/iterable.js");
const model_1 = __webpack_require__(/*! ../nameable/model */ "./node_modules/sprotty/lib/features/nameable/model.js");
let CommandPaletteActionProviderRegistry = class CommandPaletteActionProviderRegistry {
    constructor(actionProviders = []) {
        this.actionProviders = actionProviders;
    }
    getActions(root, text, lastMousePosition, index) {
        const actionLists = this.actionProviders.map(provider => provider.getActions(root, text, lastMousePosition, index));
        return Promise.all(actionLists).then(p => p.reduce((acc, promise) => promise !== undefined ? acc.concat(promise) : acc));
    }
};
CommandPaletteActionProviderRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.ICommandPaletteActionProvider)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], CommandPaletteActionProviderRegistry);
exports.CommandPaletteActionProviderRegistry = CommandPaletteActionProviderRegistry;
let RevealNamedElementActionProvider = class RevealNamedElementActionProvider {
    constructor(logger) {
        this.logger = logger;
    }
    getActions(root, text, lastMousePosition, index) {
        if (index !== undefined && index % 2 === 0)
            return Promise.resolve(this.createSelectActions(root));
        else
            return Promise.resolve([new action_1.LabeledAction("Select all", [actions_1.SelectAllAction.create()])]);
    }
    createSelectActions(modelRoot) {
        const nameables = (0, iterable_1.toArray)(modelRoot.index.all().filter(element => (0, model_1.isNameable)(element)));
        return nameables.map(nameable => new action_1.LabeledAction(`Reveal ${(0, model_1.name)(nameable)}`, [actions_1.SelectAction.create({ selectedElementsIDs: [nameable.id] }), actions_1.CenterAction.create([nameable.id])], 'eye'));
    }
};
RevealNamedElementActionProvider = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.ILogger)),
    __metadata("design:paramtypes", [Object])
], RevealNamedElementActionProvider);
exports.RevealNamedElementActionProvider = RevealNamedElementActionProvider;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/command-palette/command-palette.js":
/*!******************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/command-palette/command-palette.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var CommandPalette_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommandPaletteKeyListener = exports.CommandPalette = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const action_1 = __webpack_require__(/*! ../../base/actions/action */ "./node_modules/sprotty/lib/base/actions/action.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extensions/ui-extension */ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension.js");
const ui_extension_registry_1 = __webpack_require__(/*! ../../base/ui-extensions/ui-extension-registry */ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js");
const dom_helper_1 = __webpack_require__(/*! ../../base/views/dom-helper */ "./node_modules/sprotty/lib/base/views/dom-helper.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const codicon_1 = __webpack_require__(/*! ../../utils/codicon */ "./node_modules/sprotty/lib/utils/codicon.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "./node_modules/sprotty/lib/utils/iterable.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const action_providers_1 = __webpack_require__(/*! ./action-providers */ "./node_modules/sprotty/lib/features/command-palette/action-providers.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const autocompleter_1 = __importDefault(__webpack_require__(/*! autocompleter */ "./node_modules/autocompleter/autocomplete.js"));
let CommandPalette = CommandPalette_1 = class CommandPalette extends ui_extension_1.AbstractUIExtension {
    constructor() {
        super(...arguments);
        this.loadingIndicatorClasses = (0, codicon_1.codiconCSSClasses)('loading', false, true, ['loading']);
        this.xOffset = 20;
        this.yOffset = 20;
        this.defaultWidth = 400;
        this.debounceWaitMs = 100;
        this.noCommandsMsg = "No commands available";
        this.paletteIndex = 0;
    }
    id() { return CommandPalette_1.ID; }
    containerClass() { return "command-palette"; }
    show(root, ...contextElementIds) {
        super.show(root, ...contextElementIds);
        this.paletteIndex = 0;
        this.contextActions = undefined;
        this.inputElement.value = "";
        this.autoCompleteResult = (0, autocompleter_1.default)(this.autocompleteSettings(root));
        this.inputElement.focus();
    }
    initializeContents(containerElement) {
        containerElement.style.position = "absolute";
        this.inputElement = document.createElement('input');
        this.inputElement.style.width = '100%';
        this.inputElement.addEventListener('keydown', (event) => this.hideIfEscapeEvent(event));
        this.inputElement.addEventListener('keydown', (event) => this.cylceIfInvokePaletteKey(event));
        this.inputElement.onblur = () => window.setTimeout(() => this.hide(), 200);
        containerElement.appendChild(this.inputElement);
    }
    hideIfEscapeEvent(event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            this.hide();
        }
    }
    cylceIfInvokePaletteKey(event) {
        if (CommandPalette_1.isInvokePaletteKey(event)) {
            this.cycle();
        }
    }
    cycle() {
        this.contextActions = undefined;
        this.paletteIndex++;
    }
    onBeforeShow(containerElement, root, ...selectedElementIds) {
        let x = this.xOffset;
        let y = this.yOffset;
        const selectedElements = (0, iterable_1.toArray)(root.index.all().filter(e => (0, model_2.isSelectable)(e) && e.selected));
        if (selectedElements.length === 1) {
            const bounds = (0, model_1.getAbsoluteClientBounds)(selectedElements[0], this.domHelper, this.viewerOptions);
            x += bounds.x + bounds.width;
            y += bounds.y;
        }
        else {
            const bounds = (0, model_1.getAbsoluteClientBounds)(root, this.domHelper, this.viewerOptions);
            x += bounds.x;
            y += bounds.y;
        }
        containerElement.style.left = `${x}px`;
        containerElement.style.top = `${y}px`;
        containerElement.style.width = `${this.defaultWidth}px`;
    }
    autocompleteSettings(root) {
        return {
            input: this.inputElement,
            emptyMsg: this.noCommandsMsg,
            className: "command-palette-suggestions",
            debounceWaitMs: this.debounceWaitMs,
            showOnFocus: true,
            minLength: -1,
            fetch: (text, update) => this.updateAutoCompleteActions(update, text, root),
            onSelect: (item) => this.onSelect(item),
            render: (item, currentValue) => this.renderLabeledActionSuggestion(item, currentValue),
            customize: (input, inputRect, container, maxHeight) => {
                this.customizeSuggestionContainer(container, inputRect, maxHeight);
            }
        };
    }
    onSelect(item) {
        this.executeAction(item);
        this.hide();
    }
    updateAutoCompleteActions(update, text, root) {
        this.onLoading();
        if (this.contextActions) {
            update(this.filterActions(text, this.contextActions));
            this.onLoaded('success');
        }
        else {
            this.actionProviderRegistry
                .getActions(root, text, this.mousePositionTracker.lastPositionOnDiagram, this.paletteIndex)
                .then(actions => {
                this.contextActions = actions;
                update(this.filterActions(text, actions));
                this.onLoaded('success');
            })
                .catch((reason) => {
                this.logger.error(this, "Failed to obtain actions from command palette action providers", reason);
                this.onLoaded('error');
            });
        }
    }
    onLoading() {
        if (this.loadingIndicator && this.containerElement.contains(this.loadingIndicator)) {
            return;
        }
        this.loadingIndicator = document.createElement('span');
        this.loadingIndicator.classList.add(...this.loadingIndicatorClasses);
        this.containerElement.appendChild(this.loadingIndicator);
    }
    onLoaded(success) {
        if (this.containerElement.contains(this.loadingIndicator)) {
            this.containerElement.removeChild(this.loadingIndicator);
        }
    }
    renderLabeledActionSuggestion(item, value) {
        const itemElement = document.createElement("div");
        const wordMatcher = espaceForRegExp(value).split(" ").join("|");
        const regex = new RegExp(wordMatcher, "gi");
        if (item.icon) {
            this.renderIcon(itemElement, item.icon);
        }
        if (value.length > 0) {
            itemElement.innerHTML += item.label.replace(regex, (match) => "<em>" + match + "</em>").replace(/ /g, '&nbsp;');
        }
        else {
            itemElement.innerHTML += item.label.replace(/ /g, '&nbsp;');
        }
        return itemElement;
    }
    renderIcon(itemElement, iconId) {
        itemElement.innerHTML += `<span class="icon ${this.getCodicon(iconId)}"></span>`;
    }
    getFontAwesomeIcon(iconId) {
        return `fa fa-${iconId}`;
    }
    getCodicon(iconId) {
        return (0, codicon_1.codiconCSSString)(iconId);
    }
    filterActions(filterText, actions) {
        return (0, iterable_1.toArray)(actions.filter(action => {
            const label = action.label.toLowerCase();
            const searchWords = filterText.split(' ');
            return searchWords.every(word => label.indexOf(word.toLowerCase()) !== -1);
        }));
    }
    customizeSuggestionContainer(container, inputRect, maxHeight) {
        // move container into our command palette container as this is already positioned correctly
        if (this.containerElement) {
            this.containerElement.appendChild(container);
        }
    }
    hide() {
        super.hide();
        if (this.autoCompleteResult) {
            this.autoCompleteResult.destroy();
        }
    }
    executeAction(input) {
        this.actionDispatcherProvider()
            .then((actionDispatcher) => actionDispatcher.dispatchAll(toActionArray(input)))
            .catch((reason) => this.logger.error(this, 'No action dispatcher available to execute command palette action', reason));
    }
};
CommandPalette.ID = "command-palette";
CommandPalette.isInvokePaletteKey = (event) => (0, keyboard_1.matchesKeystroke)(event, 'Space', 'ctrl');
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcherProvider),
    __metadata("design:type", Function)
], CommandPalette.prototype, "actionDispatcherProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ICommandPaletteActionProviderRegistry),
    __metadata("design:type", action_providers_1.CommandPaletteActionProviderRegistry)
], CommandPalette.prototype, "actionProviderRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], CommandPalette.prototype, "viewerOptions", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.DOMHelper),
    __metadata("design:type", dom_helper_1.DOMHelper)
], CommandPalette.prototype, "domHelper", void 0);
__decorate([
    (0, inversify_1.inject)(mouse_tool_1.MousePositionTracker),
    __metadata("design:type", mouse_tool_1.MousePositionTracker)
], CommandPalette.prototype, "mousePositionTracker", void 0);
CommandPalette = CommandPalette_1 = __decorate([
    (0, inversify_1.injectable)()
], CommandPalette);
exports.CommandPalette = CommandPalette;
function toActionArray(input) {
    if ((0, action_1.isLabeledAction)(input)) {
        return input.actions;
    }
    else if ((0, actions_1.isAction)(input)) {
        return [input];
    }
    return [];
}
function espaceForRegExp(value) {
    return value.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
}
class CommandPaletteKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            return [ui_extension_registry_1.SetUIExtensionVisibilityAction.create({ extensionId: CommandPalette.ID, visible: false, contextElementsId: [] })];
        }
        else if (CommandPalette.isInvokePaletteKey(event)) {
            const selectedElements = (0, iterable_1.toArray)(element.index.all().filter(e => (0, model_2.isSelectable)(e) && e.selected).map(e => e.id));
            return [ui_extension_registry_1.SetUIExtensionVisibilityAction.create({ extensionId: CommandPalette.ID, visible: true, contextElementsId: selectedElements })];
        }
        return [];
    }
}
exports.CommandPaletteKeyListener = CommandPaletteKeyListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/command-palette/di.config.js":
/*!************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/command-palette/di.config.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const action_providers_1 = __webpack_require__(/*! ./action-providers */ "./node_modules/sprotty/lib/features/command-palette/action-providers.js");
const command_palette_1 = __webpack_require__(/*! ./command-palette */ "./node_modules/sprotty/lib/features/command-palette/command-palette.js");
const commandPaletteModule = new inversify_1.ContainerModule((bind) => {
    bind(command_palette_1.CommandPalette).toSelf().inSingletonScope();
    bind(types_1.TYPES.IUIExtension).toService(command_palette_1.CommandPalette);
    bind(command_palette_1.CommandPaletteKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(command_palette_1.CommandPaletteKeyListener);
    bind(action_providers_1.CommandPaletteActionProviderRegistry).toSelf().inSingletonScope();
    bind(types_1.TYPES.ICommandPaletteActionProviderRegistry).toService(action_providers_1.CommandPaletteActionProviderRegistry);
});
exports["default"] = commandPaletteModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/context-menu/context-menu-service.js":
/*!********************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/context-menu/context-menu-service.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toAnchor = void 0;
function toAnchor(anchor) {
    return anchor instanceof HTMLElement ? { x: anchor.offsetLeft, y: anchor.offsetTop } : anchor;
}
exports.toAnchor = toAnchor;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/context-menu/di.config.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/context-menu/di.config.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const menu_providers_1 = __webpack_require__(/*! ./menu-providers */ "./node_modules/sprotty/lib/features/context-menu/menu-providers.js");
const mouse_listener_1 = __webpack_require__(/*! ./mouse-listener */ "./node_modules/sprotty/lib/features/context-menu/mouse-listener.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const contextMenuModule = new inversify_1.ContainerModule(bind => {
    bind(types_1.TYPES.IContextMenuServiceProvider).toProvider(ctx => {
        return () => {
            return new Promise((resolve, reject) => {
                if (ctx.container.isBound(types_1.TYPES.IContextMenuService)) {
                    resolve(ctx.container.get(types_1.TYPES.IContextMenuService));
                }
                else {
                    reject();
                }
            });
        };
    });
    bind(mouse_listener_1.ContextMenuMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(mouse_listener_1.ContextMenuMouseListener);
    bind(types_1.TYPES.IContextMenuProviderRegistry).to(menu_providers_1.ContextMenuProviderRegistry);
});
exports["default"] = contextMenuModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/context-menu/menu-providers.js":
/*!**************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/context-menu/menu-providers.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteContextMenuItemProvider = exports.ContextMenuProviderRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const delete_1 = __webpack_require__(/*! ../edit/delete */ "./node_modules/sprotty/lib/features/edit/delete.js");
const model_1 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "./node_modules/sprotty-protocol/lib/index.js");
let ContextMenuProviderRegistry = class ContextMenuProviderRegistry {
    constructor(menuProviders = []) {
        this.menuProviders = menuProviders;
    }
    getItems(root, lastMousePosition) {
        const menues = this.menuProviders.map(provider => provider.getItems(root, lastMousePosition));
        return Promise.all(menues).then(this.flattenAndRestructure);
    }
    flattenAndRestructure(p) {
        let menuItems = p.reduce((acc, promise) => promise !== undefined ? acc.concat(promise) : acc, []);
        const menuItemsWithParentId = menuItems.filter(menuItem => menuItem.parentId);
        for (const menuItem of menuItemsWithParentId) {
            if (menuItem.parentId) {
                const fragments = menuItem.parentId.split('.');
                let matchingParent = undefined;
                let nextParents = menuItems;
                for (const fragment of fragments) {
                    matchingParent = nextParents.find(item => fragment === item.id);
                    if (matchingParent && matchingParent.children)
                        nextParents = matchingParent.children;
                }
                if (matchingParent) {
                    if (matchingParent.children) {
                        matchingParent.children.push(menuItem);
                    }
                    else {
                        matchingParent.children = [menuItem];
                    }
                    menuItems = menuItems.filter(item => item !== menuItem);
                }
            }
        }
        return menuItems;
    }
};
ContextMenuProviderRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IContextMenuItemProvider)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], ContextMenuProviderRegistry);
exports.ContextMenuProviderRegistry = ContextMenuProviderRegistry;
let DeleteContextMenuItemProvider = class DeleteContextMenuItemProvider {
    getItems(root, lastMousePosition) {
        const selectedElements = Array.from(root.index.all().filter(model_1.isSelected).filter(delete_1.isDeletable));
        return Promise.resolve([
            {
                id: 'delete',
                label: 'Delete',
                sortString: 'd',
                group: 'edit',
                actions: [sprotty_protocol_1.DeleteElementAction.create(selectedElements.map(e => e.id))],
                isEnabled: () => selectedElements.length > 0
            }
        ]);
    }
};
DeleteContextMenuItemProvider = __decorate([
    (0, inversify_1.injectable)()
], DeleteContextMenuItemProvider);
exports.DeleteContextMenuItemProvider = DeleteContextMenuItemProvider;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/context-menu/mouse-listener.js":
/*!**************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/context-menu/mouse-listener.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContextMenuMouseListener = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const menu_providers_1 = __webpack_require__(/*! ./menu-providers */ "./node_modules/sprotty/lib/features/context-menu/menu-providers.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const model_1 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
let ContextMenuMouseListener = class ContextMenuMouseListener extends mouse_tool_1.MouseListener {
    constructor(contextMenuService, menuProvider) {
        super();
        this.contextMenuService = contextMenuService;
        this.menuProvider = menuProvider;
    }
    contextMenu(target, event) {
        this.showContextMenu(target, event);
        return [];
    }
    async showContextMenu(target, event) {
        let menuService;
        try {
            menuService = await this.contextMenuService();
        }
        catch (rejected) {
            // IContextMenuService is not bound => do nothing
            return;
        }
        const mousePosition = { x: event.x, y: event.y };
        const root = target.root;
        const id = target.id;
        let isTargetSelected = false;
        const selectableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_1.isSelectable);
        if (selectableTarget) {
            isTargetSelected = selectableTarget.selected;
            selectableTarget.selected = true;
        }
        const restoreSelection = () => { if (selectableTarget)
            selectableTarget.selected = isTargetSelected; };
        if ((0, model_1.isSelectable)(target)) {
            if ((0, model_1.isSelected)(target)) {
                const menuItems = await this.menuProvider.getItems(target.root, mousePosition);
                menuService.show(menuItems, mousePosition, restoreSelection);
            }
            else {
                const options = { selectedElementsIDs: [id], deselectedElementsIDs: Array.from(root.index.all().filter(model_1.isSelected), (val) => { return val.id; }) };
                await this.actionDispatcher.dispatch(actions_1.SelectAction.create(options));
                const items = await this.menuProvider.getItems(root, mousePosition);
                menuService.show(items, mousePosition);
            }
        }
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ContextMenuMouseListener.prototype, "actionDispatcher", void 0);
ContextMenuMouseListener = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.IContextMenuServiceProvider)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.IContextMenuProviderRegistry)),
    __metadata("design:paramtypes", [Function, menu_providers_1.ContextMenuProviderRegistry])
], ContextMenuMouseListener);
exports.ContextMenuMouseListener = ContextMenuMouseListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/decoration/decoration-placer.js":
/*!***************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/decoration/decoration-placer.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DecorationPlacer = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/decoration/model.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const model_2 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_3 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "./node_modules/sprotty-protocol/lib/index.js");
let DecorationPlacer = class DecorationPlacer {
    decorate(vnode, element) {
        if ((0, model_1.isDecoration)(element)) {
            const position = this.getPosition(element);
            const translate = 'translate(' + position.x + ', ' + position.y + ')';
            (0, vnode_utils_1.setAttr)(vnode, 'transform', translate);
        }
        return vnode;
    }
    getPosition(element) {
        if (element instanceof smodel_1.SChildElement && element.parent instanceof model_3.SRoutableElement) {
            const route = this.edgeRouterRegistry.route(element.parent);
            if (route.length > 1) {
                const index = Math.floor(0.5 * (route.length - 1));
                const offset = (0, model_2.isSizeable)(element)
                    ? {
                        x: -0.5 * element.bounds.width,
                        y: -0.5 * element.bounds.width
                    }
                    : sprotty_protocol_1.Point.ORIGIN;
                return {
                    x: 0.5 * (route[index].x + route[index + 1].x) + offset.x,
                    y: 0.5 * (route[index].y + route[index + 1].y) + offset.y
                };
            }
        }
        if ((0, model_2.isSizeable)(element))
            return {
                x: -0.666 * element.bounds.width,
                y: -0.666 * element.bounds.height
            };
        return sprotty_protocol_1.Point.ORIGIN;
    }
    postUpdate() {
    }
};
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], DecorationPlacer.prototype, "edgeRouterRegistry", void 0);
DecorationPlacer = __decorate([
    (0, inversify_1.injectable)()
], DecorationPlacer);
exports.DecorationPlacer = DecorationPlacer;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/decoration/di.config.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/decoration/di.config.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const view_1 = __webpack_require__(/*! ../../base/views/view */ "./node_modules/sprotty/lib/base/views/view.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/decoration/model.js");
const views_1 = __webpack_require__(/*! ./views */ "./node_modules/sprotty/lib/features/decoration/views.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const decoration_placer_1 = __webpack_require__(/*! ./decoration-placer */ "./node_modules/sprotty/lib/features/decoration/decoration-placer.js");
const decorationModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, view_1.configureModelElement)({ bind, isBound }, 'marker', model_1.SIssueMarker, views_1.IssueMarkerView);
    bind(decoration_placer_1.DecorationPlacer).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(decoration_placer_1.DecorationPlacer);
});
exports["default"] = decorationModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/decoration/model.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/decoration/model.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SIssue = exports.SIssueMarker = exports.SDecoration = exports.isDecoration = exports.decorationFeature = void 0;
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../hover/model */ "./node_modules/sprotty/lib/features/hover/model.js");
exports.decorationFeature = Symbol('decorationFeature');
function isDecoration(e) {
    return e.hasFeature(exports.decorationFeature);
}
exports.isDecoration = isDecoration;
class SDecoration extends model_1.SShapeElement {
}
exports.SDecoration = SDecoration;
SDecoration.DEFAULT_FEATURES = [exports.decorationFeature, model_1.boundsFeature, model_2.hoverFeedbackFeature, model_2.popupFeature];
class SIssueMarker extends SDecoration {
}
exports.SIssueMarker = SIssueMarker;
class SIssue {
}
exports.SIssue = SIssue;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/decoration/views.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/decoration/views.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IssueMarkerView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let IssueMarkerView = class IssueMarkerView {
    render(marker, context) {
        const scale = 16 / 1792;
        const trafo = `scale(${scale}, ${scale})`;
        const maxSeverity = this.getMaxSeverity(marker);
        const group = (0, jsx_1.svg)("g", { "class-sprotty-issue": true },
            (0, jsx_1.svg)("g", { transform: trafo },
                (0, jsx_1.svg)("path", { d: this.getPath(maxSeverity) })));
        (0, vnode_utils_1.setClass)(group, 'sprotty-' + maxSeverity, true);
        return group;
    }
    getMaxSeverity(marker) {
        let currentSeverity = 'info';
        for (const severity of marker.issues.map(s => s.severity)) {
            if (severity === 'error' || (severity === 'warning' && currentSeverity === 'info'))
                currentSeverity = severity;
        }
        return currentSeverity;
    }
    getPath(severity) {
        switch (severity) {
            case 'error':
            case 'warning':
                // eslint-disable-next-line max-len
                return "M768 128q209 0 385.5 103t279.5 279.5 103 385.5-103 385.5-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103zm128 1247v-190q0-14-9-23.5t-22-9.5h-192q-13 0-23 10t-10 23v190q0 13 10 23t23 10h192q13 0 22-9.5t9-23.5zm-2-344l18-621q0-12-10-18-10-8-24-8h-220q-14 0-24 8-10 6-10 18l17 621q0 10 10 17.5t24 7.5h185q14 0 23.5-7.5t10.5-17.5z";
            case 'info':
                // eslint-disable-next-line max-len
                return "M1024 1376v-160q0-14-9-23t-23-9h-96v-512q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v160q0 14 9 23t23 9h96v320h-96q-14 0-23 9t-9 23v160q0 14 9 23t23 9h448q14 0 23-9t9-23zm-128-896v-160q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v160q0 14 9 23t23 9h192q14 0 23-9t9-23zm640 416q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z";
        }
    }
};
IssueMarkerView = __decorate([
    (0, inversify_1.injectable)()
], IssueMarkerView);
exports.IssueMarkerView = IssueMarkerView;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edge-intersection/di.config.js":
/*!**************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edge-intersection/di.config.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const intersection_finder_1 = __webpack_require__(/*! ../edge-intersection/intersection-finder */ "./node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js");
const edgeIntersectionModule = new inversify_1.ContainerModule(bind => {
    bind(intersection_finder_1.IntersectionFinder).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRoutePostprocessor).toService(intersection_finder_1.IntersectionFinder);
});
exports["default"] = edgeIntersectionModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js":
/*!************************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IntersectionFinder = exports.BY_DESCENDING_X_THEN_DESCENDING_Y = exports.BY_X_THEN_DESCENDING_Y = exports.BY_DESCENDING_X_THEN_Y = exports.BY_X_THEN_Y = exports.isIntersectingRoutedPoint = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const tinyqueue_1 = __importDefault(__webpack_require__(/*! tinyqueue */ "./node_modules/tinyqueue/index.js"));
const sweepline_1 = __webpack_require__(/*! ./sweepline */ "./node_modules/sprotty/lib/features/edge-intersection/sweepline.js");
function isIntersectingRoutedPoint(routedPoint) {
    return routedPoint !== undefined && 'intersections' in routedPoint && 'kind' in routedPoint;
}
exports.isIntersectingRoutedPoint = isIntersectingRoutedPoint;
const BY_X_THEN_Y = (a, b) => {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return a.intersectionPoint.y - b.intersectionPoint.y;
    }
    return a.intersectionPoint.x - b.intersectionPoint.x;
};
exports.BY_X_THEN_Y = BY_X_THEN_Y;
const BY_DESCENDING_X_THEN_Y = (a, b) => {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return a.intersectionPoint.y - b.intersectionPoint.y;
    }
    return b.intersectionPoint.x - a.intersectionPoint.x;
};
exports.BY_DESCENDING_X_THEN_Y = BY_DESCENDING_X_THEN_Y;
const BY_X_THEN_DESCENDING_Y = (a, b) => {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return b.intersectionPoint.y - a.intersectionPoint.y;
    }
    return a.intersectionPoint.x - b.intersectionPoint.x;
};
exports.BY_X_THEN_DESCENDING_Y = BY_X_THEN_DESCENDING_Y;
const BY_DESCENDING_X_THEN_DESCENDING_Y = (a, b) => {
    if (a.intersectionPoint.x === b.intersectionPoint.x) {
        return b.intersectionPoint.y - a.intersectionPoint.y;
    }
    return b.intersectionPoint.x - a.intersectionPoint.x;
};
exports.BY_DESCENDING_X_THEN_DESCENDING_Y = BY_DESCENDING_X_THEN_DESCENDING_Y;
/**
 * Finds intersections among edges and updates routed points to reflect those intersections.
 *
 * This only yields correct intersections among straight line segments and doesn't work with bezier curves.
 */
let IntersectionFinder = class IntersectionFinder {
    /**
     * Finds all intersections in the specified `routing` and replaces the `RoutedPoints` that are
     * intersecting by adding intersection information to routing points (@see `IntersectingRoutedPoints`).
     * @param routing the edge routing to find intersections for and update.
     */
    apply(routing) {
        const intersections = this.find(routing);
        this.addToRouting(intersections, routing);
    }
    /**
     * Finds the intersections in the specified `routing` and returns them.
     * @param routing the edge routing to find intersections for and update.
     * @returns the identified intersections.
     */
    find(routing) {
        const eventQueue = new tinyqueue_1.default(undefined, sweepline_1.checkWhichEventIsLeft);
        routing.routes.forEach((route, routeId) => {
            if (this.isSupportedRoute(route)) {
                (0, sweepline_1.addRoute)(routeId, route, eventQueue);
            }
        });
        return (0, sweepline_1.runSweep)(eventQueue);
    }
    /**
     * Specifies whether or not a specific route should be included in this intersection search or not.
     *
     * As this intersection finder only supports linear line segments, this method only returns `true`
     * for routes that only contain routed points, which are either 'source', 'target' or 'linear'.
     */
    isSupportedRoute(route) {
        return route.find(point => point.kind !== 'source' && point.kind !== 'target' && point.kind !== 'linear') === undefined;
    }
    addToRouting(intersections, routing) {
        for (const intersection of intersections) {
            const routable1 = routing.get(intersection.routable1);
            const routable2 = routing.get(intersection.routable2);
            this.addIntersectionToRoutedPoint(intersection, routable1, intersection.segmentIndex1);
            this.addIntersectionToRoutedPoint(intersection, routable2, intersection.segmentIndex2);
        }
    }
    addIntersectionToRoutedPoint(intersection, routedPoint, segmentIndex) {
        if (routedPoint && routedPoint.length > segmentIndex) {
            const segment = routedPoint[segmentIndex + 1];
            if (isIntersectingRoutedPoint(segment)) {
                segment.intersections.push(intersection);
            }
            else {
                const intersectingRoutedPoint = Object.assign(Object.assign({}, segment), { intersections: [intersection] });
                routedPoint[segmentIndex + 1] = intersectingRoutedPoint;
            }
        }
    }
};
IntersectionFinder = __decorate([
    (0, inversify_1.injectable)()
], IntersectionFinder);
exports.IntersectionFinder = IntersectionFinder;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edge-intersection/sweepline.js":
/*!**************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edge-intersection/sweepline.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.intersectionOfSegments = exports.getSegmentIndex = exports.checkWhichSegmentHasRightEndpointFirst = exports.runSweep = exports.Segment = exports.SweepEvent = exports.checkWhichEventIsLeft = exports.addRoute = void 0;
/********************************************************************************
 * Copyright (c) 2019 Rowan Winsemius and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
// Based on the sweepline implementation at https://github.com/rowanwins/sweepline-intersections
// which is published under the terms of MIT, but has been adapted to the use case of sprotty.
const tinyqueue_1 = __importDefault(__webpack_require__(/*! tinyqueue */ "./node_modules/tinyqueue/index.js"));
const geometry_1 = __webpack_require__(/*! ../../utils/geometry */ "./node_modules/sprotty/lib/utils/geometry.js");
/*
 * The algorithm implemented in this module is loosely based on the Bentley-Ottmann algorithm for
 * finding intersection among line segments in `O((n+k) log n)`, whereas `n` is the number of line
 * segments and `k` is the number of intersections.
 * The underlying idea is to use a imaginary sweep line that moves over the x/y plane and testing
 * only the line segments for intersection that the sweepline currently crosses, instead of
 * testing all segment with each other, which would be `O(n^2)`.
 * It does so by generating a prioritized event queue for start and end events of the line segments
 * and working its way through the queue (i.e., sweeping).
 * More information can be found at https://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm
 * In contrast to the original Bently-Ottmann algorithm, the implementation below does not use a tree
 * data structure to store the segments in order to simplify the implementation.
 * See also https://github.com/rowanwins/sweepline-intersections#algorithm-notes
 */
/**
 * Add the specified `route` to the event `queue` from left to right.
 * @param routeId id of the route.
 * @param route the route as array of points.
 * @param queue the queue to add the route to.
 */
function addRoute(routeId, route, queue) {
    if (route.length < 1)
        return;
    let currentPoint = route[0];
    let nextPoint = undefined;
    for (let i = 0; i < route.length - 1; i++) {
        nextPoint = route[i + 1];
        const e1 = new SweepEvent(routeId, currentPoint, i);
        const e2 = new SweepEvent(routeId, nextPoint, i + 1);
        e1.otherEvent = e2;
        e2.otherEvent = e1;
        if (checkWhichEventIsLeft(e1, e2) > 0) {
            e2.isLeftEndpoint = true;
            e1.isLeftEndpoint = false;
        }
        else {
            e1.isLeftEndpoint = true;
            e2.isLeftEndpoint = false;
        }
        queue.push(e1);
        queue.push(e2);
        currentPoint = nextPoint;
    }
}
exports.addRoute = addRoute;
/**
 * Returns which of the two events is left.
 * This is used to classify the endpoints of a segment when generating the
 * event queue.
 */
function checkWhichEventIsLeft(e1, e2) {
    if (e1.point.x > e2.point.x)
        return 1;
    if (e1.point.x < e2.point.x)
        return -1;
    if (e1.point.y !== e2.point.y)
        return e1.point.y > e2.point.y ? 1 : -1;
    return 1;
}
exports.checkWhichEventIsLeft = checkWhichEventIsLeft;
/**
 * An event -- or with other words a start or end point of a segment -- in the context
 * of the event queue for the sweep.
 *
 * Stores the original Sprotty `edgeId` and the segment index of this segment in the edge
 * to keep track of which edge and segment this event originated from.
 */
class SweepEvent {
    constructor(edgeId, point, segmentIndex) {
        this.edgeId = edgeId;
        this.point = point;
        this.segmentIndex = segmentIndex;
    }
}
exports.SweepEvent = SweepEvent;
/**
 * A line segment consists of a start and a stop event.
 */
class Segment {
    constructor(event) {
        this.leftSweepEvent = event;
        this.rightSweepEvent = event.otherEvent;
    }
}
exports.Segment = Segment;
/**
 * Performs the main sweep algorithm on the specified event queue.
 *
 * An empty priority queue is created to store segments encountered.
 * An item is removed from the priority queue if the vertex is the left endpoint
 * of a segment, we test it against every other segment in the segment queue for
 * intersections with any intersection recorded. We then add the vertex (and it's
 * associated right endpoint) to the segment queue.
 * If we encounter a right endpoint we remove the first item from the segment queue.
 *
 * Each pair of segments are only tested once. And only segments that overlap on the
 * x plane are tested against each other.
 *
 * @param eventQueue the event queue.
 * @returns the identified intersections.
 */
function runSweep(eventQueue) {
    const intersectionPoints = [];
    const outQueue = new tinyqueue_1.default([], checkWhichSegmentHasRightEndpointFirst);
    while (eventQueue.length) {
        const event = eventQueue.pop();
        if (event === null || event === void 0 ? void 0 : event.isLeftEndpoint) {
            const segment = new Segment(event);
            for (let i = 0; i < outQueue.data.length; i++) {
                const otherSegment = outQueue.data[i];
                const intersection = intersectionOfSegments(segment, otherSegment);
                if (intersection) {
                    intersectionPoints.push({
                        routable1: event.edgeId,
                        routable2: otherSegment.leftSweepEvent.edgeId,
                        segmentIndex1: getSegmentIndex(segment),
                        segmentIndex2: getSegmentIndex(otherSegment),
                        intersectionPoint: intersection
                    });
                }
            }
            outQueue.push(segment);
        }
        else if ((event === null || event === void 0 ? void 0 : event.isLeftEndpoint) === false) {
            outQueue.pop();
        }
    }
    return intersectionPoints;
}
exports.runSweep = runSweep;
/**
 * Specifies which of the two specified segments has a right endpoint first.
 * Used as a comparator to sort the event queue.
 */
function checkWhichSegmentHasRightEndpointFirst(seg1, seg2) {
    if (seg1.rightSweepEvent.point.x > seg2.rightSweepEvent.point.x)
        return 1;
    if (seg1.rightSweepEvent.point.x < seg2.rightSweepEvent.point.x)
        return -1;
    if (seg1.rightSweepEvent.point.y !== seg2.rightSweepEvent.point.y)
        return seg1.rightSweepEvent.point.y < seg2.rightSweepEvent.point.y ? 1 : -1;
    return 1;
}
exports.checkWhichSegmentHasRightEndpointFirst = checkWhichSegmentHasRightEndpointFirst;
function getSegmentIndex(segment) {
    return Math.min(segment.leftSweepEvent.segmentIndex, segment.rightSweepEvent.segmentIndex);
}
exports.getSegmentIndex = getSegmentIndex;
/**
 * Tests whether two segments intersect and returns the intersection point if existing.
 */
function intersectionOfSegments(seg1, seg2) {
    if (seg1.leftSweepEvent.edgeId === seg2.leftSweepEvent.edgeId) {
        return undefined;
    }
    const seg1Line = new geometry_1.PointToPointLine(seg1.leftSweepEvent.point, seg1.rightSweepEvent.point);
    const seg2Line = new geometry_1.PointToPointLine(seg2.leftSweepEvent.point, seg2.rightSweepEvent.point);
    return seg1Line.intersection(seg2Line);
}
exports.intersectionOfSegments = intersectionOfSegments;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edge-layout/di.config.js":
/*!********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edge-layout/di.config.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const edge_layout_1 = __webpack_require__(/*! ./edge-layout */ "./node_modules/sprotty/lib/features/edge-layout/edge-layout.js");
const edgeLayoutModule = new inversify_1.ContainerModule(bind => {
    bind(edge_layout_1.EdgeLayoutPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(edge_layout_1.EdgeLayoutPostprocessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(edge_layout_1.EdgeLayoutPostprocessor);
});
exports["default"] = edgeLayoutModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edge-layout/edge-layout.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edge-layout/edge-layout.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EdgeLayoutPostprocessor = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const sgraph_1 = __webpack_require__(/*! ../../graph/sgraph */ "./node_modules/sprotty/lib/graph/sgraph.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/edge-layout/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
let EdgeLayoutPostprocessor = class EdgeLayoutPostprocessor {
    decorate(vnode, element) {
        if ((0, model_2.isEdgeLayoutable)(element) && element.parent instanceof sgraph_1.SEdge) {
            if (element.bounds !== geometry_1.Bounds.EMPTY) {
                const placement = this.getEdgePlacement(element);
                const edge = element.parent;
                const position = Math.min(1, Math.max(0, placement.position));
                const router = this.edgeRouterRegistry.get(edge.routerKind);
                const pointOnEdge = router.pointAt(edge, position);
                const derivativeOnEdge = router.derivativeAt(edge, position);
                let transform = '';
                if (pointOnEdge && derivativeOnEdge) {
                    transform += `translate(${pointOnEdge.x}, ${pointOnEdge.y})`;
                    const angle = (0, geometry_1.toDegrees)(Math.atan2(derivativeOnEdge.y, derivativeOnEdge.x));
                    if (placement.rotate) {
                        let flippedAngle = angle;
                        if (Math.abs(angle) > 90) {
                            if (angle < 0)
                                flippedAngle += 180;
                            else if (angle > 0)
                                flippedAngle -= 180;
                        }
                        transform += ` rotate(${flippedAngle})`;
                        const alignment = this.getRotatedAlignment(element, placement, flippedAngle !== angle);
                        transform += ` translate(${alignment.x}, ${alignment.y})`;
                    }
                    else {
                        const alignment = this.getAlignment(element, placement, angle);
                        transform += ` translate(${alignment.x}, ${alignment.y})`;
                    }
                    (0, vnode_utils_1.setAttr)(vnode, 'transform', transform);
                }
            }
        }
        return vnode;
    }
    getRotatedAlignment(element, placement, flip) {
        let x = (0, model_1.isAlignable)(element) ? element.alignment.x : 0;
        let y = (0, model_1.isAlignable)(element) ? element.alignment.y : 0;
        const bounds = element.bounds;
        if (placement.side === 'on')
            return { x: x - 0.5 * bounds.height, y: y - 0.5 * bounds.height };
        if (flip) {
            if (placement.position < 0.3333333)
                x -= bounds.width + placement.offset;
            else if (placement.position < 0.6666666)
                x -= 0.5 * bounds.width;
            else
                x += placement.offset;
            switch (placement.side) {
                case 'left':
                case 'bottom':
                    y -= placement.offset + bounds.height;
                    break;
                case 'right':
                case 'top':
                    y += placement.offset;
            }
        }
        else {
            if (placement.position < 0.3333333)
                x += placement.offset;
            else if (placement.position < 0.6666666)
                x -= 0.5 * bounds.width;
            else
                x -= bounds.width + placement.offset;
            switch (placement.side) {
                case 'right':
                case 'bottom':
                    y += -placement.offset - bounds.height;
                    break;
                case 'left':
                case 'top':
                    y += placement.offset;
            }
        }
        return { x, y };
    }
    getEdgePlacement(element) {
        let current = element;
        const allPlacements = [];
        while (current !== undefined) {
            const placement = current.edgePlacement;
            if (placement !== undefined)
                allPlacements.push(placement);
            if (current instanceof smodel_1.SChildElement)
                current = current.parent;
            else
                break;
        }
        return allPlacements.reverse().reduce((a, b) => { return Object.assign(Object.assign({}, a), b); }, model_2.DEFAULT_EDGE_PLACEMENT);
    }
    getAlignment(label, placement, angle) {
        const bounds = label.bounds;
        const x = (0, model_1.isAlignable)(label) ? label.alignment.x - bounds.width : 0;
        const y = (0, model_1.isAlignable)(label) ? label.alignment.y - bounds.height : 0;
        if (placement.side === 'on')
            return { x: x + 0.5 * bounds.height, y: y + 0.5 * bounds.height };
        const quadrant = this.getQuadrant(angle);
        const midLeft = { x: placement.offset, y: y + 0.5 * bounds.height };
        const topLeft = { x: placement.offset, y: y + bounds.height + placement.offset };
        const topRight = { x: -bounds.width - placement.offset, y: y + bounds.height + placement.offset };
        const midRight = { x: -bounds.width - placement.offset, y: y + 0.5 * bounds.height };
        const bottomRight = { x: -bounds.width - placement.offset, y: y - placement.offset };
        const bottomLeft = { x: placement.offset, y: y - placement.offset };
        switch (placement.side) {
            case 'left':
                switch (quadrant.orientation) {
                    case 'west':
                        return geometry_1.Point.linear(topLeft, topRight, quadrant.position);
                    case 'north':
                        return geometry_1.Point.linear(topRight, bottomRight, quadrant.position);
                    case 'east':
                        return geometry_1.Point.linear(bottomRight, bottomLeft, quadrant.position);
                    case 'south':
                        return geometry_1.Point.linear(bottomLeft, topLeft, quadrant.position);
                }
                break;
            case 'right':
                switch (quadrant.orientation) {
                    case 'west':
                        return geometry_1.Point.linear(bottomRight, bottomLeft, quadrant.position);
                    case 'north':
                        return geometry_1.Point.linear(bottomLeft, topLeft, quadrant.position);
                    case 'east':
                        return geometry_1.Point.linear(topLeft, topRight, quadrant.position);
                    case 'south':
                        return geometry_1.Point.linear(topRight, bottomRight, quadrant.position);
                }
                break;
            case 'top':
                switch (quadrant.orientation) {
                    case 'west':
                        return geometry_1.Point.linear(bottomRight, bottomLeft, quadrant.position);
                    case 'north':
                        return this.linearFlip(bottomLeft, midLeft, midRight, bottomRight, quadrant.position);
                    case 'east':
                        return geometry_1.Point.linear(bottomRight, bottomLeft, quadrant.position);
                    case 'south':
                        return this.linearFlip(bottomLeft, midLeft, midRight, bottomRight, quadrant.position);
                }
                break;
            case 'bottom':
                switch (quadrant.orientation) {
                    case 'west':
                        return geometry_1.Point.linear(topLeft, topRight, quadrant.position);
                    case 'north':
                        return this.linearFlip(topRight, midRight, midLeft, topLeft, quadrant.position);
                    case 'east':
                        return geometry_1.Point.linear(topLeft, topRight, quadrant.position);
                    case 'south':
                        return this.linearFlip(topRight, midRight, midLeft, topLeft, quadrant.position);
                }
                break;
        }
        return { x: 0, y: 0 };
    }
    getQuadrant(angle) {
        if (Math.abs(angle) > 135)
            return { orientation: 'west', position: (angle > 0 ? angle - 135 : angle + 225) / 90 };
        else if (angle < -45)
            return { orientation: 'north', position: (angle + 135) / 90 };
        else if (angle < 45)
            return { orientation: 'east', position: (angle + 45) / 90 };
        else
            return { orientation: 'south', position: (angle - 45) / 90 };
    }
    linearFlip(p0, p1, p2, p3, position) {
        return position < 0.5 ? geometry_1.Point.linear(p0, p1, 2 * position) : geometry_1.Point.linear(p2, p3, 2 * position - 1);
    }
    postUpdate() { }
};
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], EdgeLayoutPostprocessor.prototype, "edgeRouterRegistry", void 0);
EdgeLayoutPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], EdgeLayoutPostprocessor);
exports.EdgeLayoutPostprocessor = EdgeLayoutPostprocessor;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edge-layout/model.js":
/*!****************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edge-layout/model.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_EDGE_PLACEMENT = exports.EdgePlacement = exports.isEdgeLayoutable = exports.edgeLayoutFeature = void 0;
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
exports.edgeLayoutFeature = Symbol('edgeLayout');
function isEdgeLayoutable(element) {
    return element instanceof smodel_1.SChildElement
        && element.parent instanceof model_2.SRoutableElement
        && checkEdgeLayoutable(element)
        && (0, model_1.isBoundsAware)(element)
        && element.hasFeature(exports.edgeLayoutFeature);
}
exports.isEdgeLayoutable = isEdgeLayoutable;
function checkEdgeLayoutable(element) {
    return 'edgePlacement' in element;
}
class EdgePlacement extends Object {
}
exports.EdgePlacement = EdgePlacement;
exports.DEFAULT_EDGE_PLACEMENT = {
    rotate: true,
    side: 'top',
    position: 0.5,
    offset: 7
};


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/create-on-drag.js":
/*!******************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/create-on-drag.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isCreatingOnDrag = exports.creatingOnDragFeature = void 0;
exports.creatingOnDragFeature = Symbol('creatingOnDragFeature');
function isCreatingOnDrag(element) {
    return element.hasFeature(exports.creatingOnDragFeature) && element.createAction !== undefined;
}
exports.isCreatingOnDrag = isCreatingOnDrag;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/create.js":
/*!**********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/create.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CreateElementCommand = exports.CreateElementAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
var CreateElementAction;
(function (CreateElementAction) {
    CreateElementAction.KIND = 'createElement';
    function create(elementSchema, options) {
        return {
            kind: CreateElementAction.KIND,
            elementSchema,
            containerId: options.containerId
        };
    }
    CreateElementAction.create = create;
})(CreateElementAction = exports.CreateElementAction || (exports.CreateElementAction = {}));
let CreateElementCommand = class CreateElementCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const container = context.root.index.getById(this.action.containerId);
        if (container instanceof smodel_1.SParentElement) {
            this.container = container;
            this.newElement = context.modelFactory.createElement(this.action.elementSchema);
            this.container.add(this.newElement);
        }
        return context.root;
    }
    undo(context) {
        this.container.remove(this.newElement);
        return context.root;
    }
    redo(context) {
        this.container.add(this.newElement);
        return context.root;
    }
};
CreateElementCommand.KIND = CreateElementAction.KIND;
CreateElementCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], CreateElementCommand);
exports.CreateElementCommand = CreateElementCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/delete.js":
/*!**********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/delete.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeleteElementCommand = exports.ResolvedDelete = exports.DeleteElementAction = exports.isDeletable = exports.deletableFeature = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
exports.deletableFeature = Symbol('deletableFeature');
function isDeletable(element) {
    return element instanceof smodel_1.SChildElement && element.hasFeature(exports.deletableFeature);
}
exports.isDeletable = isDeletable;
var DeleteElementAction;
(function (DeleteElementAction) {
    DeleteElementAction.KIND = 'delete';
    function create(elementIds) {
        return {
            kind: DeleteElementAction.KIND,
            elementIds
        };
    }
    DeleteElementAction.create = create;
})(DeleteElementAction = exports.DeleteElementAction || (exports.DeleteElementAction = {}));
class ResolvedDelete {
}
exports.ResolvedDelete = ResolvedDelete;
let DeleteElementCommand = class DeleteElementCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.resolvedDeletes = [];
    }
    execute(context) {
        const index = context.root.index;
        for (const id of this.action.elementIds) {
            const element = index.getById(id);
            if (element && isDeletable(element)) {
                this.resolvedDeletes.push({ child: element, parent: element.parent });
                element.parent.remove(element);
            }
        }
        return context.root;
    }
    undo(context) {
        for (const resolvedDelete of this.resolvedDeletes)
            resolvedDelete.parent.add(resolvedDelete.child);
        return context.root;
    }
    redo(context) {
        for (const resolvedDelete of this.resolvedDeletes)
            resolvedDelete.parent.remove(resolvedDelete.child);
        return context.root;
    }
};
DeleteElementCommand.KIND = DeleteElementAction.KIND;
DeleteElementCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], DeleteElementCommand);
exports.DeleteElementCommand = DeleteElementCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/di.config.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/di.config.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.labelEditUiModule = exports.labelEditModule = exports.edgeEditModule = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const action_handler_1 = __webpack_require__(/*! ../../base/actions/action-handler */ "./node_modules/sprotty/lib/base/actions/action-handler.js");
const view_1 = __webpack_require__(/*! ../../base/views/view */ "./node_modules/sprotty/lib/base/views/view.js");
const model_1 = __webpack_require__(/*! ../../features/routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const svg_views_1 = __webpack_require__(/*! ../../lib/svg-views */ "./node_modules/sprotty/lib/lib/svg-views.js");
const delete_1 = __webpack_require__(/*! ./delete */ "./node_modules/sprotty/lib/features/edit/delete.js");
const edit_label_1 = __webpack_require__(/*! ./edit-label */ "./node_modules/sprotty/lib/features/edit/edit-label.js");
const edit_label_ui_1 = __webpack_require__(/*! ./edit-label-ui */ "./node_modules/sprotty/lib/features/edit/edit-label-ui.js");
const edit_routing_1 = __webpack_require__(/*! ./edit-routing */ "./node_modules/sprotty/lib/features/edit/edit-routing.js");
const reconnect_1 = __webpack_require__(/*! ./reconnect */ "./node_modules/sprotty/lib/features/edit/reconnect.js");
exports.edgeEditModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, command_registration_1.configureCommand)(context, edit_routing_1.SwitchEditModeCommand);
    (0, command_registration_1.configureCommand)(context, reconnect_1.ReconnectCommand);
    (0, command_registration_1.configureCommand)(context, delete_1.DeleteElementCommand);
    (0, view_1.configureModelElement)(context, 'dangling-anchor', model_1.SDanglingAnchor, svg_views_1.EmptyGroupView);
});
exports.labelEditModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(edit_label_1.EditLabelMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(edit_label_1.EditLabelMouseListener);
    bind(edit_label_1.EditLabelKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(edit_label_1.EditLabelKeyListener);
    (0, command_registration_1.configureCommand)({ bind, isBound }, edit_label_1.ApplyLabelEditCommand);
});
exports.labelEditUiModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    const context = { bind, isBound };
    (0, action_handler_1.configureActionHandler)(context, edit_label_1.EditLabelAction.KIND, edit_label_ui_1.EditLabelActionHandler);
    bind(edit_label_ui_1.EditLabelUI).toSelf().inSingletonScope();
    bind(types_1.TYPES.IUIExtension).toService(edit_label_ui_1.EditLabelUI);
});


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/edit-label-ui.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/edit-label-ui.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2022 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EditLabelUI_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditLabelUI = exports.EditLabelActionHandler = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const ui_extension_1 = __webpack_require__(/*! ../../base/ui-extensions/ui-extension */ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension.js");
const ui_extension_registry_1 = __webpack_require__(/*! ../../base/ui-extensions/ui-extension-registry */ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js");
const dom_helper_1 = __webpack_require__(/*! ../../base/views/dom-helper */ "./node_modules/sprotty/lib/base/views/dom-helper.js");
const commit_model_1 = __webpack_require__(/*! ../../model-source/commit-model */ "./node_modules/sprotty/lib/model-source/commit-model.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const zoom_1 = __webpack_require__(/*! ../viewport/zoom */ "./node_modules/sprotty/lib/features/viewport/zoom.js");
const edit_label_1 = __webpack_require__(/*! ./edit-label */ "./node_modules/sprotty/lib/features/edit/edit-label.js");
const model_2 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/edit/model.js");
/** Shows a UI extension for editing a label on emitted `EditLabelAction`s. */
let EditLabelActionHandler = class EditLabelActionHandler {
    handle(action) {
        if ((0, edit_label_1.isEditLabelAction)(action)) {
            return ui_extension_registry_1.SetUIExtensionVisibilityAction.create({ extensionId: EditLabelUI.ID, visible: true, contextElementsId: [action.labelId] });
        }
    }
};
EditLabelActionHandler = __decorate([
    (0, inversify_1.injectable)()
], EditLabelActionHandler);
exports.EditLabelActionHandler = EditLabelActionHandler;
let EditLabelUI = EditLabelUI_1 = class EditLabelUI extends ui_extension_1.AbstractUIExtension {
    constructor() {
        super(...arguments);
        this.validationTimeout = undefined;
        this.isActive = false;
        this.blockApplyEditOnInvalidInput = true;
        this.isCurrentLabelValid = true;
    }
    id() { return EditLabelUI_1.ID; }
    containerClass() { return 'label-edit'; }
    get labelId() { return this.label ? this.label.id : 'unknown'; }
    initializeContents(containerElement) {
        containerElement.style.position = 'absolute';
        this.inputElement = document.createElement('input');
        this.textAreaElement = document.createElement('textarea');
        [this.inputElement, this.textAreaElement].forEach((element) => {
            element.onkeydown = event => this.applyLabelEditOnEvent(event, 'Enter');
            this.configureAndAdd(element, containerElement);
        });
    }
    configureAndAdd(element, containerElement) {
        element.style.visibility = 'hidden';
        element.style.position = 'absolute';
        element.style.top = '0px';
        element.style.left = '0px';
        element.addEventListener('keydown', (event) => this.hideIfEscapeEvent(event));
        element.addEventListener('keyup', (event) => this.validateLabelIfContentChange(event, element.value));
        element.addEventListener('blur', () => window.setTimeout(() => this.applyLabelEdit(), 200));
        containerElement.appendChild(element);
    }
    get editControl() {
        if (this.label && this.label.isMultiLine) {
            return this.textAreaElement;
        }
        return this.inputElement;
    }
    hideIfEscapeEvent(event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            this.hide();
        }
    }
    applyLabelEditOnEvent(event, code, ...modifiers) {
        if ((0, keyboard_1.matchesKeystroke)(event, code ? code : 'Enter', ...modifiers)) {
            event.preventDefault();
            this.applyLabelEdit();
        }
    }
    validateLabelIfContentChange(event, value) {
        if (this.previousLabelContent === undefined || this.previousLabelContent !== value) {
            this.previousLabelContent = value;
            this.performLabelValidation(event, this.editControl.value);
        }
    }
    async applyLabelEdit() {
        var _a;
        if (!this.isActive) {
            return;
        }
        if (((_a = this.label) === null || _a === void 0 ? void 0 : _a.text) === this.editControl.value) {
            // no action necessary
            this.hide();
            return;
        }
        if (this.blockApplyEditOnInvalidInput) {
            const result = await this.validateLabel(this.editControl.value);
            if ('error' === result.severity) {
                this.editControl.focus();
                return;
            }
        }
        this.actionDispatcherProvider()
            .then((actionDispatcher) => actionDispatcher.dispatchAll([actions_1.ApplyLabelEditAction.create(this.labelId, this.editControl.value), commit_model_1.CommitModelAction.create()]))
            .catch((reason) => this.logger.error(this, 'No action dispatcher available to execute apply label edit action', reason));
        this.hide();
    }
    performLabelValidation(event, value) {
        if (this.validationTimeout) {
            window.clearTimeout(this.validationTimeout);
        }
        this.validationTimeout = window.setTimeout(() => this.validateLabel(value), 200);
    }
    async validateLabel(value) {
        if (this.labelValidator && this.label) {
            try {
                const result = await this.labelValidator.validate(value, this.label);
                this.isCurrentLabelValid = 'error' !== result.severity;
                this.showValidationResult(result);
                return result;
            }
            catch (reason) {
                this.logger.error(this, 'Error validating edited label', reason);
            }
        }
        this.isCurrentLabelValid = true;
        return { severity: 'ok', message: undefined };
    }
    showValidationResult(result) {
        this.clearValidationResult();
        if (this.validationDecorator) {
            this.validationDecorator.decorate(this.editControl, result);
        }
    }
    clearValidationResult() {
        if (this.validationDecorator) {
            this.validationDecorator.dispose(this.editControl);
        }
    }
    show(root, ...contextElementIds) {
        if (!hasEditableLabel(contextElementIds, root) || this.isActive) {
            return;
        }
        super.show(root, ...contextElementIds);
        this.isActive = true;
    }
    hide() {
        this.editControl.style.visibility = 'hidden';
        super.hide();
        this.clearValidationResult();
        this.isActive = false;
        this.isCurrentLabelValid = true;
        this.previousLabelContent = undefined;
        if (this.labelElement) {
            this.labelElement.style.visibility = 'visible';
        }
    }
    onBeforeShow(containerElement, root, ...contextElementIds) {
        this.label = getEditableLabels(contextElementIds, root)[0];
        this.previousLabelContent = this.label.text;
        this.setPosition(containerElement);
        this.applyTextContents();
        this.applyFontStyling();
        this.editControl.style.visibility = 'visible';
        this.editControl.focus();
    }
    setPosition(containerElement) {
        let x = 0;
        let y = 0;
        let width = 100;
        let height = 20;
        if (this.label) {
            const zoom = (0, zoom_1.getZoom)(this.label);
            const bounds = (0, model_1.getAbsoluteClientBounds)(this.label, this.domHelper, this.viewerOptions);
            x = bounds.x + (this.label.editControlPositionCorrection ? this.label.editControlPositionCorrection.x : 0) * zoom;
            y = bounds.y + (this.label.editControlPositionCorrection ? this.label.editControlPositionCorrection.y : 0) * zoom;
            height = (this.label.editControlDimension ? this.label.editControlDimension.height : height) * zoom;
            width = (this.label.editControlDimension ? this.label.editControlDimension.width : width) * zoom;
        }
        containerElement.style.left = `${x}px`;
        containerElement.style.top = `${y}px`;
        containerElement.style.width = `${width}px`;
        this.editControl.style.width = `${width}px`;
        containerElement.style.height = `${height}px`;
        this.editControl.style.height = `${height}px`;
    }
    applyTextContents() {
        if (this.label) {
            this.editControl.value = this.label.text;
            if (this.editControl instanceof HTMLTextAreaElement) {
                this.editControl.selectionStart = 0;
                this.editControl.selectionEnd = 0;
                this.editControl.scrollTop = 0;
                this.editControl.scrollLeft = 0;
            }
            else {
                this.editControl.setSelectionRange(0, this.editControl.value.length);
            }
        }
    }
    applyFontStyling() {
        if (this.label) {
            this.labelElement = document.getElementById(this.domHelper.createUniqueDOMElementId(this.label));
            if (this.labelElement) {
                this.labelElement.style.visibility = 'hidden';
                const style = window.getComputedStyle(this.labelElement);
                this.editControl.style.font = style.font;
                this.editControl.style.fontStyle = style.fontStyle;
                this.editControl.style.fontFamily = style.fontFamily;
                this.editControl.style.fontSize = scaledFont(style.fontSize, (0, zoom_1.getZoom)(this.label));
                this.editControl.style.fontWeight = style.fontWeight;
                this.editControl.style.lineHeight = style.lineHeight;
            }
        }
    }
};
EditLabelUI.ID = 'editLabelUi';
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcherProvider),
    __metadata("design:type", Function)
], EditLabelUI.prototype, "actionDispatcherProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], EditLabelUI.prototype, "viewerOptions", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.DOMHelper),
    __metadata("design:type", dom_helper_1.DOMHelper)
], EditLabelUI.prototype, "domHelper", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IEditLabelValidator),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], EditLabelUI.prototype, "labelValidator", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IEditLabelValidationDecorator),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], EditLabelUI.prototype, "validationDecorator", void 0);
EditLabelUI = EditLabelUI_1 = __decorate([
    (0, inversify_1.injectable)()
], EditLabelUI);
exports.EditLabelUI = EditLabelUI;
function hasEditableLabel(contextElementIds, root) {
    return getEditableLabels(contextElementIds, root).length === 1;
}
function getEditableLabels(contextElementIds, root) {
    return contextElementIds.map(id => root.index.getById(id)).filter(model_2.isEditableLabel);
}
function scaledFont(font, zoom) {
    return font.replace(/([0-9]+)/, (match) => {
        return String(Number.parseInt(match, 10) * zoom);
    });
}


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/edit-label.js":
/*!**************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/edit-label.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getEditableLabel = exports.EditLabelKeyListener = exports.EditLabelMouseListener = exports.ApplyLabelEditCommand = exports.ResolvedLabelEdit = exports.isApplyLabelEditAction = exports.ApplyLabelEditAction = exports.isEditLabelAction = exports.EditLabelAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
const model_1 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "./node_modules/sprotty/lib/utils/iterable.js");
const model_2 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/edit/model.js");
var EditLabelAction;
(function (EditLabelAction) {
    EditLabelAction.KIND = 'EditLabel';
    function create(labelId) {
        return {
            kind: EditLabelAction.KIND,
            labelId
        };
    }
    EditLabelAction.create = create;
})(EditLabelAction = exports.EditLabelAction || (exports.EditLabelAction = {}));
function isEditLabelAction(element) {
    return (0, actions_1.isAction)(element) && element.kind === EditLabelAction.KIND && 'labelId' in element;
}
exports.isEditLabelAction = isEditLabelAction;
var ApplyLabelEditAction;
(function (ApplyLabelEditAction) {
    ApplyLabelEditAction.KIND = 'applyLabelEdit';
    function create(labelId, text) {
        return {
            kind: ApplyLabelEditAction.KIND,
            labelId,
            text
        };
    }
    ApplyLabelEditAction.create = create;
})(ApplyLabelEditAction = exports.ApplyLabelEditAction || (exports.ApplyLabelEditAction = {}));
function isApplyLabelEditAction(element) {
    return (0, actions_1.isAction)(element) && element.kind === ApplyLabelEditAction.KIND && 'labelId' in element && 'text' in element;
}
exports.isApplyLabelEditAction = isApplyLabelEditAction;
class ResolvedLabelEdit {
}
exports.ResolvedLabelEdit = ResolvedLabelEdit;
let ApplyLabelEditCommand = class ApplyLabelEditCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const index = context.root.index;
        const label = index.getById(this.action.labelId);
        if (label && (0, model_2.isEditableLabel)(label)) {
            this.resolvedLabelEdit = { label, oldLabel: label.text, newLabel: this.action.text };
            label.text = this.action.text;
        }
        return context.root;
    }
    undo(context) {
        if (this.resolvedLabelEdit) {
            this.resolvedLabelEdit.label.text = this.resolvedLabelEdit.oldLabel;
        }
        return context.root;
    }
    redo(context) {
        if (this.resolvedLabelEdit) {
            this.resolvedLabelEdit.label.text = this.resolvedLabelEdit.newLabel;
        }
        return context.root;
    }
};
ApplyLabelEditCommand.KIND = ApplyLabelEditAction.KIND;
ApplyLabelEditCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ApplyLabelEditCommand);
exports.ApplyLabelEditCommand = ApplyLabelEditCommand;
class EditLabelMouseListener extends mouse_tool_1.MouseListener {
    doubleClick(target, event) {
        const editableLabel = getEditableLabel(target);
        if (editableLabel) {
            return [EditLabelAction.create(editableLabel.id)];
        }
        return [];
    }
}
exports.EditLabelMouseListener = EditLabelMouseListener;
class EditLabelKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'F2')) {
            const editableLabels = (0, iterable_1.toArray)(element.index.all()
                .filter(e => (0, model_1.isSelectable)(e) && e.selected)).map(getEditableLabel)
                .filter((e) => e !== undefined);
            if (editableLabels.length === 1) {
                return [EditLabelAction.create(editableLabels[0].id)];
            }
        }
        return [];
    }
}
exports.EditLabelKeyListener = EditLabelKeyListener;
function getEditableLabel(element) {
    if ((0, model_2.isEditableLabel)(element)) {
        return element;
    }
    else if ((0, model_2.isWithEditableLabel)(element) && element.editableLabel) {
        return element.editableLabel;
    }
    return undefined;
}
exports.getEditableLabel = getEditableLabel;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/edit-routing.js":
/*!****************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/edit-routing.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SwitchEditModeCommand = exports.SwitchEditModeAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const model_1 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
const model_2 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/edit/model.js");
var SwitchEditModeAction;
(function (SwitchEditModeAction) {
    SwitchEditModeAction.KIND = "switchEditMode";
    function create(options) {
        var _a, _b;
        return {
            kind: SwitchEditModeAction.KIND,
            elementsToActivate: (_a = options.elementsToActivate) !== null && _a !== void 0 ? _a : [],
            elementsToDeactivate: (_b = options.elementsToDeactivate) !== null && _b !== void 0 ? _b : []
        };
    }
    SwitchEditModeAction.create = create;
})(SwitchEditModeAction = exports.SwitchEditModeAction || (exports.SwitchEditModeAction = {}));
let SwitchEditModeCommand = class SwitchEditModeCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.elementsToActivate = [];
        this.elementsToDeactivate = [];
        this.handlesToRemove = [];
    }
    execute(context) {
        const index = context.root.index;
        this.action.elementsToActivate.forEach(id => {
            const element = index.getById(id);
            if (element !== undefined)
                this.elementsToActivate.push(element);
        });
        this.action.elementsToDeactivate.forEach(id => {
            const element = index.getById(id);
            if (element !== undefined)
                this.elementsToDeactivate.push(element);
            if (element instanceof model_1.SRoutingHandle && element.parent instanceof model_1.SRoutableElement) {
                const parent = element.parent;
                if (this.shouldRemoveHandle(element, parent)) {
                    this.handlesToRemove.push({ handle: element, parent });
                    this.elementsToDeactivate.push(parent);
                    this.elementsToActivate.push(parent);
                }
            }
        });
        return this.doExecute(context);
    }
    doExecute(context) {
        this.handlesToRemove.forEach(entry => {
            entry.point = entry.parent.routingPoints.splice(entry.handle.pointIndex, 1)[0];
        });
        this.elementsToDeactivate.forEach(element => {
            if (element instanceof model_1.SRoutableElement)
                element.removeAll(child => child instanceof model_1.SRoutingHandle);
            else if (element instanceof model_1.SRoutingHandle) {
                element.editMode = false;
                if (element.danglingAnchor) {
                    if (element.parent instanceof model_1.SRoutableElement && element.danglingAnchor.original) {
                        if (element.parent.source === element.danglingAnchor)
                            element.parent.sourceId = element.danglingAnchor.original.id;
                        else if (element.parent.target === element.danglingAnchor)
                            element.parent.targetId = element.danglingAnchor.original.id;
                        element.danglingAnchor.parent.remove(element.danglingAnchor);
                        element.danglingAnchor = undefined;
                    }
                }
            }
        });
        this.elementsToActivate.forEach(element => {
            if ((0, model_2.canEditRouting)(element) && element instanceof smodel_1.SParentElement) {
                const router = this.edgeRouterRegistry.get(element.routerKind);
                router.createRoutingHandles(element);
            }
            else if (element instanceof model_1.SRoutingHandle)
                element.editMode = true;
        });
        return context.root;
    }
    shouldRemoveHandle(handle, parent) {
        if (handle.kind === 'junction') {
            const route = this.edgeRouterRegistry.route(parent);
            return route.find(rp => rp.pointIndex === handle.pointIndex) === undefined;
        }
        return false;
    }
    undo(context) {
        this.handlesToRemove.forEach(entry => {
            if (entry.point !== undefined)
                entry.parent.routingPoints.splice(entry.handle.pointIndex, 0, entry.point);
        });
        this.elementsToActivate.forEach(element => {
            if (element instanceof model_1.SRoutableElement)
                element.removeAll(child => child instanceof model_1.SRoutingHandle);
            else if (element instanceof model_1.SRoutingHandle)
                element.editMode = false;
        });
        this.elementsToDeactivate.forEach(element => {
            if ((0, model_2.canEditRouting)(element)) {
                const router = this.edgeRouterRegistry.get(element.routerKind);
                router.createRoutingHandles(element);
            }
            else if (element instanceof model_1.SRoutingHandle)
                element.editMode = true;
        });
        return context.root;
    }
    redo(context) {
        return this.doExecute(context);
    }
};
SwitchEditModeCommand.KIND = SwitchEditModeAction.KIND;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], SwitchEditModeCommand.prototype, "edgeRouterRegistry", void 0);
SwitchEditModeCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SwitchEditModeCommand);
exports.SwitchEditModeCommand = SwitchEditModeCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/model.js":
/*!*********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/model.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isWithEditableLabel = exports.withEditLabelFeature = exports.isEditableLabel = exports.editLabelFeature = exports.canEditRouting = exports.editFeature = void 0;
const model_1 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
exports.editFeature = Symbol('editFeature');
function canEditRouting(element) {
    return element instanceof model_1.SRoutableElement && element.hasFeature(exports.editFeature);
}
exports.canEditRouting = canEditRouting;
exports.editLabelFeature = Symbol('editLabelFeature');
function isEditableLabel(element) {
    return 'text' in element && element.hasFeature(exports.editLabelFeature);
}
exports.isEditableLabel = isEditableLabel;
exports.withEditLabelFeature = Symbol('withEditLabelFeature');
function isWithEditableLabel(element) {
    return 'editableLabel' in element && element.hasFeature(exports.withEditLabelFeature);
}
exports.isWithEditableLabel = isWithEditableLabel;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/edit/reconnect.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/edit/reconnect.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReconnectCommand = exports.ReconnectAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const model_1 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
var ReconnectAction;
(function (ReconnectAction) {
    ReconnectAction.KIND = 'reconnect';
    function create(options) {
        return {
            kind: ReconnectAction.KIND,
            routableId: options.routableId,
            newSourceId: options.newSourceId,
            newTargetId: options.newTargetId
        };
    }
    ReconnectAction.create = create;
})(ReconnectAction = exports.ReconnectAction || (exports.ReconnectAction = {}));
let ReconnectCommand = class ReconnectCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.doExecute(context);
        return context.root;
    }
    doExecute(context) {
        const index = context.root.index;
        const edge = index.getById(this.action.routableId);
        if (edge instanceof model_1.SRoutableElement) {
            const router = this.edgeRouterRegistry.get(edge.routerKind);
            const before = router.takeSnapshot(edge);
            router.applyReconnect(edge, this.action.newSourceId, this.action.newTargetId);
            const after = router.takeSnapshot(edge);
            this.memento = {
                edge: edge,
                before,
                after
            };
        }
    }
    undo(context) {
        if (this.memento) {
            const router = this.edgeRouterRegistry.get(this.memento.edge.routerKind);
            router.applySnapshot(this.memento.edge, this.memento.before);
        }
        return context.root;
    }
    redo(context) {
        if (this.memento) {
            const router = this.edgeRouterRegistry.get(this.memento.edge.routerKind);
            router.applySnapshot(this.memento.edge, this.memento.after);
        }
        return context.root;
    }
};
ReconnectCommand.KIND = ReconnectAction.KIND;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], ReconnectCommand.prototype, "edgeRouterRegistry", void 0);
ReconnectCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ReconnectCommand);
exports.ReconnectCommand = ReconnectCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/expand/di.config.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/expand/di.config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const button_handler_1 = __webpack_require__(/*! ../button/button-handler */ "./node_modules/sprotty/lib/features/button/button-handler.js");
const expand_1 = __webpack_require__(/*! ./expand */ "./node_modules/sprotty/lib/features/expand/expand.js");
const expandModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, button_handler_1.configureButtonHandler)({ bind, isBound }, expand_1.ExpandButtonHandler.TYPE, expand_1.ExpandButtonHandler);
});
exports["default"] = expandModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/expand/expand.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/expand/expand.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpandButtonHandler = exports.CollapseExpandAllAction = exports.CollapseExpandAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/expand/model.js");
/**
 * Sent from the client to the model source to recalculate a diagram when elements
 * are collapsed/expanded by the client.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class CollapseExpandAction {
    constructor(expandIds, collapseIds) {
        this.expandIds = expandIds;
        this.collapseIds = collapseIds;
        this.kind = CollapseExpandAction.KIND;
    }
}
exports.CollapseExpandAction = CollapseExpandAction;
CollapseExpandAction.KIND = 'collapseExpand';
/**
 * Programmatic action for expanding or collapsing all elements.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class CollapseExpandAllAction {
    /**
     * If `expand` is true, all elements are expanded, othewise they are collapsed.
     */
    constructor(expand = true) {
        this.expand = expand;
        this.kind = CollapseExpandAllAction.KIND;
    }
}
exports.CollapseExpandAllAction = CollapseExpandAllAction;
CollapseExpandAllAction.KIND = 'collapseExpandAll';
let ExpandButtonHandler = class ExpandButtonHandler {
    buttonPressed(button) {
        const expandable = (0, smodel_utils_1.findParentByFeature)(button, model_1.isExpandable);
        if (expandable !== undefined) {
            return [actions_1.CollapseExpandAction.create({
                    expandIds: expandable.expanded ? [] : [expandable.id],
                    collapseIds: expandable.expanded ? [expandable.id] : []
                })];
        }
        else {
            return [];
        }
    }
};
ExpandButtonHandler.TYPE = 'button:expand';
ExpandButtonHandler = __decorate([
    (0, inversify_1.injectable)()
], ExpandButtonHandler);
exports.ExpandButtonHandler = ExpandButtonHandler;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/expand/model.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/expand/model.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isExpandable = exports.expandFeature = void 0;
exports.expandFeature = Symbol('expandFeature');
function isExpandable(element) {
    return element.hasFeature(exports.expandFeature) && 'expanded' in element;
}
exports.isExpandable = isExpandable;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/expand/views.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/expand/views.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpandButtonView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/expand/model.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let ExpandButtonView = class ExpandButtonView {
    render(button, context) {
        const expandable = (0, smodel_utils_1.findParentByFeature)(button, model_1.isExpandable);
        const path = (expandable !== undefined && expandable.expanded)
            ? 'M 1,5 L 8,12 L 15,5 Z'
            : 'M 1,8 L 8,15 L 8,1 Z';
        return (0, jsx_1.svg)("g", { "class-sprotty-button": "{true}", "class-enabled": "{button.enabled}" },
            (0, jsx_1.svg)("rect", { x: 0, y: 0, width: 16, height: 16, opacity: 0 }),
            (0, jsx_1.svg)("path", { d: path }));
    }
};
ExpandButtonView = __decorate([
    (0, inversify_1.injectable)()
], ExpandButtonView);
exports.ExpandButtonView = ExpandButtonView;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/export/di.config.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/export/di.config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const export_1 = __webpack_require__(/*! ./export */ "./node_modules/sprotty/lib/features/export/export.js");
const svg_exporter_1 = __webpack_require__(/*! ./svg-exporter */ "./node_modules/sprotty/lib/features/export/svg-exporter.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const exportSvgModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(export_1.ExportSvgKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(export_1.ExportSvgKeyListener);
    bind(types_1.TYPES.HiddenVNodePostprocessor).to(export_1.ExportSvgPostprocessor).inSingletonScope();
    (0, command_registration_1.configureCommand)({ bind, isBound }, export_1.ExportSvgCommand);
    bind(types_1.TYPES.SvgExporter).to(svg_exporter_1.SvgExporter).inSingletonScope();
});
exports["default"] = exportSvgModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/export/export.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/export/export.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExportSvgPostprocessor = exports.ExportSvgCommand = exports.RequestExportSvgAction = exports.ExportSvgKeyListener = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const model_1 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
const model_2 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/export/model.js");
const svg_exporter_1 = __webpack_require__(/*! ./svg-exporter */ "./node_modules/sprotty/lib/features/export/svg-exporter.js");
const model_3 = __webpack_require__(/*! ../viewport/model */ "./node_modules/sprotty/lib/features/viewport/model.js");
const model_4 = __webpack_require__(/*! ../hover/model */ "./node_modules/sprotty/lib/features/hover/model.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
let ExportSvgKeyListener = class ExportSvgKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyE', 'ctrlCmd', 'shift'))
            return [RequestExportSvgAction.create()];
        else
            return [];
    }
};
ExportSvgKeyListener = __decorate([
    (0, inversify_1.injectable)()
], ExportSvgKeyListener);
exports.ExportSvgKeyListener = ExportSvgKeyListener;
var RequestExportSvgAction;
(function (RequestExportSvgAction) {
    RequestExportSvgAction.KIND = 'requestExportSvg';
    function create() {
        return {
            kind: RequestExportSvgAction.KIND,
            requestId: (0, actions_1.generateRequestId)()
        };
    }
    RequestExportSvgAction.create = create;
})(RequestExportSvgAction = exports.RequestExportSvgAction || (exports.RequestExportSvgAction = {}));
let ExportSvgCommand = class ExportSvgCommand extends command_1.HiddenCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        if ((0, model_2.isExportable)(context.root)) {
            const root = context.modelFactory.createRoot(context.root);
            if ((0, model_2.isExportable)(root)) {
                if ((0, model_3.isViewport)(root)) {
                    root.zoom = 1;
                    root.scroll = { x: 0, y: 0 };
                }
                root.index.all().forEach(element => {
                    if ((0, model_1.isSelectable)(element) && element.selected)
                        element.selected = false;
                    if ((0, model_4.isHoverable)(element) && element.hoverFeedback)
                        element.hoverFeedback = false;
                });
                return {
                    model: root,
                    modelChanged: true,
                    cause: this.action
                };
            }
        }
        return {
            model: context.root,
            modelChanged: false
        };
    }
};
ExportSvgCommand.KIND = RequestExportSvgAction.KIND;
ExportSvgCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], ExportSvgCommand);
exports.ExportSvgCommand = ExportSvgCommand;
let ExportSvgPostprocessor = class ExportSvgPostprocessor {
    decorate(vnode, element) {
        if (element instanceof smodel_1.SModelRoot)
            this.root = element;
        return vnode;
    }
    postUpdate(cause) {
        if (this.root && cause !== undefined && cause.kind === RequestExportSvgAction.KIND) {
            this.svgExporter.export(this.root, cause);
        }
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.SvgExporter),
    __metadata("design:type", svg_exporter_1.SvgExporter)
], ExportSvgPostprocessor.prototype, "svgExporter", void 0);
ExportSvgPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], ExportSvgPostprocessor);
exports.ExportSvgPostprocessor = ExportSvgPostprocessor;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/export/model.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/export/model.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isExportable = exports.exportFeature = void 0;
exports.exportFeature = Symbol('exportFeature');
function isExportable(element) {
    return element.hasFeature(exports.exportFeature);
}
exports.isExportable = isExportable;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/export/svg-exporter.js":
/*!******************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/export/svg-exporter.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SvgExporter = exports.ExportSvgAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const action_dispatcher_1 = __webpack_require__(/*! ../../base/actions/action-dispatcher */ "./node_modules/sprotty/lib/base/actions/action-dispatcher.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
var ExportSvgAction;
(function (ExportSvgAction) {
    ExportSvgAction.KIND = 'exportSvg';
    function create(svg, requestId) {
        return {
            kind: ExportSvgAction.KIND,
            svg,
            responseId: requestId
        };
    }
    ExportSvgAction.create = create;
})(ExportSvgAction = exports.ExportSvgAction || (exports.ExportSvgAction = {}));
let SvgExporter = class SvgExporter {
    export(root, request) {
        if (typeof document !== 'undefined') {
            const div = document.getElementById(this.options.hiddenDiv);
            if (div !== null && div.firstElementChild && div.firstElementChild.tagName === 'svg') {
                const svgElement = div.firstElementChild;
                const svg = this.createSvg(svgElement, root);
                this.actionDispatcher.dispatch(ExportSvgAction.create(svg, request ? request.requestId : ''));
            }
        }
    }
    createSvg(svgElementOrig, root) {
        const serializer = new XMLSerializer();
        const svgCopy = serializer.serializeToString(svgElementOrig);
        const iframe = document.createElement('iframe');
        document.body.appendChild(iframe);
        if (!iframe.contentWindow)
            throw new Error('IFrame has no contentWindow');
        const docCopy = iframe.contentWindow.document;
        docCopy.open();
        docCopy.write(svgCopy);
        docCopy.close();
        const svgElementNew = docCopy.getElementById(svgElementOrig.id);
        svgElementNew.removeAttribute('opacity');
        this.copyStyles(svgElementOrig, svgElementNew, ['width', 'height', 'opacity']);
        svgElementNew.setAttribute('version', '1.1');
        const bounds = this.getBounds(root);
        svgElementNew.setAttribute('viewBox', `${bounds.x} ${bounds.y} ${bounds.width} ${bounds.height}`);
        const svgCode = serializer.serializeToString(svgElementNew);
        document.body.removeChild(iframe);
        return svgCode;
    }
    copyStyles(source, target, skipedProperties) {
        const sourceStyle = getComputedStyle(source);
        const targetStyle = getComputedStyle(target);
        let diffStyle = '';
        for (let i = 0; i < sourceStyle.length; i++) {
            const key = sourceStyle[i];
            if (skipedProperties.indexOf(key) === -1) {
                const value = sourceStyle.getPropertyValue(key);
                if (targetStyle.getPropertyValue(key) !== value) {
                    diffStyle += key + ":" + value + ";";
                }
            }
        }
        if (diffStyle !== '')
            target.setAttribute('style', diffStyle);
        // IE doesn't retrun anything on source.children
        for (let i = 0; i < source.childNodes.length; ++i) {
            const sourceChild = source.childNodes[i];
            const targetChild = target.childNodes[i];
            if (sourceChild instanceof Element)
                this.copyStyles(sourceChild, targetChild, []);
        }
    }
    getBounds(root) {
        const allBounds = [geometry_1.Bounds.EMPTY];
        root.children.forEach(element => {
            if ((0, model_1.isBoundsAware)(element)) {
                allBounds.push(element.bounds);
            }
        });
        return allBounds.reduce((one, two) => geometry_1.Bounds.combine(one, two));
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], SvgExporter.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", action_dispatcher_1.ActionDispatcher)
], SvgExporter.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], SvgExporter.prototype, "log", void 0);
SvgExporter = __decorate([
    (0, inversify_1.injectable)()
], SvgExporter);
exports.SvgExporter = SvgExporter;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/fade/di.config.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/fade/di.config.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const fade_1 = __webpack_require__(/*! ./fade */ "./node_modules/sprotty/lib/features/fade/fade.js");
const fadeModule = new inversify_1.ContainerModule(bind => {
    bind(types_1.TYPES.IVNodePostprocessor).to(fade_1.ElementFader).inSingletonScope();
});
exports["default"] = fadeModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/fade/fade.js":
/*!********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/fade/fade.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ElementFader = exports.FadeAnimation = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "./node_modules/sprotty/lib/base/animations/animation.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/fade/model.js");
class FadeAnimation extends animation_1.Animation {
    constructor(model, elementFades, context, removeAfterFadeOut = false) {
        super(context);
        this.model = model;
        this.elementFades = elementFades;
        this.removeAfterFadeOut = removeAfterFadeOut;
    }
    tween(t, context) {
        for (const elementFade of this.elementFades) {
            const element = elementFade.element;
            if (elementFade.type === 'in') {
                element.opacity = t;
            }
            else if (elementFade.type === 'out') {
                element.opacity = 1 - t;
                if (t === 1 && this.removeAfterFadeOut && element instanceof smodel_1.SChildElement) {
                    element.parent.remove(element);
                }
            }
        }
        return this.model;
    }
}
exports.FadeAnimation = FadeAnimation;
let ElementFader = class ElementFader {
    decorate(vnode, element) {
        if ((0, model_1.isFadeable)(element) && element.opacity !== 1) {
            (0, vnode_utils_1.setAttr)(vnode, 'opacity', element.opacity);
        }
        return vnode;
    }
    postUpdate() {
    }
};
ElementFader = __decorate([
    (0, inversify_1.injectable)()
], ElementFader);
exports.ElementFader = ElementFader;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/fade/model.js":
/*!*********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/fade/model.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isFadeable = exports.fadeFeature = void 0;
exports.fadeFeature = Symbol('fadeFeature');
function isFadeable(element) {
    return element.hasFeature(exports.fadeFeature) && element['opacity'] !== undefined;
}
exports.isFadeable = isFadeable;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/hover/di.config.js":
/*!**************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/hover/di.config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const hover_1 = __webpack_require__(/*! ./hover */ "./node_modules/sprotty/lib/features/hover/hover.js");
const popup_position_updater_1 = __webpack_require__(/*! ./popup-position-updater */ "./node_modules/sprotty/lib/features/hover/popup-position-updater.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const action_handler_1 = __webpack_require__(/*! ../../base/actions/action-handler */ "./node_modules/sprotty/lib/base/actions/action-handler.js");
const center_fit_1 = __webpack_require__(/*! ../viewport/center-fit */ "./node_modules/sprotty/lib/features/viewport/center-fit.js");
const viewport_1 = __webpack_require__(/*! ../viewport/viewport */ "./node_modules/sprotty/lib/features/viewport/viewport.js");
const move_1 = __webpack_require__(/*! ../move/move */ "./node_modules/sprotty/lib/features/move/move.js");
const hoverModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(types_1.TYPES.PopupVNodePostprocessor).to(popup_position_updater_1.PopupPositionUpdater).inSingletonScope();
    bind(hover_1.HoverMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(hover_1.HoverMouseListener);
    bind(hover_1.PopupHoverMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.PopupMouseListener).toService(hover_1.PopupHoverMouseListener);
    bind(hover_1.HoverKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(hover_1.HoverKeyListener);
    bind(types_1.TYPES.HoverState).toConstantValue({
        mouseOverTimer: undefined,
        mouseOutTimer: undefined,
        popupOpen: false,
        previousPopupElement: undefined
    });
    bind(hover_1.ClosePopupActionHandler).toSelf().inSingletonScope();
    const context = { bind, isBound };
    (0, command_registration_1.configureCommand)(context, hover_1.HoverFeedbackCommand);
    (0, command_registration_1.configureCommand)(context, hover_1.SetPopupModelCommand);
    (0, action_handler_1.configureActionHandler)(context, hover_1.SetPopupModelCommand.KIND, hover_1.ClosePopupActionHandler);
    (0, action_handler_1.configureActionHandler)(context, center_fit_1.FitToScreenCommand.KIND, hover_1.ClosePopupActionHandler);
    (0, action_handler_1.configureActionHandler)(context, center_fit_1.CenterCommand.KIND, hover_1.ClosePopupActionHandler);
    (0, action_handler_1.configureActionHandler)(context, viewport_1.SetViewportCommand.KIND, hover_1.ClosePopupActionHandler);
    (0, action_handler_1.configureActionHandler)(context, move_1.MoveCommand.KIND, hover_1.ClosePopupActionHandler);
});
exports["default"] = hoverModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/hover/hover.js":
/*!**********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/hover/hover.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClosePopupActionHandler = exports.HoverKeyListener = exports.PopupHoverMouseListener = exports.HoverMouseListener = exports.AbstractHoverMouseListener = exports.SetPopupModelCommand = exports.SetPopupModelAction = exports.RequestPopupModelAction = exports.HoverFeedbackCommand = exports.HoverFeedbackAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const smodel_factory_1 = __webpack_require__(/*! ../../base/model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/hover/model.js");
var HoverFeedbackAction;
(function (HoverFeedbackAction) {
    HoverFeedbackAction.KIND = 'hoverFeedback';
    function create(options) {
        return {
            kind: HoverFeedbackAction.KIND,
            mouseoverElement: options.mouseoverElement,
            mouseIsOver: options.mouseIsOver
        };
    }
    HoverFeedbackAction.create = create;
})(HoverFeedbackAction = exports.HoverFeedbackAction || (exports.HoverFeedbackAction = {}));
let HoverFeedbackCommand = class HoverFeedbackCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const model = context.root;
        const modelElement = model.index.getById(this.action.mouseoverElement);
        if (modelElement) {
            if ((0, model_2.isHoverable)(modelElement)) {
                modelElement.hoverFeedback = this.action.mouseIsOver;
            }
        }
        return this.redo(context);
    }
    undo(context) {
        return context.root;
    }
    redo(context) {
        return context.root;
    }
};
HoverFeedbackCommand.KIND = HoverFeedbackAction.KIND;
HoverFeedbackCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], HoverFeedbackCommand);
exports.HoverFeedbackCommand = HoverFeedbackCommand;
/**
 * Triggered when the user hovers the mouse pointer over an element to get a popup with details on
 * that element. This action is sent from the client to the model source, e.g. a DiagramServer.
 * The response is a SetPopupModelAction.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class RequestPopupModelAction {
    constructor(elementId, bounds, requestId = '') {
        this.elementId = elementId;
        this.bounds = bounds;
        this.requestId = requestId;
        this.kind = RequestPopupModelAction.KIND;
    }
    /** Factory function to dispatch a request with the `IActionDispatcher` */
    static create(elementId, bounds) {
        return new RequestPopupModelAction(elementId, bounds, (0, actions_1.generateRequestId)());
    }
}
exports.RequestPopupModelAction = RequestPopupModelAction;
RequestPopupModelAction.KIND = 'requestPopupModel';
/**
 * Sent from the model source to the client to display a popup in response to a RequestPopupModelAction.
 * This action can also be used to remove any existing popup by choosing EMPTY_ROOT as root element.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class SetPopupModelAction {
    constructor(newRoot, responseId = '') {
        this.newRoot = newRoot;
        this.responseId = responseId;
        this.kind = SetPopupModelAction.KIND;
    }
}
exports.SetPopupModelAction = SetPopupModelAction;
SetPopupModelAction.KIND = 'setPopupModel';
let SetPopupModelCommand = class SetPopupModelCommand extends command_1.PopupCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.oldRoot = context.root;
        this.newRoot = context.modelFactory.createRoot(this.action.newRoot);
        return this.newRoot;
    }
    undo(context) {
        return this.oldRoot;
    }
    redo(context) {
        return this.newRoot;
    }
};
SetPopupModelCommand.KIND = actions_1.SetPopupModelAction.KIND;
SetPopupModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetPopupModelCommand);
exports.SetPopupModelCommand = SetPopupModelCommand;
class AbstractHoverMouseListener extends mouse_tool_1.MouseListener {
    mouseDown(target, event) {
        this.mouseIsDown = true;
        return [];
    }
    mouseUp(target, event) {
        this.mouseIsDown = false;
        return [];
    }
    stopMouseOutTimer() {
        if (this.state.mouseOutTimer !== undefined) {
            window.clearTimeout(this.state.mouseOutTimer);
            this.state.mouseOutTimer = undefined;
        }
    }
    startMouseOutTimer() {
        this.stopMouseOutTimer();
        return new Promise((resolve) => {
            this.state.mouseOutTimer = window.setTimeout(() => {
                this.state.popupOpen = false;
                this.state.previousPopupElement = undefined;
                resolve(new SetPopupModelAction({ type: smodel_factory_1.EMPTY_ROOT.type, id: smodel_factory_1.EMPTY_ROOT.id }));
            }, this.options.popupCloseDelay);
        });
    }
    stopMouseOverTimer() {
        if (this.state.mouseOverTimer !== undefined) {
            window.clearTimeout(this.state.mouseOverTimer);
            this.state.mouseOverTimer = undefined;
        }
    }
}
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], AbstractHoverMouseListener.prototype, "options", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.HoverState),
    __metadata("design:type", Object)
], AbstractHoverMouseListener.prototype, "state", void 0);
exports.AbstractHoverMouseListener = AbstractHoverMouseListener;
let HoverMouseListener = class HoverMouseListener extends AbstractHoverMouseListener {
    computePopupBounds(target, mousePosition) {
        // Default position: below the mouse cursor
        let offset = { x: -5, y: 20 };
        const targetBounds = (0, model_1.getAbsoluteBounds)(target);
        const canvasBounds = target.root.canvasBounds;
        const boundsInWindow = geometry_1.Bounds.translate(targetBounds, canvasBounds);
        const distRight = boundsInWindow.x + boundsInWindow.width - mousePosition.x;
        const distBottom = boundsInWindow.y + boundsInWindow.height - mousePosition.y;
        if (distBottom <= distRight && this.allowSidePosition(target, 'below', distBottom)) {
            // Put the popup below the target element
            offset = { x: -5, y: Math.round(distBottom + 5) };
        }
        else if (distRight <= distBottom && this.allowSidePosition(target, 'right', distRight)) {
            // Put the popup right of the target element
            offset = { x: Math.round(distRight + 5), y: -5 };
        }
        let leftPopupPosition = mousePosition.x + offset.x;
        const canvasRightBorderPosition = canvasBounds.x + canvasBounds.width;
        if (leftPopupPosition > canvasRightBorderPosition) {
            leftPopupPosition = canvasRightBorderPosition;
        }
        let topPopupPosition = mousePosition.y + offset.y;
        const canvasBottomBorderPosition = canvasBounds.y + canvasBounds.height;
        if (topPopupPosition > canvasBottomBorderPosition) {
            topPopupPosition = canvasBottomBorderPosition;
        }
        return { x: leftPopupPosition, y: topPopupPosition, width: -1, height: -1 };
    }
    allowSidePosition(target, side, distance) {
        return !(target instanceof smodel_1.SModelRoot) && distance <= 150;
    }
    startMouseOverTimer(target, event) {
        this.stopMouseOverTimer();
        return new Promise((resolve) => {
            this.state.mouseOverTimer = window.setTimeout(() => {
                const popupBounds = this.computePopupBounds(target, { x: event.pageX, y: event.pageY });
                resolve(new RequestPopupModelAction(target.id, popupBounds));
                this.state.popupOpen = true;
                this.state.previousPopupElement = target;
            }, this.options.popupOpenDelay);
        });
    }
    mouseOver(target, event) {
        const result = [];
        if (!this.mouseIsDown) {
            const popupTarget = (0, smodel_utils_1.findParent)(target, model_2.hasPopupFeature);
            if (this.state.popupOpen && (popupTarget === undefined ||
                this.state.previousPopupElement !== undefined && this.state.previousPopupElement.id !== popupTarget.id)) {
                result.push(this.startMouseOutTimer());
            }
            else {
                this.stopMouseOverTimer();
                this.stopMouseOutTimer();
            }
            if (popupTarget !== undefined &&
                (this.state.previousPopupElement === undefined || this.state.previousPopupElement.id !== popupTarget.id)) {
                result.push(this.startMouseOverTimer(popupTarget, event));
            }
            if (this.lastHoverFeedbackElementId) {
                result.push(HoverFeedbackAction.create({ mouseoverElement: this.lastHoverFeedbackElementId, mouseIsOver: false }));
                this.lastHoverFeedbackElementId = undefined;
            }
            const hoverTarget = (0, smodel_utils_1.findParentByFeature)(target, model_2.isHoverable);
            if (hoverTarget !== undefined) {
                result.push(HoverFeedbackAction.create({ mouseoverElement: hoverTarget.id, mouseIsOver: true }));
                this.lastHoverFeedbackElementId = hoverTarget.id;
            }
        }
        return result;
    }
    mouseOut(target, event) {
        const result = [];
        if (!this.mouseIsDown) {
            const elementUnderMouse = this.getElementFromEventPosition(event);
            if (!this.isSprottyPopup(elementUnderMouse)) {
                if (this.state.popupOpen) {
                    const popupTarget = (0, smodel_utils_1.findParent)(target, model_2.hasPopupFeature);
                    if (this.state.previousPopupElement !== undefined && popupTarget !== undefined
                        && this.state.previousPopupElement.id === popupTarget.id)
                        result.push(this.startMouseOutTimer());
                }
                this.stopMouseOverTimer();
                const hoverTarget = (0, smodel_utils_1.findParentByFeature)(target, model_2.isHoverable);
                if (hoverTarget !== undefined) {
                    result.push(HoverFeedbackAction.create({ mouseoverElement: hoverTarget.id, mouseIsOver: false }));
                    if (this.lastHoverFeedbackElementId && this.lastHoverFeedbackElementId !== hoverTarget.id) {
                        result.push(HoverFeedbackAction.create({ mouseoverElement: this.lastHoverFeedbackElementId, mouseIsOver: false }));
                    }
                    this.lastHoverFeedbackElementId = undefined;
                }
            }
        }
        return result;
    }
    getElementFromEventPosition(event) {
        return document.elementFromPoint(event.x, event.y);
    }
    isSprottyPopup(element) {
        return element
            ? (element.id === this.options.popupDiv
                || (!!element.parentElement && this.isSprottyPopup(element.parentElement)))
            : false;
    }
    mouseMove(target, event) {
        const result = [];
        if (!this.mouseIsDown) {
            if (this.state.previousPopupElement !== undefined && this.closeOnMouseMove(this.state.previousPopupElement, event)) {
                result.push(this.startMouseOutTimer());
            }
            const popupTarget = (0, smodel_utils_1.findParent)(target, model_2.hasPopupFeature);
            if (popupTarget !== undefined && (this.state.previousPopupElement === undefined
                || this.state.previousPopupElement.id !== popupTarget.id)) {
                result.push(this.startMouseOverTimer(popupTarget, event));
            }
        }
        return result;
    }
    closeOnMouseMove(target, event) {
        return target instanceof smodel_1.SModelRoot;
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], HoverMouseListener.prototype, "options", void 0);
HoverMouseListener = __decorate([
    (0, inversify_1.injectable)()
], HoverMouseListener);
exports.HoverMouseListener = HoverMouseListener;
let PopupHoverMouseListener = class PopupHoverMouseListener extends AbstractHoverMouseListener {
    mouseOut(target, event) {
        return [this.startMouseOutTimer()];
    }
    mouseOver(target, event) {
        this.stopMouseOutTimer();
        this.stopMouseOverTimer();
        return [];
    }
};
PopupHoverMouseListener = __decorate([
    (0, inversify_1.injectable)()
], PopupHoverMouseListener);
exports.PopupHoverMouseListener = PopupHoverMouseListener;
class HoverKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'Escape')) {
            return [new SetPopupModelAction({ type: smodel_factory_1.EMPTY_ROOT.type, id: smodel_factory_1.EMPTY_ROOT.id })];
        }
        return [];
    }
}
exports.HoverKeyListener = HoverKeyListener;
let ClosePopupActionHandler = class ClosePopupActionHandler {
    constructor() {
        this.popupOpen = false;
    }
    handle(action) {
        if (action.kind === SetPopupModelCommand.KIND) {
            this.popupOpen = action.newRoot.type !== smodel_factory_1.EMPTY_ROOT.type;
        }
        else if (this.popupOpen) {
            return new SetPopupModelAction({ id: smodel_factory_1.EMPTY_ROOT.id, type: smodel_factory_1.EMPTY_ROOT.type });
        }
    }
};
ClosePopupActionHandler = __decorate([
    (0, inversify_1.injectable)()
], ClosePopupActionHandler);
exports.ClosePopupActionHandler = ClosePopupActionHandler;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/hover/model.js":
/*!**********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/hover/model.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hasPopupFeature = exports.popupFeature = exports.isHoverable = exports.hoverFeedbackFeature = void 0;
exports.hoverFeedbackFeature = Symbol('hoverFeedbackFeature');
function isHoverable(element) {
    return element.hasFeature(exports.hoverFeedbackFeature);
}
exports.isHoverable = isHoverable;
exports.popupFeature = Symbol('popupFeature');
function hasPopupFeature(element) {
    return element.hasFeature(exports.popupFeature);
}
exports.hasPopupFeature = hasPopupFeature;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/hover/popup-position-updater.js":
/*!***************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/hover/popup-position-updater.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupPositionUpdater = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
let PopupPositionUpdater = class PopupPositionUpdater {
    decorate(vnode, element) {
        return vnode;
    }
    postUpdate() {
        const popupDiv = document.getElementById(this.options.popupDiv);
        if (popupDiv !== null && typeof window !== 'undefined') {
            const boundingClientRect = popupDiv.getBoundingClientRect();
            if (window.innerHeight < boundingClientRect.height + boundingClientRect.top) {
                popupDiv.style.top = (window.pageYOffset + window.innerHeight - boundingClientRect.height - 5) + 'px';
            }
            if (window.innerWidth < boundingClientRect.left + boundingClientRect.width) {
                popupDiv.style.left = (window.pageXOffset + window.innerWidth - boundingClientRect.width - 5) + 'px';
            }
            if (boundingClientRect.left < 0) {
                popupDiv.style.left = '0px';
            }
            if (boundingClientRect.top < 0) {
                popupDiv.style.top = '0px';
            }
        }
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], PopupPositionUpdater.prototype, "options", void 0);
PopupPositionUpdater = __decorate([
    (0, inversify_1.injectable)()
], PopupPositionUpdater);
exports.PopupPositionUpdater = PopupPositionUpdater;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/move/di.config.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/move/di.config.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const move_1 = __webpack_require__(/*! ./move */ "./node_modules/sprotty/lib/features/move/move.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const moveModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(move_1.MoveMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(move_1.MoveMouseListener);
    (0, command_registration_1.configureCommand)({ bind, isBound }, move_1.MoveCommand);
    bind(move_1.LocationPostprocessor).toSelf().inSingletonScope();
    bind(types_1.TYPES.IVNodePostprocessor).toService(move_1.LocationPostprocessor);
    bind(types_1.TYPES.HiddenVNodePostprocessor).toService(move_1.LocationPostprocessor);
});
exports["default"] = moveModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/move/model.js":
/*!*********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/move/model.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isMoveable = exports.isLocateable = exports.moveFeature = void 0;
exports.moveFeature = Symbol('moveFeature');
function isLocateable(element) {
    return element['position'] !== undefined;
}
exports.isLocateable = isLocateable;
function isMoveable(element) {
    return element.hasFeature(exports.moveFeature) && isLocateable(element);
}
exports.isMoveable = isMoveable;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/move/move.js":
/*!********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/move/move.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var MoveCommand_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocationPostprocessor = exports.MoveMouseListener = exports.MorphEdgesAnimation = exports.MoveAnimation = exports.MoveCommand = exports.MoveAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "./node_modules/sprotty/lib/base/animations/animation.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const sgraph_1 = __webpack_require__(/*! ../../graph/sgraph */ "./node_modules/sprotty/lib/graph/sgraph.js");
const commit_model_1 = __webpack_require__(/*! ../../model-source/commit-model */ "./node_modules/sprotty/lib/model-source/commit-model.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const create_on_drag_1 = __webpack_require__(/*! ../edit/create-on-drag */ "./node_modules/sprotty/lib/features/edit/create-on-drag.js");
const edit_routing_1 = __webpack_require__(/*! ../edit/edit-routing */ "./node_modules/sprotty/lib/features/edit/edit-routing.js");
const reconnect_1 = __webpack_require__(/*! ../edit/reconnect */ "./node_modules/sprotty/lib/features/edit/reconnect.js");
const model_2 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
const model_3 = __webpack_require__(/*! ../edge-layout/model */ "./node_modules/sprotty/lib/features/edge-layout/model.js");
const model_4 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const model_5 = __webpack_require__(/*! ../viewport/model */ "./node_modules/sprotty/lib/features/viewport/model.js");
const model_6 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/move/model.js");
var MoveAction;
(function (MoveAction) {
    MoveAction.KIND = 'move';
    function create(moves, options = {}) {
        var _a, _b;
        return {
            kind: MoveAction.KIND,
            moves,
            animate: (_a = options.animate) !== null && _a !== void 0 ? _a : true,
            finished: (_b = options.finished) !== null && _b !== void 0 ? _b : false
        };
    }
    MoveAction.create = create;
})(MoveAction = exports.MoveAction || (exports.MoveAction = {}));
let MoveCommand = MoveCommand_1 = class MoveCommand extends command_1.MergeableCommand {
    constructor(action) {
        super();
        this.action = action;
        this.resolvedMoves = new Map;
        this.edgeMementi = [];
    }
    execute(context) {
        const index = context.root.index;
        const edge2handleMoves = new Map();
        const attachedEdgeShifts = new Map();
        this.action.moves.forEach(move => {
            const element = index.getById(move.elementId);
            if (element instanceof model_2.SRoutingHandle && this.edgeRouterRegistry) {
                const edge = element.parent;
                if (edge instanceof model_2.SRoutableElement) {
                    const resolvedMove = this.resolveHandleMove(element, edge, move);
                    if (resolvedMove) {
                        let movesByEdge = edge2handleMoves.get(edge);
                        if (!movesByEdge) {
                            movesByEdge = [];
                            edge2handleMoves.set(edge, movesByEdge);
                        }
                        movesByEdge.push(resolvedMove);
                    }
                }
            }
            else if (element && (0, model_6.isLocateable)(element)) {
                const resolvedMove = this.resolveElementMove(element, move);
                if (resolvedMove) {
                    this.resolvedMoves.set(resolvedMove.element.id, resolvedMove);
                    if (this.edgeRouterRegistry) {
                        index.getAttachedElements(element).forEach(edge => {
                            if (edge instanceof model_2.SRoutableElement) {
                                const existingDelta = attachedEdgeShifts.get(edge);
                                const newDelta = geometry_1.Point.subtract(resolvedMove.toPosition, resolvedMove.fromPosition);
                                const delta = (existingDelta)
                                    ? geometry_1.Point.linear(existingDelta, newDelta, 0.5)
                                    : newDelta;
                                attachedEdgeShifts.set(edge, delta);
                            }
                        });
                    }
                }
            }
        });
        this.doMove(edge2handleMoves, attachedEdgeShifts);
        if (this.action.animate) {
            this.undoMove();
            return new animation_1.CompoundAnimation(context.root, context, [
                new MoveAnimation(context.root, this.resolvedMoves, context, false),
                new MorphEdgesAnimation(context.root, this.edgeMementi, context, false)
            ]).start();
        }
        return context.root;
    }
    resolveHandleMove(handle, edge, move) {
        let fromPosition = move.fromPosition;
        if (!fromPosition) {
            const router = this.edgeRouterRegistry.get(edge.routerKind);
            fromPosition = router.getHandlePosition(edge, router.route(edge), handle);
        }
        if (fromPosition)
            return {
                handle,
                fromPosition,
                toPosition: move.toPosition
            };
        return undefined;
    }
    resolveElementMove(element, move) {
        const fromPosition = move.fromPosition
            || { x: element.position.x, y: element.position.y };
        return {
            element,
            fromPosition,
            toPosition: move.toPosition
        };
    }
    doMove(edge2move, attachedEdgeShifts) {
        this.resolvedMoves.forEach(res => {
            res.element.position = res.toPosition;
        });
        // reset edges to state before
        edge2move.forEach((moves, edge) => {
            const router = this.edgeRouterRegistry.get(edge.routerKind);
            const before = router.takeSnapshot(edge);
            router.applyHandleMoves(edge, moves);
            const after = router.takeSnapshot(edge);
            this.edgeMementi.push({ edge, before, after });
        });
        attachedEdgeShifts.forEach((delta, edge) => {
            if (!edge2move.get(edge)) {
                const router = this.edgeRouterRegistry.get(edge.routerKind);
                const before = router.takeSnapshot(edge);
                if (edge.source
                    && edge.target
                    && this.resolvedMoves.get(edge.source.id)
                    && this.resolvedMoves.get(edge.target.id)) {
                    // move the entire edge when both source and target are moved
                    edge.routingPoints = edge.routingPoints.map(rp => geometry_1.Point.add(rp, delta));
                }
                else {
                    // add/remove RPs according to the new source/target positions
                    const updateHandles = (0, model_4.isSelectable)(edge) && edge.selected;
                    router.cleanupRoutingPoints(edge, edge.routingPoints, updateHandles, this.action.finished);
                }
                const after = router.takeSnapshot(edge);
                this.edgeMementi.push({ edge, before, after });
            }
        });
    }
    undoMove() {
        this.resolvedMoves.forEach(res => {
            res.element.position = res.fromPosition;
        });
        this.edgeMementi.forEach(memento => {
            const router = this.edgeRouterRegistry.get(memento.edge.routerKind);
            router.applySnapshot(memento.edge, memento.before);
        });
    }
    undo(context) {
        return new animation_1.CompoundAnimation(context.root, context, [
            new MoveAnimation(context.root, this.resolvedMoves, context, true),
            new MorphEdgesAnimation(context.root, this.edgeMementi, context, true)
        ]).start();
    }
    redo(context) {
        return new animation_1.CompoundAnimation(context.root, context, [
            new MoveAnimation(context.root, this.resolvedMoves, context, false),
            new MorphEdgesAnimation(context.root, this.edgeMementi, context, false)
        ]).start();
    }
    merge(other, context) {
        if (!this.action.animate && other instanceof MoveCommand_1) {
            other.resolvedMoves.forEach((otherMove, otherElementId) => {
                const existingMove = this.resolvedMoves.get(otherElementId);
                if (existingMove) {
                    existingMove.toPosition = otherMove.toPosition;
                }
                else {
                    this.resolvedMoves.set(otherElementId, otherMove);
                }
            });
            other.edgeMementi.forEach(otherMemento => {
                const existingMemento = this.edgeMementi.find(edgeMemento => edgeMemento.edge.id === otherMemento.edge.id);
                if (existingMemento) {
                    existingMemento.after = otherMemento.after;
                }
                else {
                    this.edgeMementi.push(otherMemento);
                }
            });
            return true;
        }
        else if (other instanceof reconnect_1.ReconnectCommand) {
            const otherMemento = other.memento;
            if (otherMemento) {
                const existingMemento = this.edgeMementi.find(edgeMemento => edgeMemento.edge.id === otherMemento.edge.id);
                if (existingMemento) {
                    existingMemento.after = otherMemento.after;
                }
                else {
                    this.edgeMementi.push(otherMemento);
                }
            }
            return true;
        }
        return false;
    }
};
MoveCommand.KIND = MoveAction.KIND;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], MoveCommand.prototype, "edgeRouterRegistry", void 0);
MoveCommand = MoveCommand_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], MoveCommand);
exports.MoveCommand = MoveCommand;
class MoveAnimation extends animation_1.Animation {
    constructor(model, elementMoves, context, reverse = false) {
        super(context);
        this.model = model;
        this.elementMoves = elementMoves;
        this.reverse = reverse;
    }
    tween(t) {
        this.elementMoves.forEach((elementMove) => {
            if (this.reverse) {
                elementMove.element.position = {
                    x: (1 - t) * elementMove.toPosition.x + t * elementMove.fromPosition.x,
                    y: (1 - t) * elementMove.toPosition.y + t * elementMove.fromPosition.y
                };
            }
            else {
                elementMove.element.position = {
                    x: (1 - t) * elementMove.fromPosition.x + t * elementMove.toPosition.x,
                    y: (1 - t) * elementMove.fromPosition.y + t * elementMove.toPosition.y
                };
            }
        });
        return this.model;
    }
}
exports.MoveAnimation = MoveAnimation;
class MorphEdgesAnimation extends animation_1.Animation {
    constructor(model, originalMementi, context, reverse = false) {
        super(context);
        this.model = model;
        this.reverse = reverse;
        this.expanded = [];
        originalMementi.forEach(edgeMemento => {
            const start = this.reverse ? edgeMemento.after : edgeMemento.before;
            const end = this.reverse ? edgeMemento.before : edgeMemento.after;
            const startRoute = start.routedPoints;
            const endRoute = end.routedPoints;
            const maxRoutingPoints = Math.max(startRoute.length, endRoute.length);
            this.expanded.push({
                startExpandedRoute: this.growToSize(startRoute, maxRoutingPoints),
                endExpandedRoute: this.growToSize(endRoute, maxRoutingPoints),
                memento: edgeMemento
            });
        });
    }
    midPoint(edgeMemento) {
        const edge = edgeMemento.edge;
        const source = edgeMemento.edge.source;
        const target = edgeMemento.edge.target;
        return geometry_1.Point.linear((0, smodel_utils_1.translatePoint)(geometry_1.Bounds.center(source.bounds), source.parent, edge.parent), (0, smodel_utils_1.translatePoint)(geometry_1.Bounds.center(target.bounds), target.parent, edge.parent), 0.5);
    }
    start() {
        this.expanded.forEach(morph => {
            morph.memento.edge.removeAll(e => e instanceof model_2.SRoutingHandle);
        });
        return super.start();
    }
    tween(t) {
        if (t === 1) {
            this.expanded.forEach(morph => {
                const memento = morph.memento;
                if (this.reverse)
                    memento.before.router.applySnapshot(memento.edge, memento.before);
                else
                    memento.after.router.applySnapshot(memento.edge, memento.after);
            });
        }
        else {
            this.expanded.forEach(morph => {
                const newRoutingPoints = [];
                // ignore source and target anchor
                for (let i = 1; i < morph.startExpandedRoute.length - 1; ++i)
                    newRoutingPoints.push(geometry_1.Point.linear(morph.startExpandedRoute[i], morph.endExpandedRoute[i], t));
                const closestSnapshot = t < 0.5 ? morph.memento.before : morph.memento.after;
                const newSnapshot = Object.assign(Object.assign({}, closestSnapshot), { routingPoints: newRoutingPoints, routingHandles: [] });
                closestSnapshot.router.applySnapshot(morph.memento.edge, newSnapshot);
            });
        }
        return this.model;
    }
    growToSize(route, targetSize) {
        const diff = targetSize - route.length;
        if (diff <= 0)
            return route;
        const result = [];
        result.push(route[0]);
        const deltaDiff = 1 / (diff + 1);
        const deltaSmaller = 1 / (route.length - 1);
        let nextInsertion = 1;
        for (let i = 1; i < route.length; ++i) {
            const pos = deltaSmaller * i;
            let insertions = 0;
            while (pos > (nextInsertion + insertions) * deltaDiff)
                ++insertions;
            nextInsertion += insertions;
            for (let j = 0; j < insertions; ++j) {
                const p = geometry_1.Point.linear(route[i - 1], route[i], (j + 1) / (insertions + 1));
                result.push(p);
            }
            result.push(route[i]);
        }
        return result;
    }
}
exports.MorphEdgesAnimation = MorphEdgesAnimation;
class MoveMouseListener extends mouse_tool_1.MouseListener {
    constructor() {
        super(...arguments);
        this.hasDragged = false;
        this.elementId2startPos = new Map();
    }
    mouseDown(target, event) {
        if (event.button === 0) {
            const moveable = (0, smodel_utils_1.findParentByFeature)(target, model_6.isMoveable);
            const isRoutingHandle = target instanceof model_2.SRoutingHandle;
            if (moveable !== undefined || isRoutingHandle || (0, create_on_drag_1.isCreatingOnDrag)(target)) {
                this.startDragPosition = { x: event.pageX, y: event.pageY };
            }
            else {
                this.startDragPosition = undefined;
            }
            this.hasDragged = false;
            if ((0, create_on_drag_1.isCreatingOnDrag)(target)) {
                this.startCreatingOnDrag(target, event);
            }
            else if (isRoutingHandle) {
                this.activateRoutingHandle(target, event);
            }
        }
        return [];
    }
    startCreatingOnDrag(target, event) {
        const result = [];
        result.push(actions_1.SelectAllAction.create({ select: false }));
        result.push(target.createAction(model_2.edgeInProgressID));
        result.push(actions_1.SelectAction.create({ selectedElementsIDs: [model_2.edgeInProgressID] }));
        result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToActivate: [model_2.edgeInProgressID] }));
        result.push(actions_1.SelectAction.create({ selectedElementsIDs: [model_2.edgeInProgressTargetHandleID] }));
        result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToActivate: [model_2.edgeInProgressTargetHandleID] }));
        return result;
    }
    activateRoutingHandle(target, event) {
        return [edit_routing_1.SwitchEditModeAction.create({ elementsToActivate: [target.id] })];
    }
    mouseMove(target, event) {
        const result = [];
        if (event.buttons === 0)
            this.mouseUp(target, event);
        else if (this.startDragPosition) {
            if (this.elementId2startPos.size === 0) {
                this.collectStartPositions(target.root);
            }
            this.hasDragged = true;
            const moveAction = this.getElementMoves(target, event, false);
            if (moveAction)
                result.push(moveAction);
        }
        return result;
    }
    collectStartPositions(root) {
        const selectedElements = new Set(root.index.all()
            .filter(element => (0, model_4.isSelectable)(element) && element.selected));
        selectedElements.forEach(element => {
            if (!this.isChildOfSelected(selectedElements, element)) {
                if ((0, model_6.isMoveable)(element))
                    this.elementId2startPos.set(element.id, element.position);
                else if (element instanceof model_2.SRoutingHandle) {
                    const position = this.getHandlePosition(element);
                    if (position)
                        this.elementId2startPos.set(element.id, position);
                }
            }
        });
    }
    isChildOfSelected(selectedElements, element) {
        while (element instanceof smodel_1.SChildElement) {
            element = element.parent;
            if ((0, model_6.isMoveable)(element) && selectedElements.has(element)) {
                return true;
            }
        }
        return false;
    }
    getElementMoves(target, event, isFinished) {
        if (!this.startDragPosition)
            return undefined;
        const elementMoves = [];
        const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_5.isViewport);
        const zoom = viewport ? viewport.zoom : 1;
        const delta = {
            x: (event.pageX - this.startDragPosition.x) / zoom,
            y: (event.pageY - this.startDragPosition.y) / zoom
        };
        this.elementId2startPos.forEach((startPosition, elementId) => {
            const element = target.root.index.getById(elementId);
            if (element) {
                const move = this.createElementMove(element, startPosition, delta, event);
                if (move) {
                    elementMoves.push(move);
                }
            }
        });
        if (elementMoves.length > 0)
            return MoveAction.create(elementMoves, { animate: false, finished: isFinished });
        else
            return undefined;
    }
    createElementMove(element, startPosition, delta, event) {
        const toPosition = this.snap({
            x: startPosition.x + delta.x,
            y: startPosition.y + delta.y
        }, element, !event.shiftKey);
        if ((0, model_6.isMoveable)(element)) {
            return {
                elementId: element.id,
                elementType: element.type,
                fromPosition: {
                    x: element.position.x,
                    y: element.position.y
                },
                toPosition
            };
        }
        else if (element instanceof model_2.SRoutingHandle) {
            const point = this.getHandlePosition(element);
            if (point !== undefined) {
                return {
                    elementId: element.id,
                    elementType: element.type,
                    fromPosition: point,
                    toPosition
                };
            }
        }
        return undefined;
    }
    snap(position, element, isSnap) {
        if (isSnap && this.snapper)
            return this.snapper.snap(position, element);
        else
            return position;
    }
    getHandlePosition(handle) {
        if (this.edgeRouterRegistry) {
            const parent = handle.parent;
            if (!(parent instanceof model_2.SRoutableElement))
                return undefined;
            const router = this.edgeRouterRegistry.get(parent.routerKind);
            const route = router.route(parent);
            return router.getHandlePosition(parent, route, handle);
        }
        return undefined;
    }
    mouseEnter(target, event) {
        if (target instanceof smodel_1.SModelRoot && event.buttons === 0 && !this.startDragPosition)
            this.mouseUp(target, event);
        return [];
    }
    mouseUp(target, event) {
        const result = [];
        if (this.startDragPosition) {
            const moveAction = this.getElementMoves(target, event, true);
            if (moveAction) {
                result.push(moveAction);
            }
            target.root.index.all().forEach(element => {
                if (element instanceof model_2.SRoutingHandle) {
                    result.push(...this.deactivateRoutingHandle(element, target, event));
                }
            });
        }
        if (!result.some(a => a.kind === actions_1.ReconnectAction.KIND)) {
            const edgeInProgress = target.root.index.getById(model_2.edgeInProgressID);
            if (edgeInProgress instanceof smodel_1.SChildElement) {
                result.push(this.deleteEdgeInProgress(edgeInProgress));
            }
        }
        if (this.hasDragged) {
            result.push(commit_model_1.CommitModelAction.create());
        }
        this.hasDragged = false;
        this.startDragPosition = undefined;
        this.elementId2startPos.clear();
        return result;
    }
    deactivateRoutingHandle(element, target, event) {
        const result = [];
        const parent = element.parent;
        if (parent instanceof model_2.SRoutableElement && element.danglingAnchor) {
            const handlePos = this.getHandlePosition(element);
            if (handlePos) {
                const handlePosAbs = (0, smodel_utils_1.translatePoint)(handlePos, element.parent, element.root);
                const newEnd = (0, model_1.findChildrenAtPosition)(target.root, handlePosAbs)
                    .find(e => (0, model_2.isConnectable)(e) && e.canConnect(parent, element.kind));
                if (newEnd && this.hasDragged) {
                    result.push(actions_1.ReconnectAction.create({
                        routableId: element.parent.id,
                        newSourceId: element.kind === 'source' ? newEnd.id : parent.sourceId,
                        newTargetId: element.kind === 'target' ? newEnd.id : parent.targetId
                    }));
                }
            }
        }
        if (element.editMode) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToDeactivate: [element.id] }));
        }
        return result;
    }
    deleteEdgeInProgress(edgeInProgress) {
        const deleteIds = [];
        deleteIds.push(model_2.edgeInProgressID);
        edgeInProgress.children.forEach(c => {
            if (c instanceof model_2.SRoutingHandle && c.danglingAnchor)
                deleteIds.push(c.danglingAnchor.id);
        });
        return actions_1.DeleteElementAction.create(deleteIds);
    }
    decorate(vnode, element) {
        return vnode;
    }
}
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], MoveMouseListener.prototype, "edgeRouterRegistry", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ISnapper),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], MoveMouseListener.prototype, "snapper", void 0);
exports.MoveMouseListener = MoveMouseListener;
let LocationPostprocessor = class LocationPostprocessor {
    decorate(vnode, element) {
        if ((0, model_3.isEdgeLayoutable)(element) && element.parent instanceof sgraph_1.SEdge) {
            // The element is handled by EdgeLayoutDecorator
            return vnode;
        }
        let translate = '';
        if ((0, model_6.isLocateable)(element) && element instanceof smodel_1.SChildElement && element.parent !== undefined) {
            const pos = element.position;
            if (pos.x !== 0 || pos.y !== 0) {
                translate = 'translate(' + pos.x + ', ' + pos.y + ')';
            }
        }
        if ((0, model_1.isAlignable)(element)) {
            const ali = element.alignment;
            if (ali.x !== 0 || ali.y !== 0) {
                if (translate.length > 0) {
                    translate += ' ';
                }
                translate += 'translate(' + ali.x + ', ' + ali.y + ')';
            }
        }
        if (translate.length > 0) {
            (0, vnode_utils_1.setAttr)(vnode, 'transform', translate);
        }
        return vnode;
    }
    postUpdate() {
    }
};
LocationPostprocessor = __decorate([
    (0, inversify_1.injectable)()
], LocationPostprocessor);
exports.LocationPostprocessor = LocationPostprocessor;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/move/snap.js":
/*!********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/move/snap.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CenterGridSnapper = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
/**
 * A simple snapper that snaps the center of nodes and routing points to a grid.
 */
let CenterGridSnapper = class CenterGridSnapper {
    get gridX() {
        return 10;
    }
    get gridY() {
        return 10;
    }
    snap(position, element) {
        if (element && (0, model_1.isBoundsAware)(element))
            return {
                x: Math.round((position.x + 0.5 * element.bounds.width) / this.gridX) * this.gridX - 0.5 * element.bounds.width,
                y: Math.round((position.y + 0.5 * element.bounds.height) / this.gridY) * this.gridY - 0.5 * element.bounds.height
            };
        else
            return {
                x: Math.round(position.x / this.gridX) * this.gridX,
                y: Math.round(position.y / this.gridY) * this.gridY
            };
    }
};
CenterGridSnapper = __decorate([
    (0, inversify_1.injectable)()
], CenterGridSnapper);
exports.CenterGridSnapper = CenterGridSnapper;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/nameable/model.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/nameable/model.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.name = exports.isNameable = exports.nameFeature = void 0;
exports.nameFeature = Symbol('nameableFeature');
function isNameable(element) {
    return element.hasFeature(exports.nameFeature);
}
exports.isNameable = isNameable;
function name(element) {
    if (isNameable(element)) {
        return element.name;
    }
    else {
        return undefined;
    }
}
exports.name = name;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/open/di.config.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/open/di.config.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const open_1 = __webpack_require__(/*! ./open */ "./node_modules/sprotty/lib/features/open/open.js");
const openModule = new inversify_1.ContainerModule(bind => {
    bind(open_1.OpenMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(open_1.OpenMouseListener);
});
exports["default"] = openModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/open/model.js":
/*!*********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/open/model.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isOpenable = exports.openFeature = void 0;
exports.openFeature = Symbol('openFeature');
function isOpenable(element) {
    return element.hasFeature(exports.openFeature);
}
exports.isOpenable = isOpenable;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/open/open.js":
/*!********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/open/open.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpenMouseListener = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/open/model.js");
class OpenMouseListener extends mouse_tool_1.MouseListener {
    doubleClick(target, event) {
        const openableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_1.isOpenable);
        if (openableTarget !== undefined) {
            return [actions_1.OpenAction.create(openableTarget.id)];
        }
        return [];
    }
}
exports.OpenMouseListener = OpenMouseListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/projection/model.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/projection/model.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getModelBounds = exports.getProjectedBounds = exports.getProjections = exports.isProjectable = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "./node_modules/sprotty-protocol/lib/utils/object.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
function isProjectable(arg) {
    return (0, object_1.hasOwnProperty)(arg, 'projectionCssClasses');
}
exports.isProjectable = isProjectable;
/**
 * Gather all projections of elements contained in the given parent element.
 */
function getProjections(parent) {
    let result;
    for (const child of parent.children) {
        if (isProjectable(child) && child.projectionCssClasses.length > 0) {
            const projectedBounds = getProjectedBounds(child);
            if (projectedBounds) {
                const projection = {
                    elementId: child.id,
                    projectedBounds,
                    cssClasses: child.projectionCssClasses
                };
                if (result) {
                    result.push(projection);
                }
                else {
                    result = [projection];
                }
            }
        }
        if (child.children.length > 0) {
            const childProj = getProjections(child);
            if (childProj) {
                if (result) {
                    result.push(...childProj);
                }
                else {
                    result = childProj;
                }
            }
        }
    }
    return result;
}
exports.getProjections = getProjections;
/**
 * Compute the projected bounds of the given model element, that is the absolute position in the diagram.
 */
function getProjectedBounds(model) {
    const parent = model.parent;
    if (model.projectedBounds) {
        let bounds = model.projectedBounds;
        if ((0, model_1.isBoundsAware)(parent)) {
            bounds = (0, smodel_utils_1.transformToRootBounds)(parent, bounds);
        }
        return bounds;
    }
    else if ((0, model_1.isBoundsAware)(model)) {
        let bounds = model.bounds;
        bounds = (0, smodel_utils_1.transformToRootBounds)(parent, bounds);
        return bounds;
    }
    return undefined;
}
exports.getProjectedBounds = getProjectedBounds;
const MAX_COORD = 1000000000;
/**
 * Determine the total bounds of a model; this takes the viewport into consideration
 * so it can be shown in the projections.
 */
function getModelBounds(model) {
    let minX = MAX_COORD;
    let minY = MAX_COORD;
    let maxX = -MAX_COORD;
    let maxY = -MAX_COORD;
    const bounds = (0, model_1.isBoundsAware)(model) ? model.bounds : undefined;
    if (bounds && geometry_1.Dimension.isValid(bounds)) {
        // Get the bounds directly from the model if it returns a valid size
        minX = bounds.x;
        minY = bounds.y;
        maxX = minX + bounds.width;
        maxY = minY + bounds.height;
    }
    else {
        // Determine the min. / max coordinates of top-level model elements
        // Note that this approach is slower, so provide valid bounds to speed up the process.
        for (const element of model.children) {
            if ((0, model_1.isBoundsAware)(element)) {
                const b = element.bounds;
                minX = Math.min(minX, b.x);
                minY = Math.min(minY, b.y);
                maxX = Math.max(maxX, b.x + b.width);
                maxY = Math.max(maxY, b.y + b.height);
            }
        }
    }
    // Enlarge the bounds by the current viewport to ensure it always fits into the projection
    minX = Math.min(minX, model.scroll.x);
    minY = Math.min(minY, model.scroll.y);
    maxX = Math.max(maxX, model.scroll.x + model.canvasBounds.width / model.zoom);
    maxY = Math.max(maxY, model.scroll.y + model.canvasBounds.height / model.zoom);
    if (minX < maxX && minY < maxY) {
        return {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY
        };
    }
    return undefined;
}
exports.getModelBounds = getModelBounds;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/projection/views.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/projection/views.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProjectedViewportView = void 0;
/** @jsx html */
const jsx_1 = __webpack_require__(/*! ../../lib/jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "./node_modules/snabbdom/build/index.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/projection/model.js");
/**
 * Special viewport root view that renders horizontal and vertical projection bars for quick navigation.
 */
let ProjectedViewportView = class ProjectedViewportView {
    render(model, context, args) {
        const rootNode = (0, jsx_1.html)("div", { "class-sprotty-root": true },
            this.renderSvg(model, context, args),
            this.renderProjections(model, context, args));
        (0, vnode_utils_1.setAttr)(rootNode, 'tabindex', 0); // make root div focus-able
        return rootNode;
    }
    renderSvg(model, context, args) {
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        const ns = 'http://www.w3.org/2000/svg';
        return (0, snabbdom_1.h)('svg', { ns }, (0, snabbdom_1.h)('g', { ns, attrs: { transform } }, context.renderChildren(model)));
    }
    renderProjections(model, context, args) {
        var _a;
        if (model.zoom <= 0) {
            return [];
        }
        const modelBounds = (0, model_1.getModelBounds)(model);
        if (!modelBounds) {
            return [];
        }
        const projections = (_a = (0, model_1.getProjections)(model)) !== null && _a !== void 0 ? _a : [];
        return [
            this.renderProjectionBar(projections, model, modelBounds, 'vertical'),
            this.renderProjectionBar(projections, model, modelBounds, 'horizontal')
        ];
    }
    renderProjectionBar(projections, model, modelBounds, orientation) {
        const params = { modelBounds, orientation };
        // NOTE: Here we assume that the projection bars have the same size as the diagram canvas, i.e. they are drawn as overlay above the canvas.
        params.factor = orientation === 'horizontal' ? model.canvasBounds.width / modelBounds.width : model.canvasBounds.height / modelBounds.height;
        params.zoomedFactor = params.factor / model.zoom;
        return (0, jsx_1.html)("div", { "class-sprotty-projection-bar": true, "class-horizontal": orientation === 'horizontal', "class-vertical": orientation === 'vertical' },
            this.renderViewport(model, params),
            projections.map(p => this.renderProjection(p, model, params)));
    }
    renderViewport(model, params) {
        let canvasSize, viewportPos;
        if (params.orientation === 'horizontal') {
            canvasSize = model.canvasBounds.width;
            viewportPos = (model.scroll.x - params.modelBounds.x) * params.factor;
        }
        else {
            canvasSize = model.canvasBounds.height;
            viewportPos = (model.scroll.y - params.modelBounds.y) * params.factor;
        }
        let viewportSize = canvasSize * params.zoomedFactor;
        if (viewportPos < 0) {
            viewportSize += viewportPos;
            viewportPos = 0;
        }
        else if (viewportPos > canvasSize) {
            viewportPos = canvasSize;
        }
        if (viewportSize < 0) {
            viewportSize = 0;
        }
        else if (viewportPos + viewportSize > canvasSize) {
            viewportSize = canvasSize - viewportPos;
        }
        const style = params.orientation === 'horizontal' ? {
            left: `${viewportPos}px`,
            width: `${viewportSize}px`
        } : {
            top: `${viewportPos}px`,
            height: `${viewportSize}px`
        };
        return (0, jsx_1.html)("div", { "class-sprotty-viewport": true, style: style });
    }
    renderProjection(projection, model, params) {
        let canvasSize, projPos, projSize;
        if (params.orientation === 'horizontal') {
            canvasSize = model.canvasBounds.width;
            projPos = (projection.projectedBounds.x - params.modelBounds.x) * params.factor;
            projSize = projection.projectedBounds.width * params.factor;
        }
        else {
            canvasSize = model.canvasBounds.height;
            projPos = (projection.projectedBounds.y - params.modelBounds.y) * params.factor;
            projSize = projection.projectedBounds.height * params.factor;
        }
        if (projPos < 0) {
            projSize += projPos;
            projPos = 0;
        }
        else if (projPos > canvasSize) {
            projPos = canvasSize;
        }
        if (projSize < 0) {
            projSize = 0;
        }
        else if (projPos + projSize > canvasSize) {
            projSize = canvasSize - projPos;
        }
        const style = params.orientation === 'horizontal' ? {
            left: `${projPos}px`,
            width: `${projSize}px`
        } : {
            top: `${projPos}px`,
            height: `${projSize}px`
        };
        const result = (0, jsx_1.html)("div", { id: `${params.orientation}-projection:${projection.elementId}`, "class-sprotty-projection": true, style: style });
        projection.cssClasses.forEach(cl => (0, vnode_utils_1.setClass)(result, cl, true));
        return result;
    }
};
ProjectedViewportView = __decorate([
    (0, inversify_1.injectable)()
], ProjectedViewportView);
exports.ProjectedViewportView = ProjectedViewportView;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/abstract-edge-router.js":
/*!***************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/abstract-edge-router.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractEdgeRouter = exports.DefaultAnchors = exports.Side = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/routing/model.js");
const anchor_1 = __webpack_require__(/*! ./anchor */ "./node_modules/sprotty/lib/features/routing/anchor.js");
const model_2 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/routing/model.js");
var Side;
(function (Side) {
    Side[Side["RIGHT"] = 0] = "RIGHT";
    Side[Side["LEFT"] = 1] = "LEFT";
    Side[Side["TOP"] = 2] = "TOP";
    Side[Side["BOTTOM"] = 3] = "BOTTOM";
})(Side = exports.Side || (exports.Side = {}));
class DefaultAnchors {
    constructor(element, edgeParent, kind) {
        this.element = element;
        this.kind = kind;
        const bounds = element.bounds;
        this.bounds = (0, smodel_utils_1.translateBounds)(bounds, element.parent, edgeParent);
        this.left = { x: this.bounds.x, y: this.bounds.y + 0.5 * this.bounds.height, kind };
        this.right = { x: this.bounds.x + this.bounds.width, y: this.bounds.y + 0.5 * this.bounds.height, kind };
        this.top = { x: this.bounds.x + 0.5 * this.bounds.width, y: this.bounds.y, kind };
        this.bottom = { x: this.bounds.x + 0.5 * this.bounds.width, y: this.bounds.y + this.bounds.height, kind };
    }
    get(side) {
        return this[Side[side].toLowerCase()];
    }
    getNearestSide(point) {
        const leftDistance = geometry_1.Point.euclideanDistance(point, this.left);
        const rightDistance = geometry_1.Point.euclideanDistance(point, this.right);
        const topDistance = geometry_1.Point.euclideanDistance(point, this.top);
        const bottomDistance = geometry_1.Point.euclideanDistance(point, this.bottom);
        let currentNearestSide = Side.LEFT;
        let currentMinDist = leftDistance;
        if (rightDistance < currentMinDist) {
            currentMinDist = rightDistance;
            currentNearestSide = Side.RIGHT;
        }
        if (topDistance < currentMinDist) {
            currentMinDist = topDistance;
            currentNearestSide = Side.TOP;
        }
        if (bottomDistance < currentMinDist) {
            currentMinDist = bottomDistance;
            currentNearestSide = Side.BOTTOM;
        }
        return currentNearestSide;
    }
}
exports.DefaultAnchors = DefaultAnchors;
let AbstractEdgeRouter = class AbstractEdgeRouter {
    pointAt(edge, t) {
        const segments = this.calculateSegment(edge, t);
        if (!segments)
            return undefined;
        const { segmentStart, segmentEnd, lambda } = segments;
        return geometry_1.Point.linear(segmentStart, segmentEnd, lambda);
    }
    derivativeAt(edge, t) {
        const segments = this.calculateSegment(edge, t);
        if (!segments)
            return undefined;
        const { segmentStart, segmentEnd } = segments;
        return {
            x: segmentEnd.x - segmentStart.x,
            y: segmentEnd.y - segmentStart.y
        };
    }
    calculateSegment(edge, t) {
        if (t < 0 || t > 1)
            return undefined;
        const routedPoints = this.route(edge);
        if (routedPoints.length < 2)
            return undefined;
        const segmentLengths = [];
        let totalLength = 0;
        for (let i = 0; i < routedPoints.length - 1; ++i) {
            segmentLengths[i] = geometry_1.Point.euclideanDistance(routedPoints[i], routedPoints[i + 1]);
            totalLength += segmentLengths[i];
        }
        let currentLenght = 0;
        const tAsLenght = t * totalLength;
        for (let i = 0; i < routedPoints.length - 1; ++i) {
            const newLength = currentLenght + segmentLengths[i];
            // avoid division by (almost) zero
            if (segmentLengths[i] > 1E-8) {
                if (newLength >= tAsLenght) {
                    const lambda = Math.max(0, (tAsLenght - currentLenght)) / segmentLengths[i];
                    return {
                        segmentStart: routedPoints[i],
                        segmentEnd: routedPoints[i + 1],
                        lambda
                    };
                }
            }
            currentLenght = newLength;
        }
        return {
            segmentEnd: routedPoints.pop(),
            segmentStart: routedPoints.pop(),
            lambda: 1
        };
    }
    addHandle(edge, kind, type, routingPointIndex) {
        const handle = new model_1.SRoutingHandle();
        handle.kind = kind;
        handle.pointIndex = routingPointIndex;
        handle.type = type;
        if (kind === 'target' && edge.id === model_1.edgeInProgressID)
            handle.id = model_1.edgeInProgressTargetHandleID;
        edge.add(handle);
        return handle;
    }
    getHandlePosition(edge, route, handle) {
        switch (handle.kind) {
            case 'source':
                if (edge.source instanceof model_1.SDanglingAnchor)
                    return edge.source.position;
                else
                    return route[0];
            case 'target':
                if (edge.target instanceof model_1.SDanglingAnchor)
                    return edge.target.position;
                else {
                    return route[route.length - 1];
                }
            default:
                const position = this.getInnerHandlePosition(edge, route, handle);
                if (position !== undefined)
                    return position;
                if (handle.pointIndex >= 0 && handle.pointIndex < edge.routingPoints.length)
                    return edge.routingPoints[handle.pointIndex];
        }
        return undefined;
    }
    findRouteSegment(edge, route, handleIndex) {
        const getIndex = (rp) => {
            if (rp.pointIndex !== undefined)
                return rp.pointIndex;
            else if (rp.kind === 'target')
                return edge.routingPoints.length;
            else
                return -2;
        };
        let start, end;
        for (const rp of route) {
            const i = getIndex(rp);
            if (i <= handleIndex && (start === undefined || i > getIndex(start)))
                start = rp;
            if (i > handleIndex && (end === undefined || i < getIndex(end)))
                end = rp;
        }
        return { start, end };
    }
    getTranslatedAnchor(connectable, refPoint, refContainer, edge, anchorCorrection = 0) {
        const translatedRefPoint = (0, smodel_utils_1.translatePoint)(refPoint, refContainer, connectable.parent);
        const anchorComputer = this.getAnchorComputer(connectable);
        const strokeCorrection = 0.5 * connectable.strokeWidth;
        const anchor = anchorComputer.getAnchor(connectable, translatedRefPoint, anchorCorrection + strokeCorrection);
        return (0, smodel_utils_1.translatePoint)(anchor, connectable.parent, edge.parent);
    }
    getAnchorComputer(connectable) {
        return this.anchorRegistry.get(this.kind, connectable.anchorKind);
    }
    applyHandleMoves(edge, moves) {
        const remainingMoves = moves.slice();
        moves.forEach(move => {
            const handle = move.handle;
            if (handle.kind === 'source' && !(edge.source instanceof model_1.SDanglingAnchor)) {
                // detach source
                const anchor = new model_1.SDanglingAnchor();
                anchor.id = edge.id + '_dangling-source';
                anchor.original = edge.source;
                anchor.position = move.toPosition;
                handle.root.add(anchor);
                handle.danglingAnchor = anchor;
                edge.sourceId = anchor.id;
            }
            else if (handle.kind === 'target' && !(edge.target instanceof model_1.SDanglingAnchor)) {
                // detach target
                const anchor = new model_1.SDanglingAnchor();
                anchor.id = edge.id + '_dangling-target';
                anchor.original = edge.target;
                anchor.position = move.toPosition;
                handle.root.add(anchor);
                handle.danglingAnchor = anchor;
                edge.targetId = anchor.id;
            }
            if (handle.danglingAnchor) {
                handle.danglingAnchor.position = move.toPosition;
                remainingMoves.splice(remainingMoves.indexOf(move), 1);
            }
        });
        if (remainingMoves.length > 0)
            this.applyInnerHandleMoves(edge, remainingMoves);
        this.cleanupRoutingPoints(edge, edge.routingPoints, true, true);
    }
    cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints) {
        const sourceAnchors = new DefaultAnchors(edge.source, edge.parent, "source");
        const targetAnchors = new DefaultAnchors(edge.target, edge.parent, "target");
        this.resetRoutingPointsOnReconnect(edge, routingPoints, updateHandles, sourceAnchors, targetAnchors);
    }
    resetRoutingPointsOnReconnect(edge, routingPoints, updateHandles, sourceAnchors, targetAnchors) {
        if (routingPoints.length === 0 || edge.source instanceof model_1.SDanglingAnchor || edge.target instanceof model_1.SDanglingAnchor) {
            const options = this.getOptions(edge);
            const corners = this.calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options);
            routingPoints.splice(0, routingPoints.length, ...corners);
            if (updateHandles) {
                let maxPointIndex = -2;
                edge.children.forEach(child => {
                    if (child instanceof model_1.SRoutingHandle) {
                        if (child.kind === 'target')
                            child.pointIndex = routingPoints.length;
                        else if (child.kind === 'line' && child.pointIndex >= routingPoints.length)
                            edge.remove(child);
                        else
                            maxPointIndex = Math.max(child.pointIndex, maxPointIndex);
                    }
                });
                for (let i = maxPointIndex; i < routingPoints.length - 1; ++i)
                    this.addHandle(edge, 'manhattan-50%', 'volatile-routing-point', i);
            }
            return true;
        }
        return false;
    }
    applyReconnect(edge, newSourceId, newTargetId) {
        let hasChanged = false;
        if (newSourceId) {
            const newSource = edge.root.index.getById(newSourceId);
            if (newSource instanceof model_2.SConnectableElement) {
                edge.sourceId = newSource.id;
                hasChanged = true;
            }
        }
        if (newTargetId) {
            const newTarget = edge.root.index.getById(newTargetId);
            if (newTarget instanceof model_2.SConnectableElement) {
                edge.targetId = newTarget.id;
                hasChanged = true;
            }
        }
        if (hasChanged) {
            // reset attached elements in index
            edge.index.remove(edge);
            edge.index.add(edge);
            if (this.getSelfEdgeIndex(edge) > -1) {
                edge.routingPoints = [];
                this.cleanupRoutingPoints(edge, edge.routingPoints, true, true);
            }
        }
    }
    takeSnapshot(edge) {
        return {
            routingPoints: edge.routingPoints.slice(),
            routingHandles: edge.children
                .filter(child => child instanceof model_1.SRoutingHandle)
                .map(child => child),
            routedPoints: this.route(edge),
            router: this,
            source: edge.source,
            target: edge.target
        };
    }
    applySnapshot(edge, snapshot) {
        edge.routingPoints = snapshot.routingPoints;
        edge.removeAll(child => child instanceof model_1.SRoutingHandle);
        edge.routerKind = snapshot.router.kind;
        snapshot.routingHandles.forEach(handle => edge.add(handle));
        if (snapshot.source)
            edge.sourceId = snapshot.source.id;
        if (snapshot.target)
            edge.targetId = snapshot.target.id;
        // update index
        edge.root.index.remove(edge);
        edge.root.index.add(edge);
    }
    calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options) {
        const selfEdgeIndex = this.getSelfEdgeIndex(edge);
        if (selfEdgeIndex >= 0) {
            const standardDist = options.standardDistance;
            const delta = options.selfEdgeOffset * Math.min(sourceAnchors.bounds.width, sourceAnchors.bounds.height);
            switch (selfEdgeIndex % 4) {
                case 0:
                    return [
                        { x: sourceAnchors.get(Side.RIGHT).x + standardDist, y: sourceAnchors.get(Side.RIGHT).y + delta },
                        { x: sourceAnchors.get(Side.RIGHT).x + standardDist, y: sourceAnchors.get(Side.BOTTOM).y + standardDist },
                        { x: sourceAnchors.get(Side.BOTTOM).x + delta, y: sourceAnchors.get(Side.BOTTOM).y + standardDist },
                    ];
                case 1:
                    return [
                        { x: sourceAnchors.get(Side.BOTTOM).x - delta, y: sourceAnchors.get(Side.BOTTOM).y + standardDist },
                        { x: sourceAnchors.get(Side.LEFT).x - standardDist, y: sourceAnchors.get(Side.BOTTOM).y + standardDist },
                        { x: sourceAnchors.get(Side.LEFT).x - standardDist, y: sourceAnchors.get(Side.LEFT).y + delta },
                    ];
                case 2:
                    return [
                        { x: sourceAnchors.get(Side.LEFT).x - standardDist, y: sourceAnchors.get(Side.LEFT).y - delta },
                        { x: sourceAnchors.get(Side.LEFT).x - standardDist, y: sourceAnchors.get(Side.TOP).y - standardDist },
                        { x: sourceAnchors.get(Side.TOP).x - delta, y: sourceAnchors.get(Side.TOP).y - standardDist },
                    ];
                case 3:
                    return [
                        { x: sourceAnchors.get(Side.TOP).x + delta, y: sourceAnchors.get(Side.TOP).y - standardDist },
                        { x: sourceAnchors.get(Side.RIGHT).x + standardDist, y: sourceAnchors.get(Side.TOP).y - standardDist },
                        { x: sourceAnchors.get(Side.RIGHT).x + standardDist, y: sourceAnchors.get(Side.RIGHT).y - delta },
                    ];
            }
        }
        return [];
    }
    getSelfEdgeIndex(edge) {
        if (!edge.source || edge.source !== edge.target)
            return -1;
        return edge.source.outgoingEdges
            .filter(otherEdge => otherEdge.target === edge.source)
            .indexOf(edge);
    }
    commitRoute(edge, routedPoints) {
        const newRoutingPoints = [];
        for (let i = 1; i < routedPoints.length - 1; ++i)
            newRoutingPoints.push({ x: routedPoints[i].x, y: routedPoints[i].y });
        edge.routingPoints = newRoutingPoints;
    }
};
__decorate([
    (0, inversify_1.inject)(anchor_1.AnchorComputerRegistry),
    __metadata("design:type", anchor_1.AnchorComputerRegistry)
], AbstractEdgeRouter.prototype, "anchorRegistry", void 0);
AbstractEdgeRouter = __decorate([
    (0, inversify_1.injectable)()
], AbstractEdgeRouter);
exports.AbstractEdgeRouter = AbstractEdgeRouter;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/anchor.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/anchor.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AnchorComputerRegistry = exports.RECTANGULAR_ANCHOR_KIND = exports.ELLIPTIC_ANCHOR_KIND = exports.DIAMOND_ANCHOR_KIND = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "./node_modules/sprotty/lib/utils/registry.js");
exports.DIAMOND_ANCHOR_KIND = 'diamond';
exports.ELLIPTIC_ANCHOR_KIND = 'elliptic';
exports.RECTANGULAR_ANCHOR_KIND = 'rectangular';
let AnchorComputerRegistry = class AnchorComputerRegistry extends registry_1.InstanceRegistry {
    constructor(anchors) {
        super();
        anchors.forEach(anchor => this.register(anchor.kind, anchor));
    }
    get defaultAnchorKind() {
        return exports.RECTANGULAR_ANCHOR_KIND;
    }
    get(routerKind, anchorKind) {
        return super.get(`${routerKind}:${anchorKind || this.defaultAnchorKind}`);
    }
};
AnchorComputerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IAnchorComputer)),
    __metadata("design:paramtypes", [Array])
], AnchorComputerRegistry);
exports.AnchorComputerRegistry = AnchorComputerRegistry;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/bezier-anchors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/bezier-anchors.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BezierDiamondAnchor = exports.BezierRectangleAnchor = exports.BezierEllipseAnchor = void 0;
const anchor_1 = __webpack_require__(/*! ./anchor */ "./node_modules/sprotty/lib/features/routing/anchor.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const polyline_anchors_1 = __webpack_require__(/*! ./polyline-anchors */ "./node_modules/sprotty/lib/features/routing/polyline-anchors.js");
const bezier_edge_router_1 = __webpack_require__(/*! ./bezier-edge-router */ "./node_modules/sprotty/lib/features/routing/bezier-edge-router.js");
let BezierEllipseAnchor = class BezierEllipseAnchor extends polyline_anchors_1.EllipseAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
};
BezierEllipseAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierEllipseAnchor);
exports.BezierEllipseAnchor = BezierEllipseAnchor;
let BezierRectangleAnchor = class BezierRectangleAnchor extends polyline_anchors_1.RectangleAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
};
BezierRectangleAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierRectangleAnchor);
exports.BezierRectangleAnchor = BezierRectangleAnchor;
let BezierDiamondAnchor = class BezierDiamondAnchor extends polyline_anchors_1.DiamondAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.DIAMOND_ANCHOR_KIND;
    }
};
BezierDiamondAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierDiamondAnchor);
exports.BezierDiamondAnchor = BezierDiamondAnchor;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/bezier-edge-router.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/bezier-edge-router.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var BezierEdgeRouter_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddRemoveBezierSegmentCommand = exports.AddRemoveBezierSegmentAction = exports.BezierMouseListener = exports.BezierEdgeRouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ./routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
const abstract_edge_router_1 = __webpack_require__(/*! ./abstract-edge-router */ "./node_modules/sprotty/lib/features/routing/abstract-edge-router.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
let BezierEdgeRouter = BezierEdgeRouter_1 = class BezierEdgeRouter extends abstract_edge_router_1.AbstractEdgeRouter {
    get kind() {
        return BezierEdgeRouter_1.KIND;
    }
    route(edge) {
        if (!edge.source || !edge.target)
            return [];
        const rpCount = edge.routingPoints.length;
        const source = edge.source;
        const target = edge.target;
        const result = [];
        result.push({ kind: 'source', x: 0, y: 0 });
        if (rpCount === 0) {
            // initial values
            const [h1, h2] = this.createDefaultBezierHandles(source.position, target.position);
            result.push({ kind: 'bezier-control-after', x: h1.x, y: h1.y, pointIndex: 0 });
            result.push({ kind: 'bezier-control-before', x: h2.x, y: h2.y, pointIndex: 1 });
            edge.routingPoints.push(h1);
            edge.routingPoints.push(h2);
        }
        else if (rpCount >= 2) {
            for (let i = 0; i < rpCount; i++) {
                const p = edge.routingPoints[i];
                if (i % 3 === 0) {
                    result.push({ kind: 'bezier-control-after', x: p.x, y: p.y, pointIndex: i });
                }
                if ((i + 1) % 3 === 0) {
                    result.push({ kind: 'bezier-junction', x: p.x, y: p.y, pointIndex: i });
                }
                else if ((i + 2) % 3 === 0) {
                    result.push({ kind: 'bezier-control-before', x: p.x, y: p.y, pointIndex: i });
                }
            }
        }
        result.push({ kind: 'target', x: 0, y: 0 });
        // use "ends" of edge as reference or next bezier-junction
        const p0 = rpCount > 2 ? edge.routingPoints[2] : target.position;
        const pn = rpCount > 2 ? edge.routingPoints[edge.routingPoints.length - 3] : source.position;
        const sourceAnchor = this.getTranslatedAnchor(source, p0, target.parent, edge, edge.sourceAnchorCorrection);
        const targetAnchor = this.getTranslatedAnchor(target, pn, source.parent, edge, edge.targetAnchorCorrection);
        result[0] = { kind: 'source', x: sourceAnchor.x, y: sourceAnchor.y };
        result[result.length - 1] = { kind: 'target', x: targetAnchor.x, y: targetAnchor.y };
        return result;
    }
    createDefaultBezierHandles(relH1, relH2) {
        const h1 = {
            x: relH1.x - BezierEdgeRouter_1.DEFAULT_BEZIER_HANDLE_OFFSET,
            y: relH1.y
        };
        const h2 = {
            x: relH2.x + BezierEdgeRouter_1.DEFAULT_BEZIER_HANDLE_OFFSET,
            y: relH2.y
        };
        return [h1, h2];
    }
    createRoutingHandles(edge) {
        // route ensure there are at least 2 routed points
        this.route(edge);
        this.rebuildHandles(edge);
    }
    rebuildHandles(edge) {
        this.addHandle(edge, 'source', 'routing-point', -2);
        this.addHandle(edge, 'bezier-control-after', 'bezier-routing-point', 0);
        this.addHandle(edge, 'bezier-add', 'bezier-create-routing-point', 0);
        const rpCount = edge.routingPoints.length;
        if (rpCount > 2) {
            for (let i = 1; i < rpCount - 1; i += 3) {
                this.addHandle(edge, 'bezier-control-before', 'bezier-routing-point', i);
                // Add two circle for add/remove segments
                this.addHandle(edge, 'bezier-add', 'bezier-create-routing-point', i + 1);
                this.addHandle(edge, 'bezier-junction', 'routing-point', i + 1);
                this.addHandle(edge, 'bezier-remove', 'bezier-remove-routing-point', i + 1);
                this.addHandle(edge, 'bezier-control-after', 'bezier-routing-point', i + 2);
                // re-position control-pairs
                this.moveBezierControlPair(edge.routingPoints[i], i, edge);
            }
        }
        this.addHandle(edge, 'bezier-control-before', 'bezier-routing-point', rpCount - 1);
        this.addHandle(edge, 'target', 'routing-point', -1);
    }
    getInnerHandlePosition(edge, route, handle) {
        if (handle.kind === 'bezier-control-before' || handle.kind === 'bezier-junction' || handle.kind === 'bezier-control-after') {
            for (let i = 0; i < route.length; i++) {
                const p = route[i];
                if (p.pointIndex === handle.pointIndex && p.kind === handle.kind)
                    return p;
            }
        }
        else if (handle.kind === 'bezier-add') {
            const ctrlPoint = this.findBezierControl(edge, route, handle.pointIndex);
            return { x: ctrlPoint.x, y: ctrlPoint.y + 12.5 };
        }
        else if (handle.kind === 'bezier-remove') {
            const ctrlPoint = this.findBezierControl(edge, route, handle.pointIndex);
            return { x: ctrlPoint.x, y: ctrlPoint.y - 12.5 };
        }
        return undefined;
    }
    findBezierControl(edge, route, handleIndex) {
        let result = { x: route[0].x, y: route[0].y };
        if (handleIndex > 0) {
            for (const rp of route) {
                if (rp.pointIndex !== undefined && rp.pointIndex === handleIndex && rp.kind === 'bezier-junction') {
                    result = { x: rp.x, y: rp.y };
                    break;
                }
            }
        }
        return result;
    }
    applyHandleMoves(edge, moves) {
        moves.forEach(move => {
            const handle = move.handle;
            let orgPosition = { x: 0, y: 0 };
            let relativePos, newControlPos, ctrlPointIndex;
            const moveToPos = move.toPosition;
            switch (handle.kind) {
                case 'bezier-control-before':
                case 'bezier-control-after':
                    // find potential other handle/rp and move
                    this.moveBezierControlPair(moveToPos, move.handle.pointIndex, edge);
                    break;
                case 'bezier-junction':
                    const index = handle.pointIndex;
                    if (index >= 0 && index < edge.routingPoints.length) {
                        ctrlPointIndex = index - 1;
                        orgPosition = edge.routingPoints[index];
                        relativePos = edge.routingPoints[ctrlPointIndex];
                        newControlPos = this.calcRelativeMove(orgPosition, moveToPos, relativePos);
                        edge.routingPoints[index] = moveToPos;
                        this.moveBezierControlPair(newControlPos, ctrlPointIndex, edge);
                    }
                    break;
                case 'source':
                    ctrlPointIndex = 0;
                    relativePos = edge.routingPoints[ctrlPointIndex];
                    if (!(edge.source instanceof model_1.SDanglingAnchor)) {
                        // detach source
                        const anchor = new model_1.SDanglingAnchor();
                        anchor.id = edge.id + '_dangling-source';
                        anchor.original = edge.source;
                        anchor.position = move.toPosition;
                        handle.root.add(anchor);
                        handle.danglingAnchor = anchor;
                        edge.sourceId = anchor.id;
                        if (edge.source)
                            orgPosition = edge.source.position;
                    }
                    else if (handle.danglingAnchor) {
                        orgPosition = handle.danglingAnchor.position;
                        handle.danglingAnchor.position = moveToPos;
                    }
                    newControlPos = this.calcRelativeMove(orgPosition, moveToPos, relativePos);
                    this.moveBezierControlPair(newControlPos, ctrlPointIndex, edge);
                    break;
                case 'target':
                    ctrlPointIndex = edge.routingPoints.length - 1;
                    relativePos = edge.routingPoints[ctrlPointIndex];
                    if (!(edge.target instanceof model_1.SDanglingAnchor)) {
                        // detach target
                        const anchor = new model_1.SDanglingAnchor();
                        anchor.id = edge.id + '_dangling-target';
                        anchor.original = edge.target;
                        anchor.position = moveToPos;
                        handle.root.add(anchor);
                        handle.danglingAnchor = anchor;
                        edge.targetId = anchor.id;
                        if (edge.target)
                            orgPosition = edge.target.position;
                    }
                    else if (handle.danglingAnchor) {
                        orgPosition = handle.danglingAnchor.position;
                        handle.danglingAnchor.position = moveToPos;
                    }
                    newControlPos = this.calcRelativeMove(orgPosition, moveToPos, relativePos);
                    this.moveBezierControlPair(newControlPos, ctrlPointIndex, edge);
                    break;
                default:
                    break;
            }
        });
    }
    applyInnerHandleMoves(edge, moves) {
        // not required
    }
    getOptions(edge) {
        return {
            minimalPointDistance: 2,
            standardDistance: 0.1,
            selfEdgeOffset: 20
        };
    }
    calcRelativeMove(oldPos, newPos, relativePoint) {
        return {
            x: relativePoint.x - (oldPos.x - newPos.x),
            y: relativePoint.y - (oldPos.y - newPos.y)
        };
    }
    createNewBezierSegment(index, edge) {
        const routingPoints = edge.routingPoints;
        let bezierJunctionPos, start, end;
        if (routingPoints.length === 2) {
            start = routingPoints[index < 0 ? 0 : index];
            end = routingPoints[routingPoints.length - 1];
            bezierJunctionPos = (0, geometry_1.centerOfLine)(start, end);
        }
        else {
            start = routingPoints[index];
            end = routingPoints[index + 2];
            bezierJunctionPos = (0, geometry_1.centerOfLine)(start, end);
        }
        const [h1, h2] = this.createDefaultBezierHandles(bezierJunctionPos, bezierJunctionPos);
        routingPoints.splice(index + 1, 0, h1);
        routingPoints.splice(index + 2, 0, bezierJunctionPos);
        routingPoints.splice(index + 3, 0, h2);
        // ensure handles are correctly positioned
        this.moveBezierControlPair(h1, index + 1, edge);
        // simple solution for now: just rebuildHandles
        edge.removeAll(c => c instanceof model_1.SRoutingHandle);
        this.rebuildHandles(edge);
    }
    removeBezierSegment(index, edge) {
        const routingPoints = edge.routingPoints;
        routingPoints.splice(index - 1, 3);
        // simple solution for now: just rebuildHandles
        edge.removeAll(c => c instanceof model_1.SRoutingHandle);
        this.rebuildHandles(edge);
    }
    moveBezierControlPair(newPos, ctrlPointIndex, edge) {
        if (ctrlPointIndex >= 0 && ctrlPointIndex < edge.routingPoints.length) {
            // find neighbors
            const before = ctrlPointIndex - 1;
            const after = ctrlPointIndex + 1;
            // this is the first control or the last control => nothing to do further
            if (before < 0 || after === edge.routingPoints.length) {
                edge.routingPoints[ctrlPointIndex] = newPos;
            }
            else {
                // behind bezier-junction
                if (ctrlPointIndex % 3 === 0) {
                    this.setBezierMirror(edge, newPos, ctrlPointIndex, false);
                    // before bezier-junction
                }
                else if ((ctrlPointIndex + 2) % 3 === 0) {
                    this.setBezierMirror(edge, newPos, ctrlPointIndex, true);
                }
            }
        }
    }
    setBezierMirror(edge, newPos, pointIndex, before) {
        edge.routingPoints[pointIndex] = newPos;
        const jct = edge.routingPoints[before ? (pointIndex + 1) : (pointIndex - 1)];
        edge.routingPoints[before ? (pointIndex + 2) : (pointIndex - 2)] = {
            x: jct.x - (newPos.x - jct.x),
            y: jct.y - (newPos.y - jct.y)
        };
    }
};
BezierEdgeRouter.KIND = 'bezier';
BezierEdgeRouter.DEFAULT_BEZIER_HANDLE_OFFSET = 25;
BezierEdgeRouter = BezierEdgeRouter_1 = __decorate([
    (0, inversify_1.injectable)()
], BezierEdgeRouter);
exports.BezierEdgeRouter = BezierEdgeRouter;
/**
 * Reacts on mouseDown events if the target kind is bezier-add or bezier-remove
 */
class BezierMouseListener extends mouse_tool_1.MouseListener {
    mouseDown(target, event) {
        const result = [];
        if (target instanceof model_1.SRoutingHandle && (target.kind === 'bezier-add' || target.kind === 'bezier-remove')) {
            if (target.type === 'bezier-create-routing-point') {
                result.push(AddRemoveBezierSegmentAction.create('add', target.id));
            }
            else if (target.type === 'bezier-remove-routing-point') {
                result.push(AddRemoveBezierSegmentAction.create('remove', target.id));
            }
        }
        return result;
    }
}
exports.BezierMouseListener = BezierMouseListener;
;
var AddRemoveBezierSegmentAction;
(function (AddRemoveBezierSegmentAction) {
    AddRemoveBezierSegmentAction.KIND = 'addRemoveBezierSegment';
    function create(actionTask, targetId) {
        return {
            kind: AddRemoveBezierSegmentAction.KIND,
            actionTask,
            targetId
        };
    }
    AddRemoveBezierSegmentAction.create = create;
})(AddRemoveBezierSegmentAction = exports.AddRemoveBezierSegmentAction || (exports.AddRemoveBezierSegmentAction = {}));
let AddRemoveBezierSegmentCommand = class AddRemoveBezierSegmentCommand extends command_1.Command {
    constructor(action, edgeRouterRegistry) {
        super();
        this.action = action;
        this.edgeRouterRegistry = edgeRouterRegistry;
    }
    execute(context) {
        const index = context.root.index;
        const target = index.getById(this.action.targetId);
        if (this.edgeRouterRegistry && target instanceof model_1.SRoutingHandle) {
            const raw = this.edgeRouterRegistry.get(target.parent.routerKind);
            if (raw instanceof BezierEdgeRouter) {
                const router = raw;
                for (const child of context.root.children) {
                    if (child.id === target.parent.id) {
                        if (this.action.actionTask === 'add') {
                            router.createNewBezierSegment(target.pointIndex, child);
                        }
                        else if (this.action.actionTask === 'remove') {
                            router.removeBezierSegment(target.pointIndex, child);
                        }
                        break;
                    }
                }
            }
        }
        return context.root;
    }
    undo(context) {
        throw new Error('Method not implemented.');
    }
    redo(context) {
        throw new Error('Method not implemented.');
    }
};
AddRemoveBezierSegmentCommand.KIND = AddRemoveBezierSegmentAction.KIND;
AddRemoveBezierSegmentCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __param(1, (0, inversify_1.inject)(routing_1.EdgeRouterRegistry)),
    __metadata("design:paramtypes", [Object, routing_1.EdgeRouterRegistry])
], AddRemoveBezierSegmentCommand);
exports.AddRemoveBezierSegmentCommand = AddRemoveBezierSegmentCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/di.config.js":
/*!****************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/di.config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const manhattan_edge_router_1 = __webpack_require__(/*! ./manhattan-edge-router */ "./node_modules/sprotty/lib/features/routing/manhattan-edge-router.js");
const polyline_edge_router_1 = __webpack_require__(/*! ./polyline-edge-router */ "./node_modules/sprotty/lib/features/routing/polyline-edge-router.js");
const manhattan_anchors_1 = __webpack_require__(/*! ./manhattan-anchors */ "./node_modules/sprotty/lib/features/routing/manhattan-anchors.js");
const polyline_anchors_1 = __webpack_require__(/*! ./polyline-anchors */ "./node_modules/sprotty/lib/features/routing/polyline-anchors.js");
const anchor_1 = __webpack_require__(/*! ./anchor */ "./node_modules/sprotty/lib/features/routing/anchor.js");
const routing_1 = __webpack_require__(/*! ./routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
const bezier_edge_router_1 = __webpack_require__(/*! ./bezier-edge-router */ "./node_modules/sprotty/lib/features/routing/bezier-edge-router.js");
const bezier_anchors_1 = __webpack_require__(/*! ./bezier-anchors */ "./node_modules/sprotty/lib/features/routing/bezier-anchors.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const routingModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(routing_1.EdgeRouterRegistry).toSelf().inSingletonScope();
    bind(anchor_1.AnchorComputerRegistry).toSelf().inSingletonScope();
    bind(manhattan_edge_router_1.ManhattanEdgeRouter).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRouter).toService(manhattan_edge_router_1.ManhattanEdgeRouter);
    bind(types_1.TYPES.IAnchorComputer).to(manhattan_anchors_1.ManhattanEllipticAnchor).inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).to(manhattan_anchors_1.ManhattanRectangularAnchor).inSingletonScope();
    bind(types_1.TYPES.IAnchorComputer).to(manhattan_anchors_1.ManhattanDiamondAnchor).inSingletonScope();
    bind(polyline_edge_router_1.PolylineEdgeRouter).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRouter).toService(polyline_edge_router_1.PolylineEdgeRouter);
    bind(types_1.TYPES.IAnchorComputer).to(polyline_anchors_1.EllipseAnchor);
    bind(types_1.TYPES.IAnchorComputer).to(polyline_anchors_1.RectangleAnchor);
    bind(types_1.TYPES.IAnchorComputer).to(polyline_anchors_1.DiamondAnchor);
    bind(bezier_edge_router_1.BezierEdgeRouter).toSelf().inSingletonScope();
    bind(types_1.TYPES.IEdgeRouter).toService(bezier_edge_router_1.BezierEdgeRouter);
    bind(types_1.TYPES.IAnchorComputer).to(bezier_anchors_1.BezierEllipseAnchor);
    bind(types_1.TYPES.IAnchorComputer).to(bezier_anchors_1.BezierRectangleAnchor);
    bind(types_1.TYPES.IAnchorComputer).to(bezier_anchors_1.BezierDiamondAnchor);
    (0, command_registration_1.configureCommand)({ bind, isBound }, bezier_edge_router_1.AddRemoveBezierSegmentCommand);
});
exports["default"] = routingModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/manhattan-anchors.js":
/*!************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/manhattan-anchors.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ManhattanRectangularAnchor_1, ManhattanDiamondAnchor_1, ManhattanEllipticAnchor_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManhattanEllipticAnchor = exports.ManhattanDiamondAnchor = exports.ManhattanRectangularAnchor = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const geometry_2 = __webpack_require__(/*! ../../utils/geometry */ "./node_modules/sprotty/lib/utils/geometry.js");
const anchor_1 = __webpack_require__(/*! ./anchor */ "./node_modules/sprotty/lib/features/routing/anchor.js");
const manhattan_edge_router_1 = __webpack_require__(/*! ./manhattan-edge-router */ "./node_modules/sprotty/lib/features/routing/manhattan-edge-router.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let ManhattanRectangularAnchor = ManhattanRectangularAnchor_1 = class ManhattanRectangularAnchor {
    get kind() {
        return ManhattanRectangularAnchor_1.KIND;
    }
    getAnchor(connectable, refPoint, offset) {
        const b = connectable.bounds;
        if (b.width <= 0 || b.height <= 0) {
            return b;
        }
        const bounds = {
            x: b.x - offset,
            y: b.y - offset,
            width: b.width + 2 * offset,
            height: b.height + 2 * offset
        };
        if (refPoint.x >= bounds.x && bounds.x + bounds.width >= refPoint.x) {
            if (refPoint.y < bounds.y + 0.5 * bounds.height)
                return { x: refPoint.x, y: bounds.y };
            else
                return { x: refPoint.x, y: bounds.y + bounds.height };
        }
        if (refPoint.y >= bounds.y && bounds.y + bounds.height >= refPoint.y) {
            if (refPoint.x < bounds.x + 0.5 * bounds.width)
                return { x: bounds.x, y: refPoint.y };
            else
                return { x: bounds.x + bounds.width, y: refPoint.y };
        }
        return geometry_1.Bounds.center(bounds);
    }
};
ManhattanRectangularAnchor.KIND = manhattan_edge_router_1.ManhattanEdgeRouter.KIND + ':' + anchor_1.RECTANGULAR_ANCHOR_KIND;
ManhattanRectangularAnchor = ManhattanRectangularAnchor_1 = __decorate([
    (0, inversify_1.injectable)()
], ManhattanRectangularAnchor);
exports.ManhattanRectangularAnchor = ManhattanRectangularAnchor;
let ManhattanDiamondAnchor = ManhattanDiamondAnchor_1 = class ManhattanDiamondAnchor {
    get kind() {
        return ManhattanDiamondAnchor_1.KIND;
    }
    getAnchor(connectable, refPoint, offset = 0) {
        const b = connectable.bounds;
        if (b.width <= 0 || b.height <= 0) {
            return b;
        }
        const bounds = {
            x: b.x - offset,
            y: b.y - offset,
            width: b.width + 2 * offset,
            height: b.height + 2 * offset
        };
        const c = geometry_1.Bounds.center(bounds);
        let outline = undefined;
        let refLine = undefined;
        if (refPoint.x >= bounds.x && refPoint.x <= bounds.x + bounds.width) {
            if (bounds.x + 0.5 * bounds.width >= refPoint.x) {
                refLine = new geometry_2.PointToPointLine(refPoint, { x: refPoint.x, y: c.y });
                if (refPoint.y < c.y)
                    outline = new geometry_2.PointToPointLine({ x: bounds.x, y: c.y }, { x: c.x, y: bounds.y });
                else
                    outline = new geometry_2.PointToPointLine({ x: bounds.x, y: c.y }, { x: c.x, y: bounds.y + bounds.height });
            }
            else {
                refLine = new geometry_2.PointToPointLine(refPoint, { x: refPoint.x, y: c.y });
                if (refPoint.y < c.y)
                    outline = new geometry_2.PointToPointLine({ x: bounds.x + bounds.width, y: c.y }, { x: c.x, y: bounds.y });
                else
                    outline = new geometry_2.PointToPointLine({ x: bounds.x + bounds.width, y: c.y }, { x: c.x, y: bounds.y + bounds.height });
            }
        }
        else if (refPoint.y >= bounds.y && refPoint.y <= bounds.y + bounds.height) {
            if (bounds.y + 0.5 * bounds.height >= refPoint.y) {
                refLine = new geometry_2.PointToPointLine(refPoint, { x: c.x, y: refPoint.y });
                if (refPoint.x < c.x)
                    outline = new geometry_2.PointToPointLine({ x: bounds.x, y: c.y }, { x: c.x, y: bounds.y });
                else
                    outline = new geometry_2.PointToPointLine({ x: bounds.x + bounds.width, y: c.y }, { x: c.x, y: bounds.y });
            }
            else {
                refLine = new geometry_2.PointToPointLine(refPoint, { x: c.x, y: refPoint.y });
                if (refPoint.x < c.x)
                    outline = new geometry_2.PointToPointLine({ x: bounds.x, y: c.y }, { x: c.x, y: bounds.y + bounds.height });
                else
                    outline = new geometry_2.PointToPointLine({ x: bounds.x + bounds.width, y: c.y }, { x: c.x, y: bounds.y + bounds.height });
            }
        }
        if (!!refLine && !!outline)
            return (0, geometry_2.intersection)(outline, refLine);
        else
            return c;
    }
};
ManhattanDiamondAnchor.KIND = manhattan_edge_router_1.ManhattanEdgeRouter.KIND + ':' + anchor_1.DIAMOND_ANCHOR_KIND;
ManhattanDiamondAnchor = ManhattanDiamondAnchor_1 = __decorate([
    (0, inversify_1.injectable)()
], ManhattanDiamondAnchor);
exports.ManhattanDiamondAnchor = ManhattanDiamondAnchor;
let ManhattanEllipticAnchor = ManhattanEllipticAnchor_1 = class ManhattanEllipticAnchor {
    get kind() {
        return ManhattanEllipticAnchor_1.KIND;
    }
    getAnchor(connectable, refPoint, offset = 0) {
        const b = connectable.bounds;
        if (b.width <= 0 || b.height <= 0) {
            return b;
        }
        const bounds = {
            x: b.x - offset,
            y: b.y - offset,
            width: b.width + 2 * offset,
            height: b.height + 2 * offset
        };
        const c = geometry_1.Bounds.center(bounds);
        const refRelative = geometry_1.Point.subtract(refPoint, c);
        let x = c.x;
        let y = c.y;
        if (refPoint.x >= bounds.x && bounds.x + bounds.width >= refPoint.x) {
            x += refRelative.x;
            const dy = 0.5 * bounds.height * Math.sqrt(1 - (refRelative.x * refRelative.x) / (0.25 * bounds.width * bounds.width));
            if (refRelative.y < 0)
                y -= dy;
            else
                y += dy;
        }
        else if (refPoint.y >= bounds.y && bounds.y + bounds.height >= refPoint.y) {
            y += refRelative.y;
            const dx = 0.5 * bounds.width * Math.sqrt(1 - (refRelative.y * refRelative.y) / (0.25 * bounds.height * bounds.height));
            if (refRelative.x < 0)
                x -= dx;
            else
                x += dx;
        }
        return { x, y };
    }
};
ManhattanEllipticAnchor.KIND = manhattan_edge_router_1.ManhattanEdgeRouter.KIND + ':' + anchor_1.ELLIPTIC_ANCHOR_KIND;
ManhattanEllipticAnchor = ManhattanEllipticAnchor_1 = __decorate([
    (0, inversify_1.injectable)()
], ManhattanEllipticAnchor);
exports.ManhattanEllipticAnchor = ManhattanEllipticAnchor;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/manhattan-edge-router.js":
/*!****************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/manhattan-edge-router.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ManhattanEdgeRouter = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const abstract_edge_router_1 = __webpack_require__(/*! ./abstract-edge-router */ "./node_modules/sprotty/lib/features/routing/abstract-edge-router.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/routing/model.js");
class ManhattanEdgeRouter extends abstract_edge_router_1.AbstractEdgeRouter {
    get kind() {
        return ManhattanEdgeRouter.KIND;
    }
    getOptions(edge) {
        return {
            standardDistance: 20,
            minimalPointDistance: 3,
            selfEdgeOffset: 0.25
        };
    }
    route(edge) {
        if (!edge.source || !edge.target)
            return [];
        const routedCorners = this.createRoutedCorners(edge);
        const sourceRefPoint = routedCorners[0]
            || (0, smodel_utils_1.translatePoint)(geometry_1.Bounds.center(edge.target.bounds), edge.target.parent, edge.parent);
        const sourceAnchor = this.getTranslatedAnchor(edge.source, sourceRefPoint, edge.parent, edge, edge.sourceAnchorCorrection);
        const targetRefPoint = routedCorners[routedCorners.length - 1]
            || (0, smodel_utils_1.translatePoint)(geometry_1.Bounds.center(edge.source.bounds), edge.source.parent, edge.parent);
        const targetAnchor = this.getTranslatedAnchor(edge.target, targetRefPoint, edge.parent, edge, edge.targetAnchorCorrection);
        if (!sourceAnchor || !targetAnchor)
            return [];
        const routedPoints = [];
        routedPoints.push(Object.assign({ kind: 'source' }, sourceAnchor));
        routedCorners.forEach(corner => routedPoints.push(corner));
        routedPoints.push(Object.assign({ kind: 'target' }, targetAnchor));
        return routedPoints;
    }
    createRoutedCorners(edge) {
        const sourceAnchors = new abstract_edge_router_1.DefaultAnchors(edge.source, edge.parent, 'source');
        const targetAnchors = new abstract_edge_router_1.DefaultAnchors(edge.target, edge.parent, 'target');
        if (edge.routingPoints.length > 0) {
            const routingPointsCopy = edge.routingPoints.slice();
            this.cleanupRoutingPoints(edge, routingPointsCopy, false, true);
            if (routingPointsCopy.length > 0)
                return routingPointsCopy.map((routingPoint, index) => {
                    return Object.assign({ kind: 'linear', pointIndex: index }, routingPoint);
                });
        }
        const options = this.getOptions(edge);
        const corners = this.calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options);
        return corners.map(corner => {
            return Object.assign({ kind: 'linear' }, corner);
        });
    }
    createRoutingHandles(edge) {
        const routedPoints = this.route(edge);
        this.commitRoute(edge, routedPoints);
        if (routedPoints.length > 0) {
            this.addHandle(edge, 'source', 'routing-point', -2);
            for (let i = 0; i < routedPoints.length - 1; ++i)
                this.addHandle(edge, 'manhattan-50%', 'volatile-routing-point', i - 1);
            this.addHandle(edge, 'target', 'routing-point', routedPoints.length - 2);
        }
    }
    getInnerHandlePosition(edge, route, handle) {
        const fraction = this.getFraction(handle.kind);
        if (fraction !== undefined) {
            const { start, end } = this.findRouteSegment(edge, route, handle.pointIndex);
            if (start !== undefined && end !== undefined)
                return geometry_1.Point.linear(start, end, fraction);
        }
        return undefined;
    }
    getFraction(kind) {
        switch (kind) {
            case 'manhattan-50%': return 0.5;
            default: return undefined;
        }
    }
    applyInnerHandleMoves(edge, moves) {
        const route = this.route(edge);
        const routingPoints = edge.routingPoints;
        const minimalPointDistance = this.getOptions(edge).minimalPointDistance;
        moves.forEach(move => {
            const handle = move.handle;
            const index = handle.pointIndex;
            const correctedX = this.correctX(routingPoints, index, move.toPosition.x, minimalPointDistance);
            const correctedY = this.correctY(routingPoints, index, move.toPosition.y, minimalPointDistance);
            switch (handle.kind) {
                case 'manhattan-50%':
                    if (index < 0) {
                        if ((0, geometry_1.almostEquals)(route[0].x, route[1].x))
                            this.alignX(routingPoints, 0, correctedX);
                        else
                            this.alignY(routingPoints, 0, correctedY);
                    }
                    else if (index < routingPoints.length - 1) {
                        if ((0, geometry_1.almostEquals)(routingPoints[index].x, routingPoints[index + 1].x)) {
                            this.alignX(routingPoints, index, correctedX);
                            this.alignX(routingPoints, index + 1, correctedX);
                        }
                        else {
                            this.alignY(routingPoints, index, correctedY);
                            this.alignY(routingPoints, index + 1, correctedY);
                        }
                    }
                    else {
                        if ((0, geometry_1.almostEquals)(route[route.length - 2].x, route[route.length - 1].x))
                            this.alignX(routingPoints, routingPoints.length - 1, correctedX);
                        else
                            this.alignY(routingPoints, routingPoints.length - 1, correctedY);
                    }
                    break;
            }
        });
    }
    correctX(routingPoints, index, x, minimalPointDistance) {
        if (index > 0 && Math.abs(x - routingPoints[index - 1].x) < minimalPointDistance)
            return routingPoints[index - 1].x;
        else if (index < routingPoints.length - 2 && Math.abs(x - routingPoints[index + 2].x) < minimalPointDistance)
            return routingPoints[index + 2].x;
        else
            return x;
    }
    alignX(routingPoints, index, x) {
        if (index >= 0 && index < routingPoints.length)
            routingPoints[index] = {
                x,
                y: routingPoints[index].y
            };
    }
    correctY(routingPoints, index, y, minimalPointDistance) {
        if (index > 0 && Math.abs(y - routingPoints[index - 1].y) < minimalPointDistance)
            return routingPoints[index - 1].y;
        else if (index < routingPoints.length - 2 && Math.abs(y - routingPoints[index + 2].y) < minimalPointDistance)
            return routingPoints[index + 2].y;
        else
            return y;
    }
    alignY(routingPoints, index, y) {
        if (index >= 0 && index < routingPoints.length)
            routingPoints[index] = {
                x: routingPoints[index].x,
                y
            };
    }
    cleanupRoutingPoints(edge, routingPoints, updateHandles, addRoutingPoints) {
        const sourceAnchors = new abstract_edge_router_1.DefaultAnchors(edge.source, edge.parent, "source");
        const targetAnchors = new abstract_edge_router_1.DefaultAnchors(edge.target, edge.parent, "target");
        if (this.resetRoutingPointsOnReconnect(edge, routingPoints, updateHandles, sourceAnchors, targetAnchors))
            return;
        // delete leading RPs inside the bounds of the source
        for (let i = 0; i < routingPoints.length; ++i)
            if (geometry_1.Bounds.includes(sourceAnchors.bounds, routingPoints[i])) {
                routingPoints.splice(0, 1);
                if (updateHandles) {
                    this.removeHandle(edge, -1);
                }
            }
            else {
                break;
            }
        // delete trailing RPs inside the bounds of the target
        for (let i = routingPoints.length - 1; i >= 0; --i)
            if (geometry_1.Bounds.includes(targetAnchors.bounds, routingPoints[i])) {
                routingPoints.splice(i, 1);
                if (updateHandles) {
                    this.removeHandle(edge, i);
                }
            }
            else {
                break;
            }
        if (routingPoints.length >= 2) {
            const options = this.getOptions(edge);
            for (let i = routingPoints.length - 2; i >= 0; --i) {
                if (geometry_1.Point.manhattanDistance(routingPoints[i], routingPoints[i + 1]) < options.minimalPointDistance) {
                    routingPoints.splice(i, 2);
                    --i;
                    if (updateHandles) {
                        this.removeHandle(edge, i - 1);
                        this.removeHandle(edge, i);
                    }
                }
            }
        }
        if (addRoutingPoints) {
            this.addAdditionalCorner(edge, routingPoints, sourceAnchors, targetAnchors, updateHandles);
            this.addAdditionalCorner(edge, routingPoints, targetAnchors, sourceAnchors, updateHandles);
            this.manhattanify(edge, routingPoints);
        }
    }
    removeHandle(edge, pointIndex) {
        const toBeRemoved = [];
        edge.children.forEach(child => {
            if (child instanceof model_1.SRoutingHandle) {
                if (child.pointIndex > pointIndex)
                    --child.pointIndex;
                else if (child.pointIndex === pointIndex)
                    toBeRemoved.push(child);
            }
        });
        toBeRemoved.forEach(child => edge.remove(child));
    }
    addAdditionalCorner(edge, routingPoints, currentAnchors, otherAnchors, updateHandles) {
        if (routingPoints.length === 0)
            return;
        const refPoint = currentAnchors.kind === 'source' ? routingPoints[0] : routingPoints[routingPoints.length - 1];
        const index = currentAnchors.kind === 'source' ? 0 : routingPoints.length;
        const shiftIndex = index - (currentAnchors.kind === 'source' ? 1 : 0);
        let isHorizontal;
        if (routingPoints.length > 1) {
            isHorizontal = index === 0
                ? (0, geometry_1.almostEquals)(routingPoints[0].x, routingPoints[1].x)
                : (0, geometry_1.almostEquals)(routingPoints[routingPoints.length - 1].x, routingPoints[routingPoints.length - 2].x);
        }
        else {
            const nearestSide = otherAnchors.getNearestSide(refPoint);
            isHorizontal = nearestSide === abstract_edge_router_1.Side.TOP || nearestSide === abstract_edge_router_1.Side.BOTTOM;
        }
        if (isHorizontal) {
            if (refPoint.y < currentAnchors.get(abstract_edge_router_1.Side.TOP).y || refPoint.y > currentAnchors.get(abstract_edge_router_1.Side.BOTTOM).y) {
                const newPoint = { x: currentAnchors.get(abstract_edge_router_1.Side.TOP).x, y: refPoint.y };
                routingPoints.splice(index, 0, newPoint);
                if (updateHandles) {
                    edge.children.forEach(child => {
                        if (child instanceof model_1.SRoutingHandle && child.pointIndex >= shiftIndex)
                            ++child.pointIndex;
                    });
                    this.addHandle(edge, 'manhattan-50%', 'volatile-routing-point', shiftIndex);
                }
            }
        }
        else {
            if (refPoint.x < currentAnchors.get(abstract_edge_router_1.Side.LEFT).x || refPoint.x > currentAnchors.get(abstract_edge_router_1.Side.RIGHT).x) {
                const newPoint = { x: refPoint.x, y: currentAnchors.get(abstract_edge_router_1.Side.LEFT).y };
                routingPoints.splice(index, 0, newPoint);
                if (updateHandles) {
                    edge.children.forEach(child => {
                        if (child instanceof model_1.SRoutingHandle && child.pointIndex >= shiftIndex)
                            ++child.pointIndex;
                    });
                    this.addHandle(edge, 'manhattan-50%', 'volatile-routing-point', shiftIndex);
                }
            }
        }
    }
    /**
     * Add artificial routing points to keep all angles rectilinear.
     *
     * This makes edge morphing look a lot smoother, where RP positions are interpolated
     * linearly probably resulting in non-rectilinear angles. We don't add handles for
     * these additional RPs.
     */
    manhattanify(edge, routingPoints) {
        for (let i = 1; i < routingPoints.length; ++i) {
            const isVertical = Math.abs(routingPoints[i - 1].x - routingPoints[i].x) < 1;
            const isHorizontal = Math.abs(routingPoints[i - 1].y - routingPoints[i].y) < 1;
            if (!isVertical && !isHorizontal) {
                routingPoints.splice(i, 0, {
                    x: routingPoints[i - 1].x,
                    y: routingPoints[i].y
                });
                ++i;
            }
        }
    }
    calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options) {
        const selfEdge = super.calculateDefaultCorners(edge, sourceAnchors, targetAnchors, options);
        if (selfEdge.length > 0)
            return selfEdge;
        const bestAnchors = this.getBestConnectionAnchors(edge, sourceAnchors, targetAnchors, options);
        const sourceSide = bestAnchors.source;
        const targetSide = bestAnchors.target;
        const corners = [];
        const startPoint = sourceAnchors.get(sourceSide);
        let endPoint = targetAnchors.get(targetSide);
        switch (sourceSide) {
            case abstract_edge_router_1.Side.RIGHT:
                switch (targetSide) {
                    case abstract_edge_router_1.Side.BOTTOM:
                        corners.push({ x: endPoint.x, y: startPoint.y });
                        break;
                    case abstract_edge_router_1.Side.TOP:
                        corners.push({ x: endPoint.x, y: startPoint.y });
                        break;
                    case abstract_edge_router_1.Side.RIGHT:
                        corners.push({ x: Math.max(startPoint.x, endPoint.x) + 1.5 * options.standardDistance, y: startPoint.y });
                        corners.push({ x: Math.max(startPoint.x, endPoint.x) + 1.5 * options.standardDistance, y: endPoint.y });
                        break;
                    case abstract_edge_router_1.Side.LEFT:
                        if (endPoint.y !== startPoint.y) {
                            corners.push({ x: (startPoint.x + endPoint.x) / 2, y: startPoint.y });
                            corners.push({ x: (startPoint.x + endPoint.x) / 2, y: endPoint.y });
                        }
                        break;
                }
                break;
            case abstract_edge_router_1.Side.LEFT:
                switch (targetSide) {
                    case abstract_edge_router_1.Side.BOTTOM:
                        corners.push({ x: endPoint.x, y: startPoint.y });
                        break;
                    case abstract_edge_router_1.Side.TOP:
                        corners.push({ x: endPoint.x, y: startPoint.y });
                        break;
                    default:
                        endPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
                        if (endPoint.y !== startPoint.y) {
                            corners.push({ x: (startPoint.x + endPoint.x) / 2, y: startPoint.y });
                            corners.push({ x: (startPoint.x + endPoint.x) / 2, y: endPoint.y });
                        }
                        break;
                }
                break;
            case abstract_edge_router_1.Side.TOP:
                switch (targetSide) {
                    case abstract_edge_router_1.Side.RIGHT:
                        if ((endPoint.x - startPoint.x) > 0) {
                            corners.push({ x: startPoint.x, y: startPoint.y - options.standardDistance });
                            corners.push({ x: endPoint.x + 1.5 * options.standardDistance, y: startPoint.y - options.standardDistance });
                            corners.push({ x: endPoint.x + 1.5 * options.standardDistance, y: endPoint.y });
                        }
                        else {
                            corners.push({ x: startPoint.x, y: endPoint.y });
                        }
                        break;
                    case abstract_edge_router_1.Side.LEFT:
                        if ((endPoint.x - startPoint.x) < 0) {
                            corners.push({ x: startPoint.x, y: startPoint.y - options.standardDistance });
                            corners.push({ x: endPoint.x - 1.5 * options.standardDistance, y: startPoint.y - options.standardDistance });
                            corners.push({ x: endPoint.x - 1.5 * options.standardDistance, y: endPoint.y });
                        }
                        else {
                            corners.push({ x: startPoint.x, y: endPoint.y });
                        }
                        break;
                    case abstract_edge_router_1.Side.TOP:
                        corners.push({ x: startPoint.x, y: Math.min(startPoint.y, endPoint.y) - 1.5 * options.standardDistance });
                        corners.push({ x: endPoint.x, y: Math.min(startPoint.y, endPoint.y) - 1.5 * options.standardDistance });
                        break;
                    case abstract_edge_router_1.Side.BOTTOM:
                        if (endPoint.x !== startPoint.x) {
                            corners.push({ x: startPoint.x, y: (startPoint.y + endPoint.y) / 2 });
                            corners.push({ x: endPoint.x, y: (startPoint.y + endPoint.y) / 2 });
                        }
                        break;
                }
                break;
            case abstract_edge_router_1.Side.BOTTOM:
                switch (targetSide) {
                    case abstract_edge_router_1.Side.RIGHT:
                        if ((endPoint.x - startPoint.x) > 0) {
                            corners.push({ x: startPoint.x, y: startPoint.y + options.standardDistance });
                            corners.push({ x: endPoint.x + 1.5 * options.standardDistance, y: startPoint.y + options.standardDistance });
                            corners.push({ x: endPoint.x + 1.5 * options.standardDistance, y: endPoint.y });
                        }
                        else {
                            corners.push({ x: startPoint.x, y: endPoint.y });
                        }
                        break;
                    case abstract_edge_router_1.Side.LEFT:
                        if ((endPoint.x - startPoint.x) < 0) {
                            corners.push({ x: startPoint.x, y: startPoint.y + options.standardDistance });
                            corners.push({ x: endPoint.x - 1.5 * options.standardDistance, y: startPoint.y + options.standardDistance });
                            corners.push({ x: endPoint.x - 1.5 * options.standardDistance, y: endPoint.y });
                        }
                        else {
                            corners.push({ x: startPoint.x, y: endPoint.y });
                        }
                        break;
                    default:
                        endPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
                        if (endPoint.x !== startPoint.x) {
                            corners.push({ x: startPoint.x, y: (startPoint.y + endPoint.y) / 2 });
                            corners.push({ x: endPoint.x, y: (startPoint.y + endPoint.y) / 2 });
                        }
                        break;
                }
                break;
        }
        return corners;
    }
    getBestConnectionAnchors(edge, sourceAnchors, targetAnchors, options) {
        // distance is enough
        let sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.RIGHT);
        let targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if ((targetPoint.x - sourcePoint.x) > options.standardDistance)
            return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.LEFT };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.LEFT);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if ((sourcePoint.x - targetPoint.x) > options.standardDistance)
            return { source: abstract_edge_router_1.Side.LEFT, target: abstract_edge_router_1.Side.RIGHT };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.TOP);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        if ((sourcePoint.y - targetPoint.y) > options.standardDistance)
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.BOTTOM };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
        if ((targetPoint.y - sourcePoint.y) > options.standardDistance)
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.TOP };
        // One additional point
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.RIGHT);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
        if (((targetPoint.x - sourcePoint.x) > 0.5 * options.standardDistance) && ((targetPoint.y - sourcePoint.y) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.TOP };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        if (((targetPoint.x - sourcePoint.x) > 0.5 * options.standardDistance) && ((sourcePoint.y - targetPoint.y) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.BOTTOM };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.LEFT);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        if (((sourcePoint.x - targetPoint.x) > 0.5 * options.standardDistance) && ((sourcePoint.y - targetPoint.y) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.LEFT, target: abstract_edge_router_1.Side.BOTTOM };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
        if (((sourcePoint.x - targetPoint.x) > 0.5 * options.standardDistance) && ((targetPoint.y - sourcePoint.y) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.LEFT, target: abstract_edge_router_1.Side.TOP };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.TOP);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (((sourcePoint.y - targetPoint.y) > 0.5 * options.standardDistance) && ((sourcePoint.x - targetPoint.x) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.RIGHT };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if (((sourcePoint.y - targetPoint.y) > 0.5 * options.standardDistance) && ((targetPoint.x - sourcePoint.x) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.LEFT };
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (((targetPoint.y - sourcePoint.y) > 0.5 * options.standardDistance) && ((sourcePoint.x - targetPoint.x) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.RIGHT };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if (((targetPoint.y - sourcePoint.y) > 0.5 * options.standardDistance) && ((targetPoint.x - sourcePoint.x) > options.standardDistance))
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.LEFT };
        // Two points
        // priority NN >> EE >> NE >> NW >> SE >> SW
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.TOP);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.TOP);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint)) {
            if ((sourcePoint.y - targetPoint.y) < 0) {
                if (Math.abs(sourcePoint.x - targetPoint.x) > ((sourceAnchors.bounds.width + options.standardDistance) / 2))
                    return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.TOP };
            }
            else {
                if (Math.abs(sourcePoint.x - targetPoint.x) > (targetAnchors.bounds.width / 2))
                    return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.TOP };
            }
        }
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.RIGHT);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint)) {
            if ((sourcePoint.x - targetPoint.x) > 0) {
                if (Math.abs(sourcePoint.y - targetPoint.y) > ((sourceAnchors.bounds.height + options.standardDistance) / 2))
                    return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.RIGHT };
            }
            else if (Math.abs(sourcePoint.y - targetPoint.y) > (targetAnchors.bounds.height / 2))
                return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.RIGHT };
        }
        // Secondly, judge NE NW is available
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.TOP);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint))
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.RIGHT };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint))
            return { source: abstract_edge_router_1.Side.TOP, target: abstract_edge_router_1.Side.LEFT };
        // Finally, judge SE SW is available
        sourcePoint = sourceAnchors.get(abstract_edge_router_1.Side.BOTTOM);
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.RIGHT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint))
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.RIGHT };
        targetPoint = targetAnchors.get(abstract_edge_router_1.Side.LEFT);
        if (!geometry_1.Bounds.includes(targetAnchors.bounds, sourcePoint) && !geometry_1.Bounds.includes(sourceAnchors.bounds, targetPoint))
            return { source: abstract_edge_router_1.Side.BOTTOM, target: abstract_edge_router_1.Side.LEFT };
        // Only to return to the
        return { source: abstract_edge_router_1.Side.RIGHT, target: abstract_edge_router_1.Side.BOTTOM };
    }
}
exports.ManhattanEdgeRouter = ManhattanEdgeRouter;
ManhattanEdgeRouter.KIND = 'manhattan';


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/model.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/model.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.edgeInProgressTargetHandleID = exports.edgeInProgressID = exports.SDanglingAnchor = exports.SRoutingHandle = exports.SConnectableElement = exports.getRouteBounds = exports.getAbsoluteRouteBounds = exports.isConnectable = exports.connectableFeature = exports.SRoutableElement = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const delete_1 = __webpack_require__(/*! ../edit/delete */ "./node_modules/sprotty/lib/features/edit/delete.js");
const model_2 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const model_3 = __webpack_require__(/*! ../hover/model */ "./node_modules/sprotty/lib/features/hover/model.js");
const model_4 = __webpack_require__(/*! ../move/model */ "./node_modules/sprotty/lib/features/move/model.js");
class SRoutableElement extends smodel_1.SChildElement {
    constructor() {
        super(...arguments);
        this.routingPoints = [];
    }
    get source() {
        return this.index.getById(this.sourceId);
    }
    get target() {
        return this.index.getById(this.targetId);
    }
    get bounds() {
        // this should also work for splines, which have the convex hull property
        return this.routingPoints.reduce((bounds, routingPoint) => geometry_1.Bounds.combine(bounds, {
            x: routingPoint.x,
            y: routingPoint.y,
            width: 0,
            height: 0
        }), geometry_1.Bounds.EMPTY);
    }
}
exports.SRoutableElement = SRoutableElement;
exports.connectableFeature = Symbol('connectableFeature');
function isConnectable(element) {
    return element.hasFeature(exports.connectableFeature) && element.canConnect;
}
exports.isConnectable = isConnectable;
function getAbsoluteRouteBounds(model, route = model.routingPoints) {
    let bounds = getRouteBounds(route);
    let current = model;
    while (current instanceof smodel_1.SChildElement) {
        const parent = current.parent;
        bounds = parent.localToParent(bounds);
        current = parent;
    }
    return bounds;
}
exports.getAbsoluteRouteBounds = getAbsoluteRouteBounds;
function getRouteBounds(route) {
    const bounds = { x: NaN, y: NaN, width: 0, height: 0 };
    for (const point of route) {
        if (isNaN(bounds.x)) {
            bounds.x = point.x;
            bounds.y = point.y;
        }
        else {
            if (point.x < bounds.x) {
                bounds.width += bounds.x - point.x;
                bounds.x = point.x;
            }
            else if (point.x > bounds.x + bounds.width) {
                bounds.width = point.x - bounds.x;
            }
            if (point.y < bounds.y) {
                bounds.height += bounds.y - point.y;
                bounds.y = point.y;
            }
            else if (point.y > bounds.y + bounds.height) {
                bounds.height = point.y - bounds.y;
            }
        }
    }
    return bounds;
}
exports.getRouteBounds = getRouteBounds;
/**
 * A connectable element is one that can have outgoing and incoming edges, i.e. it can be the source
 * or target element of an edge. There are two kinds of connectable elements: nodes (`SNode`) and
 * ports (`SPort`). A node represents a main entity, while a port is a connection point inside a node.
 */
class SConnectableElement extends model_1.SShapeElement {
    constructor() {
        super(...arguments);
        this.strokeWidth = 0;
    }
    get anchorKind() {
        return undefined;
    }
    /**
     * The incoming edges of this connectable element. They are resolved by the index, which must
     * be an `SGraphIndex` for efficient lookup.
     */
    get incomingEdges() {
        const allEdges = this.index.all().filter(e => e instanceof SRoutableElement);
        return allEdges.filter(e => e.targetId === this.id);
    }
    /**
     * The outgoing edges of this connectable element. They are resolved by the index, which must
     * be an `SGraphIndex` for efficient lookup.
     */
    get outgoingEdges() {
        const allEdges = this.index.all().filter(e => e instanceof SRoutableElement);
        return allEdges.filter(e => e.sourceId === this.id);
    }
    canConnect(routable, role) {
        return true;
    }
}
exports.SConnectableElement = SConnectableElement;
class SRoutingHandle extends smodel_1.SChildElement {
    constructor() {
        super(...arguments);
        /** Whether the routing point is being dragged. */
        this.editMode = false;
        this.hoverFeedback = false;
        this.selected = false;
    }
    /**
     * SRoutingHandles are created using the constructor, so we hard-wire the
     * default features
     */
    hasFeature(feature) {
        return SRoutingHandle.DEFAULT_FEATURES.indexOf(feature) !== -1;
    }
}
exports.SRoutingHandle = SRoutingHandle;
SRoutingHandle.DEFAULT_FEATURES = [model_2.selectFeature, model_4.moveFeature, model_3.hoverFeedbackFeature];
class SDanglingAnchor extends SConnectableElement {
    constructor() {
        super();
        this.type = 'dangling-anchor';
        this.size = { width: 0, height: 0 };
    }
}
exports.SDanglingAnchor = SDanglingAnchor;
SDanglingAnchor.DEFAULT_FEATURES = [delete_1.deletableFeature];
exports.edgeInProgressID = 'edge-in-progress';
exports.edgeInProgressTargetHandleID = exports.edgeInProgressID + '-target-anchor';


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/polyline-anchors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/polyline-anchors.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiamondAnchor = exports.RectangleAnchor = exports.EllipseAnchor = void 0;
const anchor_1 = __webpack_require__(/*! ./anchor */ "./node_modules/sprotty/lib/features/routing/anchor.js");
const geometry_1 = __webpack_require__(/*! ../../utils/geometry */ "./node_modules/sprotty/lib/utils/geometry.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const polyline_edge_router_1 = __webpack_require__(/*! ./polyline-edge-router */ "./node_modules/sprotty/lib/features/routing/polyline-edge-router.js");
const geometry_2 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
let EllipseAnchor = class EllipseAnchor {
    get kind() {
        return polyline_edge_router_1.PolylineEdgeRouter.KIND + ':' + anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
    getAnchor(connectable, refPoint, offset = 0) {
        const bounds = connectable.bounds;
        const c = geometry_2.Bounds.center(bounds);
        const dx = c.x - refPoint.x;
        const dy = c.y - refPoint.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        const normX = (dx / distance) || 0;
        const normY = (dy / distance) || 0;
        return {
            x: c.x - normX * (0.5 * bounds.width + offset),
            y: c.y - normY * (0.5 * bounds.height + offset)
        };
    }
};
EllipseAnchor = __decorate([
    (0, inversify_1.injectable)()
], EllipseAnchor);
exports.EllipseAnchor = EllipseAnchor;
let RectangleAnchor = class RectangleAnchor {
    get kind() {
        return polyline_edge_router_1.PolylineEdgeRouter.KIND + ':' + anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
    getAnchor(connectable, refPoint, offset = 0) {
        const bounds = connectable.bounds;
        const c = geometry_2.Bounds.center(bounds);
        const finder = new NearestPointFinder(c, refPoint);
        if (!(0, geometry_2.almostEquals)(c.y, refPoint.y)) {
            const xTop = this.getXIntersection(bounds.y, c, refPoint);
            if (xTop >= bounds.x && xTop <= bounds.x + bounds.width)
                finder.addCandidate(xTop, bounds.y - offset);
            const xBottom = this.getXIntersection(bounds.y + bounds.height, c, refPoint);
            if (xBottom >= bounds.x && xBottom <= bounds.x + bounds.width)
                finder.addCandidate(xBottom, bounds.y + bounds.height + offset);
        }
        if (!(0, geometry_2.almostEquals)(c.x, refPoint.x)) {
            const yLeft = this.getYIntersection(bounds.x, c, refPoint);
            if (yLeft >= bounds.y && yLeft <= bounds.y + bounds.height)
                finder.addCandidate(bounds.x - offset, yLeft);
            const yRight = this.getYIntersection(bounds.x + bounds.width, c, refPoint);
            if (yRight >= bounds.y && yRight <= bounds.y + bounds.height)
                finder.addCandidate(bounds.x + bounds.width + offset, yRight);
        }
        return finder.best;
    }
    getXIntersection(yIntersection, centerPoint, point) {
        const t = (yIntersection - centerPoint.y) / (point.y - centerPoint.y);
        return (point.x - centerPoint.x) * t + centerPoint.x;
    }
    getYIntersection(xIntersection, centerPoint, point) {
        const t = (xIntersection - centerPoint.x) / (point.x - centerPoint.x);
        return (point.y - centerPoint.y) * t + centerPoint.y;
    }
};
RectangleAnchor = __decorate([
    (0, inversify_1.injectable)()
], RectangleAnchor);
exports.RectangleAnchor = RectangleAnchor;
class NearestPointFinder {
    constructor(centerPoint, refPoint) {
        this.centerPoint = centerPoint;
        this.refPoint = refPoint;
        this.currentDist = -1;
    }
    addCandidate(x, y) {
        const dx = this.refPoint.x - x;
        const dy = this.refPoint.y - y;
        const dist = dx * dx + dy * dy;
        if (this.currentDist < 0 || dist < this.currentDist) {
            this.currentBest = {
                x: x,
                y: y
            };
            this.currentDist = dist;
        }
    }
    get best() {
        if (this.currentBest === undefined)
            return this.centerPoint;
        else
            return this.currentBest;
    }
}
let DiamondAnchor = class DiamondAnchor {
    get kind() {
        return polyline_edge_router_1.PolylineEdgeRouter.KIND + ':' + anchor_1.DIAMOND_ANCHOR_KIND;
    }
    getAnchor(connectable, refPoint, offset) {
        const bounds = connectable.bounds;
        const referenceLine = new geometry_1.PointToPointLine(geometry_2.Bounds.center(bounds), refPoint);
        const closestDiamondSide = new geometry_1.Diamond(bounds).closestSideLine(refPoint);
        const anchorPoint = (0, geometry_1.intersection)(closestDiamondSide, referenceLine);
        return geometry_2.Point.shiftTowards(anchorPoint, refPoint, offset);
    }
};
DiamondAnchor = __decorate([
    (0, inversify_1.injectable)()
], DiamondAnchor);
exports.DiamondAnchor = DiamondAnchor;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/polyline-edge-router.js":
/*!***************************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/polyline-edge-router.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var PolylineEdgeRouter_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PolylineEdgeRouter = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/routing/model.js");
const anchor_1 = __webpack_require__(/*! ./anchor */ "./node_modules/sprotty/lib/features/routing/anchor.js");
const abstract_edge_router_1 = __webpack_require__(/*! ./abstract-edge-router */ "./node_modules/sprotty/lib/features/routing/abstract-edge-router.js");
let PolylineEdgeRouter = PolylineEdgeRouter_1 = class PolylineEdgeRouter extends abstract_edge_router_1.AbstractEdgeRouter {
    get kind() {
        return PolylineEdgeRouter_1.KIND;
    }
    getOptions(edge) {
        return {
            minimalPointDistance: 2,
            removeAngleThreshold: 0.1,
            standardDistance: 20,
            selfEdgeOffset: 0.25
        };
    }
    route(edge) {
        const source = edge.source;
        const target = edge.target;
        if (source === undefined || target === undefined) {
            return [];
        }
        let sourceAnchor;
        let targetAnchor;
        const options = this.getOptions(edge);
        const routingPoints = edge.routingPoints.length > 0
            ? edge.routingPoints
            : [];
        this.cleanupRoutingPoints(edge, routingPoints, false, false);
        const rpCount = routingPoints !== undefined ? routingPoints.length : 0;
        if (rpCount === 0) {
            // Use the target center as start anchor reference
            const startRef = geometry_1.Bounds.center(target.bounds);
            sourceAnchor = this.getTranslatedAnchor(source, startRef, target.parent, edge, edge.sourceAnchorCorrection);
            // Use the source center as end anchor reference
            const endRef = geometry_1.Bounds.center(source.bounds);
            targetAnchor = this.getTranslatedAnchor(target, endRef, source.parent, edge, edge.targetAnchorCorrection);
        }
        else {
            // Use the first routing point as start anchor reference
            const p0 = routingPoints[0];
            sourceAnchor = this.getTranslatedAnchor(source, p0, edge.parent, edge, edge.sourceAnchorCorrection);
            // Use the last routing point as end anchor reference
            const pn = routingPoints[rpCount - 1];
            targetAnchor = this.getTranslatedAnchor(target, pn, edge.parent, edge, edge.targetAnchorCorrection);
        }
        const result = [];
        result.push({ kind: 'source', x: sourceAnchor.x, y: sourceAnchor.y });
        for (let i = 0; i < rpCount; i++) {
            const p = routingPoints[i];
            if (i > 0 && i < rpCount - 1
                || i === 0 && geometry_1.Point.maxDistance(sourceAnchor, p) >= options.minimalPointDistance + (edge.sourceAnchorCorrection || 0)
                || i === rpCount - 1 && geometry_1.Point.maxDistance(p, targetAnchor) >= options.minimalPointDistance + (edge.targetAnchorCorrection || 0)) {
                result.push({ kind: 'linear', x: p.x, y: p.y, pointIndex: i });
            }
        }
        result.push({ kind: 'target', x: targetAnchor.x, y: targetAnchor.y });
        return this.filterEditModeHandles(result, edge, options);
    }
    /**
     * Remove routed points that are in edit mode and for which the angle between the preceding and
     * following points falls below a threshold.
     */
    filterEditModeHandles(route, edge, options) {
        if (edge.children.length === 0)
            return route;
        let i = 0;
        while (i < route.length) {
            const curr = route[i];
            if (curr.pointIndex !== undefined) {
                const handle = edge.children.find(child => child instanceof model_1.SRoutingHandle && child.kind === 'junction' && child.pointIndex === curr.pointIndex);
                if (handle !== undefined && handle.editMode && i > 0 && i < route.length - 1) {
                    const prev = route[i - 1], next = route[i + 1];
                    const prevDiff = { x: prev.x - curr.x, y: prev.y - curr.y };
                    const nextDiff = { x: next.x - curr.x, y: next.y - curr.y };
                    const angle = (0, geometry_1.angleBetweenPoints)(prevDiff, nextDiff);
                    if (Math.abs(Math.PI - angle) < options.removeAngleThreshold) {
                        route.splice(i, 1);
                        continue;
                    }
                }
            }
            i++;
        }
        return route;
    }
    createRoutingHandles(edge) {
        const rpCount = edge.routingPoints.length;
        this.addHandle(edge, 'source', 'routing-point', -2);
        this.addHandle(edge, 'line', 'volatile-routing-point', -1);
        for (let i = 0; i < rpCount; i++) {
            this.addHandle(edge, 'junction', 'routing-point', i);
            this.addHandle(edge, 'line', 'volatile-routing-point', i);
        }
        this.addHandle(edge, 'target', 'routing-point', rpCount);
    }
    getInnerHandlePosition(edge, route, handle) {
        if (handle.kind === 'line') {
            const { start, end } = this.findRouteSegment(edge, route, handle.pointIndex);
            if (start !== undefined && end !== undefined)
                return (0, geometry_1.centerOfLine)(start, end);
        }
        return undefined;
    }
    applyInnerHandleMoves(edge, moves) {
        moves.forEach(move => {
            const handle = move.handle;
            const points = edge.routingPoints;
            let index = handle.pointIndex;
            if (handle.kind === 'line') {
                // Upgrade to a proper routing point
                handle.kind = 'junction';
                handle.type = 'routing-point';
                points.splice(index + 1, 0, move.fromPosition || points[Math.max(index, 0)]);
                edge.children.forEach(child => {
                    if (child instanceof model_1.SRoutingHandle && (child === handle || child.pointIndex > index))
                        child.pointIndex++;
                });
                this.addHandle(edge, 'line', 'volatile-routing-point', index);
                index++;
                this.addHandle(edge, 'line', 'volatile-routing-point', index);
            }
            if (index >= 0 && index < points.length) {
                points[index] = move.toPosition;
            }
        });
    }
};
PolylineEdgeRouter.KIND = 'polyline';
__decorate([
    (0, inversify_1.inject)(anchor_1.AnchorComputerRegistry),
    __metadata("design:type", anchor_1.AnchorComputerRegistry)
], PolylineEdgeRouter.prototype, "anchorRegistry", void 0);
PolylineEdgeRouter = PolylineEdgeRouter_1 = __decorate([
    (0, inversify_1.injectable)()
], PolylineEdgeRouter);
exports.PolylineEdgeRouter = PolylineEdgeRouter;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/routing.js":
/*!**************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/routing.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2018-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EdgeRouting = exports.EdgeRouterRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const view_1 = __webpack_require__(/*! ../../base/views/view */ "./node_modules/sprotty/lib/base/views/view.js");
const registry_1 = __webpack_require__(/*! ../../utils/registry */ "./node_modules/sprotty/lib/utils/registry.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/routing/model.js");
const polyline_edge_router_1 = __webpack_require__(/*! ./polyline-edge-router */ "./node_modules/sprotty/lib/features/routing/polyline-edge-router.js");
function isMultipleEdgesRouter(router) {
    return router.routeAll !== undefined;
}
let EdgeRouterRegistry = class EdgeRouterRegistry extends registry_1.InstanceRegistry {
    constructor(edgeRouters) {
        super();
        edgeRouters.forEach(router => this.register(router.kind, router));
    }
    get defaultKind() {
        return polyline_edge_router_1.PolylineEdgeRouter.KIND;
    }
    get(kind) {
        return super.get(kind || this.defaultKind);
    }
    /**
     * Computes the routes of all edges contained by the specified `parent`.
     * After all routes are available, it'll apply the registered `EdgeRoutePostProcessors`.
     * @param parent the parent to traverse for edges
     * @returns the routes of all edges that are children of `parent`
     */
    routeAllChildren(parent) {
        const routing = this.doRouteAllChildren(parent);
        for (const postProcessor of this.postProcessors) {
            postProcessor.apply(routing);
        }
        return routing;
    }
    /**
     * Recursively traverses the children of `parent`, collects children grouped by router kind,
     * and then routes them either.
     * @param parent the parent to traverse for edges
     * @returns the routes of all edges that are children of `parent`
     */
    doRouteAllChildren(parent) {
        const routing = new EdgeRouting();
        const routersEdges = new Map();
        const elementsToProcess = [parent];
        while (elementsToProcess.length > 0) {
            const element = elementsToProcess.shift();
            for (const child of element.children) {
                if (child instanceof model_1.SRoutableElement) {
                    const routerKind = child.routerKind || this.defaultKind;
                    if (routersEdges.has(routerKind)) {
                        routersEdges.get(routerKind).push(child);
                    }
                    else {
                        routersEdges.set(routerKind, [child]);
                    }
                }
                if (child instanceof smodel_1.SParentElement) {
                    elementsToProcess.push(child);
                }
            }
        }
        routersEdges.forEach((edges, routerKind) => {
            const childRouter = this.get(routerKind);
            if (isMultipleEdgesRouter(childRouter)) {
                routing.setAll(childRouter.routeAll(edges, parent));
            }
            else {
                for (const edge of edges) {
                    routing.set(edge.id, this.route(edge));
                }
            }
        });
        return routing;
    }
    /**
     * Computes or obtains the route of a single edge.
     * @param edge the edge to be routed
     * @param args arguments that may contain an `EdgeRouting` already
     * @returns the route of the specified `edge`
     */
    route(edge, args) {
        const edgeRouting = (0, view_1.findArgValue)(args, 'edgeRouting');
        if (edgeRouting) {
            const route = edgeRouting.get(edge.id);
            if (route) {
                return route;
            }
        }
        const router = this.get(edge.routerKind);
        return router.route(edge);
    }
};
__decorate([
    (0, inversify_1.multiInject)(types_1.TYPES.IEdgeRoutePostprocessor),
    (0, inversify_1.optional)(),
    __metadata("design:type", Array)
], EdgeRouterRegistry.prototype, "postProcessors", void 0);
EdgeRouterRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IEdgeRouter)),
    __metadata("design:paramtypes", [Array])
], EdgeRouterRegistry);
exports.EdgeRouterRegistry = EdgeRouterRegistry;
/**
 * Map of edges and their computed routes.
 */
class EdgeRouting {
    constructor() {
        this.routesMap = new Map();
    }
    set(routableId, route) {
        this.routesMap.set(routableId, route);
    }
    setAll(otherRoutes) {
        otherRoutes.routes.forEach((route, routableId) => this.set(routableId, route));
    }
    get(routableId) {
        return this.routesMap.get(routableId);
    }
    get routes() {
        return this.routesMap;
    }
}
exports.EdgeRouting = EdgeRouting;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/routing/views.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/routing/views.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RoutableView = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/routing/model.js");
let RoutableView = class RoutableView {
    /**
     * Check whether the given model element is in the current viewport. Use this method
     * in your `render` implementation to skip rendering in case the element is not visible.
     * This can greatly enhance performance for large models.
     */
    isVisible(model, route, context) {
        if (context.targetKind === 'hidden') {
            // Don't hide any element for hidden rendering
            return true;
        }
        if (route.length === 0) {
            // We should hide only if we know the element's route
            return true;
        }
        const ab = (0, model_1.getAbsoluteRouteBounds)(model, route);
        const canvasBounds = model.root.canvasBounds;
        return ab.x <= canvasBounds.width
            && ab.x + ab.width >= 0
            && ab.y <= canvasBounds.height
            && ab.y + ab.height >= 0;
    }
};
RoutableView = __decorate([
    (0, inversify_1.injectable)()
], RoutableView);
exports.RoutableView = RoutableView;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/select/di.config.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/select/di.config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const select_1 = __webpack_require__(/*! ./select */ "./node_modules/sprotty/lib/features/select/select.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const selectModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, select_1.SelectCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, select_1.SelectAllCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, select_1.GetSelectionCommand);
    bind(select_1.SelectKeyboardListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(select_1.SelectKeyboardListener);
    bind(select_1.SelectMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(select_1.SelectMouseListener);
});
exports["default"] = selectModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/select/model.js":
/*!***********************************************************!*\
  !*** ./node_modules/sprotty/lib/features/select/model.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isSelected = exports.isSelectable = exports.selectFeature = void 0;
exports.selectFeature = Symbol('selectFeature');
function isSelectable(element) {
    return element.hasFeature(exports.selectFeature);
}
exports.isSelectable = isSelectable;
function isSelected(element) {
    return element !== undefined && isSelectable(element) && element.selected;
}
exports.isSelected = isSelected;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/select/select.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/select/select.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectKeyboardListener = exports.GetSelectionCommand = exports.SelectMouseListener = exports.SelectAllCommand = exports.SelectCommand = exports.SelectionResult = exports.GetSelectionAction = exports.SelectAllAction = exports.SelectAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const request_command_1 = __webpack_require__(/*! ../../base/commands/request-command */ "./node_modules/sprotty/lib/base/commands/request-command.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const vnode_utils_1 = __webpack_require__(/*! ../../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sprotty/lib/utils/browser.js");
const iterable_1 = __webpack_require__(/*! ../../utils/iterable */ "./node_modules/sprotty/lib/utils/iterable.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
const button_handler_1 = __webpack_require__(/*! ../button/button-handler */ "./node_modules/sprotty/lib/features/button/button-handler.js");
const model_1 = __webpack_require__(/*! ../button/model */ "./node_modules/sprotty/lib/features/button/model.js");
const edit_routing_1 = __webpack_require__(/*! ../edit/edit-routing */ "./node_modules/sprotty/lib/features/edit/edit-routing.js");
const model_2 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const model_3 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const model_4 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/select/model.js");
/**
 * Triggered when the user changes the selection, e.g. by clicking on a selectable element. The resulting
 * SelectCommand changes the `selected` state accordingly, so the elements can be rendered differently.
 * This action is also forwarded to the diagram server, if present, so it may react on the selection change.
 * Furthermore, the server can send such an action to the client in order to change the selection programmatically.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class SelectAction {
    constructor(selectedElementsIDs = [], deselectedElementsIDs = []) {
        this.selectedElementsIDs = selectedElementsIDs;
        this.deselectedElementsIDs = deselectedElementsIDs;
        this.kind = SelectAction.KIND;
    }
}
exports.SelectAction = SelectAction;
SelectAction.KIND = 'elementSelected';
/**
 * Programmatic action for selecting or deselecting all elements.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class SelectAllAction {
    /**
     * If `select` is true, all elements are selected, otherwise they are deselected.
     */
    constructor(select = true) {
        this.select = select;
        this.kind = SelectAllAction.KIND;
    }
}
exports.SelectAllAction = SelectAllAction;
SelectAllAction.KIND = 'allSelected';
var GetSelectionAction;
(function (GetSelectionAction) {
    GetSelectionAction.KIND = 'getSelection';
    function create() {
        return {
            kind: GetSelectionAction.KIND,
            requestId: (0, actions_1.generateRequestId)()
        };
    }
    GetSelectionAction.create = create;
})(GetSelectionAction = exports.GetSelectionAction || (exports.GetSelectionAction = {}));
var SelectionResult;
(function (SelectionResult) {
    SelectionResult.KIND = 'selectionResult';
    function create(selectedElementsIDs, requestId) {
        return {
            kind: SelectionResult.KIND,
            selectedElementsIDs,
            responseId: requestId
        };
    }
    SelectionResult.create = create;
})(SelectionResult = exports.SelectionResult || (exports.SelectionResult = {}));
let SelectCommand = class SelectCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.selected = [];
        this.deselected = [];
    }
    execute(context) {
        const model = context.root;
        this.action.selectedElementsIDs.forEach(id => {
            const element = model.index.getById(id);
            if (element instanceof smodel_1.SChildElement && (0, model_4.isSelectable)(element)) {
                this.selected.push(element);
            }
        });
        this.action.deselectedElementsIDs.forEach(id => {
            const element = model.index.getById(id);
            if (element instanceof smodel_1.SChildElement && (0, model_4.isSelectable)(element)) {
                this.deselected.push(element);
            }
        });
        return this.redo(context);
    }
    undo(context) {
        for (const element of this.selected) {
            element.selected = false;
        }
        for (const element of this.deselected) {
            element.selected = true;
        }
        return context.root;
    }
    redo(context) {
        for (const element of this.deselected) {
            element.selected = false;
        }
        for (const element of this.selected) {
            element.selected = true;
        }
        return context.root;
    }
};
SelectCommand.KIND = actions_1.SelectAction.KIND;
SelectCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SelectCommand);
exports.SelectCommand = SelectCommand;
let SelectAllCommand = class SelectAllCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.previousSelection = {};
    }
    execute(context) {
        this.selectAll(context.root, this.action.select);
        return context.root;
    }
    selectAll(element, newState) {
        if ((0, model_4.isSelectable)(element)) {
            this.previousSelection[element.id] = element.selected;
            element.selected = newState;
        }
        for (const child of element.children) {
            this.selectAll(child, newState);
        }
    }
    undo(context) {
        const index = context.root.index;
        Object.keys(this.previousSelection).forEach(id => {
            const element = index.getById(id);
            if (element !== undefined && (0, model_4.isSelectable)(element))
                element.selected = this.previousSelection[id];
        });
        return context.root;
    }
    redo(context) {
        this.selectAll(context.root, this.action.select);
        return context.root;
    }
};
SelectAllCommand.KIND = actions_1.SelectAllAction.KIND;
SelectAllCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SelectAllCommand);
exports.SelectAllCommand = SelectAllCommand;
class SelectMouseListener extends mouse_tool_1.MouseListener {
    constructor() {
        super(...arguments);
        this.wasSelected = false;
        this.hasDragged = false;
    }
    mouseDown(target, event) {
        if (event.button !== 0) {
            return [];
        }
        const buttonHandled = this.handleButton(target, event);
        if (buttonHandled) {
            return buttonHandled;
        }
        const selectableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_4.isSelectable);
        if (selectableTarget !== undefined || target instanceof smodel_1.SModelRoot) {
            this.hasDragged = false;
            let deselectedElements = [];
            // multi-selection?
            if (!(0, browser_1.isCtrlOrCmd)(event)) {
                deselectedElements = (0, iterable_1.toArray)(target.root.index.all()
                    .filter(element => (0, model_4.isSelectable)(element) && element.selected
                    && !(selectableTarget instanceof model_2.SRoutingHandle && element === selectableTarget.parent)));
            }
            if (selectableTarget !== undefined) {
                if (!selectableTarget.selected) {
                    this.wasSelected = false;
                    return this.handleSelectTarget(selectableTarget, deselectedElements, event);
                }
                else if ((0, browser_1.isCtrlOrCmd)(event)) {
                    this.wasSelected = false;
                    return this.handleDeselectTarget(selectableTarget, event);
                }
                else {
                    this.wasSelected = true;
                }
            }
            else {
                return this.handleDeselectAll(deselectedElements, event);
            }
        }
        return [];
    }
    handleButton(target, event) {
        if (this.buttonHandlerRegistry !== undefined && target instanceof model_1.SButton && target.enabled) {
            const buttonHandler = this.buttonHandlerRegistry.get(target.type);
            if (buttonHandler !== undefined) {
                return buttonHandler.buttonPressed(target);
            }
        }
        return undefined;
    }
    handleSelectTarget(selectableTarget, deselectedElements, event) {
        const result = [];
        result.push(new SelectAction([selectableTarget.id], deselectedElements.map(e => e.id)));
        result.push(actions_1.BringToFrontAction.create([selectableTarget.id]));
        const routableDeselect = deselectedElements.filter(e => e instanceof model_3.SRoutableElement).map(e => e.id);
        if (selectableTarget instanceof model_3.SRoutableElement) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToActivate: [selectableTarget.id], elementsToDeactivate: routableDeselect }));
        }
        else if (routableDeselect.length > 0) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToDeactivate: routableDeselect }));
        }
        return result;
    }
    handleDeselectTarget(selectableTarget, event) {
        const result = [];
        result.push(new SelectAction([], [selectableTarget.id]));
        if (selectableTarget instanceof model_3.SRoutableElement) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToDeactivate: [selectableTarget.id] }));
        }
        return result;
    }
    handleDeselectAll(deselectedElements, event) {
        const result = [];
        result.push(new SelectAction([], deselectedElements.map(e => e.id)));
        const routableDeselect = deselectedElements.filter(e => e instanceof model_3.SRoutableElement).map(e => e.id);
        if (routableDeselect.length > 0) {
            result.push(edit_routing_1.SwitchEditModeAction.create({ elementsToDeactivate: routableDeselect }));
        }
        return result;
    }
    mouseMove(target, event) {
        this.hasDragged = true;
        return [];
    }
    mouseUp(target, event) {
        if (event.button === 0) {
            if (!this.hasDragged) {
                const selectableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_4.isSelectable);
                if (selectableTarget !== undefined && this.wasSelected) {
                    return [new SelectAction([selectableTarget.id], [])];
                }
            }
        }
        this.hasDragged = false;
        return [];
    }
    decorate(vnode, element) {
        const selectableTarget = (0, smodel_utils_1.findParentByFeature)(element, model_4.isSelectable);
        if (selectableTarget !== undefined) {
            (0, vnode_utils_1.setClass)(vnode, 'selected', selectableTarget.selected);
        }
        return vnode;
    }
}
__decorate([
    (0, inversify_1.inject)(button_handler_1.ButtonHandlerRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", button_handler_1.ButtonHandlerRegistry)
], SelectMouseListener.prototype, "buttonHandlerRegistry", void 0);
exports.SelectMouseListener = SelectMouseListener;
let GetSelectionCommand = class GetSelectionCommand extends request_command_1.ModelRequestCommand {
    constructor(action) {
        super();
        this.action = action;
        this.previousSelection = {};
    }
    retrieveResult(context) {
        const selection = context.root.index.all()
            .filter(e => (0, model_4.isSelectable)(e) && e.selected)
            .map(e => e.id);
        return SelectionResult.create((0, iterable_1.toArray)(selection), this.action.requestId);
    }
};
GetSelectionCommand.KIND = GetSelectionAction.KIND;
GetSelectionCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], GetSelectionCommand);
exports.GetSelectionCommand = GetSelectionCommand;
class SelectKeyboardListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyA', 'ctrlCmd')) {
            return [new SelectAllAction()];
        }
        return [];
    }
}
exports.SelectKeyboardListener = SelectKeyboardListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/undo-redo/di.config.js":
/*!******************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/undo-redo/di.config.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const undo_redo_1 = __webpack_require__(/*! ./undo-redo */ "./node_modules/sprotty/lib/features/undo-redo/undo-redo.js");
const undoRedoModule = new inversify_1.ContainerModule(bind => {
    bind(undo_redo_1.UndoRedoKeyListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(undo_redo_1.UndoRedoKeyListener);
});
exports["default"] = undoRedoModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/undo-redo/undo-redo.js":
/*!******************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/undo-redo/undo-redo.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UndoRedoKeyListener = exports.RedoAction = exports.UndoAction = void 0;
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sprotty/lib/utils/browser.js");
var UndoAction;
(function (UndoAction) {
    UndoAction.KIND = 'undo';
    function create() {
        return {
            kind: UndoAction.KIND
        };
    }
    UndoAction.create = create;
})(UndoAction = exports.UndoAction || (exports.UndoAction = {}));
var RedoAction;
(function (RedoAction) {
    RedoAction.KIND = 'redo';
    function create() {
        return {
            kind: RedoAction.KIND
        };
    }
    RedoAction.create = create;
})(RedoAction = exports.RedoAction || (exports.RedoAction = {}));
class UndoRedoKeyListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyZ', 'ctrlCmd'))
            return [UndoAction.create()];
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyZ', 'ctrlCmd', 'shift') || (!(0, browser_1.isMac)() && (0, keyboard_1.matchesKeystroke)(event, 'KeyY', 'ctrlCmd')))
            return [RedoAction.create()];
        return [];
    }
}
exports.UndoRedoKeyListener = UndoRedoKeyListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/update/di.config.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/update/di.config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const update_model_1 = __webpack_require__(/*! ./update-model */ "./node_modules/sprotty/lib/features/update/update-model.js");
const updateModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, update_model_1.UpdateModelCommand);
});
exports["default"] = updateModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/update/model-matching.js":
/*!********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/update/model-matching.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.applyMatches = exports.ModelMatcher = exports.forEachMatch = void 0;
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "./node_modules/sprotty-protocol/lib/index.js");
function forEachMatch(matchResult, callback) {
    Object.keys(matchResult).forEach(id => callback(id, matchResult[id]));
}
exports.forEachMatch = forEachMatch;
class ModelMatcher {
    match(left, right) {
        const result = {};
        this.matchLeft(left, result);
        this.matchRight(right, result);
        return result;
    }
    matchLeft(element, result, parentId) {
        let match = result[element.id];
        if (match !== undefined) {
            match.left = element;
            match.leftParentId = parentId;
        }
        else {
            match = {
                left: element,
                leftParentId: parentId
            };
            result[element.id] = match;
        }
        if ((0, smodel_1.isParent)(element)) {
            for (const child of element.children) {
                this.matchLeft(child, result, element.id);
            }
        }
    }
    matchRight(element, result, parentId) {
        let match = result[element.id];
        if (match !== undefined) {
            match.right = element;
            match.rightParentId = parentId;
        }
        else {
            match = {
                right: element,
                rightParentId: parentId
            };
            result[element.id] = match;
        }
        if ((0, smodel_1.isParent)(element)) {
            for (const child of element.children) {
                this.matchRight(child, result, element.id);
            }
        }
    }
}
exports.ModelMatcher = ModelMatcher;
function applyMatches(root, matches, index) {
    if (root instanceof smodel_1.SModelRoot) {
        index = root.index;
    }
    else if (index === undefined) {
        index = new sprotty_protocol_1.SModelIndex();
        index.add(root);
    }
    for (const match of matches) {
        let newElementInserted = false;
        if (match.left !== undefined && match.leftParentId !== undefined) {
            const parent = index.getById(match.leftParentId);
            if (parent !== undefined && parent.children !== undefined) {
                const i = parent.children.indexOf(match.left);
                if (i >= 0) {
                    if (match.right !== undefined && match.leftParentId === match.rightParentId) {
                        parent.children.splice(i, 1, match.right);
                        newElementInserted = true;
                    }
                    else {
                        parent.children.splice(i, 1);
                    }
                }
                index.remove(match.left);
            }
        }
        if (!newElementInserted && match.right !== undefined && match.rightParentId !== undefined) {
            const parent = index.getById(match.rightParentId);
            if (parent !== undefined) {
                if (parent.children === undefined)
                    parent.children = [];
                parent.children.push(match.right);
            }
        }
    }
}
exports.applyMatches = applyMatches;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/update/update-model.js":
/*!******************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/update/update-model.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UpdateModelCommand = exports.UpdateModelAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "./node_modules/sprotty/lib/base/animations/animation.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const fade_1 = __webpack_require__(/*! ../fade/fade */ "./node_modules/sprotty/lib/features/fade/fade.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const move_1 = __webpack_require__(/*! ../move/move */ "./node_modules/sprotty/lib/features/move/move.js");
const model_1 = __webpack_require__(/*! ../fade/model */ "./node_modules/sprotty/lib/features/fade/model.js");
const model_2 = __webpack_require__(/*! ../move/model */ "./node_modules/sprotty/lib/features/move/model.js");
const model_3 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const viewport_root_1 = __webpack_require__(/*! ../viewport/viewport-root */ "./node_modules/sprotty/lib/features/viewport/viewport-root.js");
const model_4 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const model_matching_1 = __webpack_require__(/*! ./model-matching */ "./node_modules/sprotty/lib/features/update/model-matching.js");
const resize_1 = __webpack_require__(/*! ../bounds/resize */ "./node_modules/sprotty/lib/features/bounds/resize.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const model_5 = __webpack_require__(/*! ../viewport/model */ "./node_modules/sprotty/lib/features/viewport/model.js");
const routing_1 = __webpack_require__(/*! ../routing/routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
const model_6 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
/**
 * Sent from the model source to the client in order to update the model. If no model is present yet,
 * this behaves the same as a SetModelAction. The transition from the old model to the new one can be animated.
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class UpdateModelAction {
    constructor(input, animate = true, cause) {
        this.animate = animate;
        this.cause = cause;
        this.kind = UpdateModelAction.KIND;
        if (input.id !== undefined)
            this.newRoot = input;
        else
            this.matches = input;
    }
}
exports.UpdateModelAction = UpdateModelAction;
UpdateModelAction.KIND = 'updateModel';
let UpdateModelCommand = class UpdateModelCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        let newRoot;
        if (this.action.newRoot !== undefined) {
            newRoot = context.modelFactory.createRoot(this.action.newRoot);
        }
        else {
            newRoot = context.modelFactory.createRoot(context.root);
            if (this.action.matches !== undefined)
                this.applyMatches(newRoot, this.action.matches, context);
        }
        this.oldRoot = context.root;
        this.newRoot = newRoot;
        return this.performUpdate(this.oldRoot, this.newRoot, context);
    }
    performUpdate(oldRoot, newRoot, context) {
        if ((this.action.animate === undefined || this.action.animate) && oldRoot.id === newRoot.id) {
            let matchResult;
            if (this.action.matches === undefined) {
                const matcher = new model_matching_1.ModelMatcher();
                matchResult = matcher.match(oldRoot, newRoot);
            }
            else {
                matchResult = this.convertToMatchResult(this.action.matches, oldRoot, newRoot);
            }
            const animationOrRoot = this.computeAnimation(newRoot, matchResult, context);
            if (animationOrRoot instanceof animation_1.Animation)
                return animationOrRoot.start();
            else
                return animationOrRoot;
        }
        else {
            if (oldRoot.type === newRoot.type && geometry_1.Dimension.isValid(oldRoot.canvasBounds))
                newRoot.canvasBounds = oldRoot.canvasBounds;
            if ((0, model_5.isViewport)(oldRoot) && (0, model_5.isViewport)(newRoot)) {
                newRoot.zoom = oldRoot.zoom;
                newRoot.scroll = oldRoot.scroll;
            }
            return newRoot;
        }
    }
    applyMatches(root, matches, context) {
        const index = root.index;
        for (const match of matches) {
            if (match.left !== undefined) {
                const element = index.getById(match.left.id);
                if (element instanceof smodel_1.SChildElement)
                    element.parent.remove(element);
            }
        }
        for (const match of matches) {
            if (match.right !== undefined) {
                const element = context.modelFactory.createElement(match.right);
                let parent;
                if (match.rightParentId !== undefined)
                    parent = index.getById(match.rightParentId);
                if (parent instanceof smodel_1.SParentElement)
                    parent.add(element);
                else
                    root.add(element);
            }
        }
    }
    convertToMatchResult(matches, leftRoot, rightRoot) {
        const result = {};
        for (const match of matches) {
            const converted = {};
            let id = undefined;
            if (match.left !== undefined) {
                id = match.left.id;
                converted.left = leftRoot.index.getById(id);
                converted.leftParentId = match.leftParentId;
            }
            if (match.right !== undefined) {
                id = match.right.id;
                converted.right = rightRoot.index.getById(id);
                converted.rightParentId = match.rightParentId;
            }
            if (id !== undefined)
                result[id] = converted;
        }
        return result;
    }
    computeAnimation(newRoot, matchResult, context) {
        const animationData = {
            fades: []
        };
        (0, model_matching_1.forEachMatch)(matchResult, (id, match) => {
            if (match.left !== undefined && match.right !== undefined) {
                // The element is still there, but may have been moved
                this.updateElement(match.left, match.right, animationData);
            }
            else if (match.right !== undefined) {
                // An element has been added
                const right = match.right;
                if ((0, model_1.isFadeable)(right)) {
                    right.opacity = 0;
                    animationData.fades.push({
                        element: right,
                        type: 'in'
                    });
                }
            }
            else if (match.left instanceof smodel_1.SChildElement) {
                // An element has been removed
                const left = match.left;
                if ((0, model_1.isFadeable)(left) && match.leftParentId !== undefined) {
                    if (!(0, smodel_utils_1.containsSome)(newRoot, left)) {
                        const parent = newRoot.index.getById(match.leftParentId);
                        if (parent instanceof smodel_1.SParentElement) {
                            const leftCopy = context.modelFactory.createElement(left);
                            parent.add(leftCopy);
                            animationData.fades.push({
                                element: leftCopy,
                                type: 'out'
                            });
                        }
                    }
                }
            }
        });
        const animations = this.createAnimations(animationData, newRoot, context);
        if (animations.length >= 2) {
            return new animation_1.CompoundAnimation(newRoot, context, animations);
        }
        else if (animations.length === 1) {
            return animations[0];
        }
        else {
            return newRoot;
        }
    }
    updateElement(left, right, animationData) {
        if ((0, model_2.isLocateable)(left) && (0, model_2.isLocateable)(right)) {
            const leftPos = left.position;
            const rightPos = right.position;
            if (!(0, geometry_1.almostEquals)(leftPos.x, rightPos.x) || !(0, geometry_1.almostEquals)(leftPos.y, rightPos.y)) {
                if (animationData.moves === undefined)
                    animationData.moves = [];
                animationData.moves.push({
                    element: right,
                    fromPosition: leftPos,
                    toPosition: rightPos
                });
                right.position = leftPos;
            }
        }
        if ((0, model_3.isSizeable)(left) && (0, model_3.isSizeable)(right)) {
            if (!geometry_1.Dimension.isValid(right.bounds)) {
                right.bounds = {
                    x: right.bounds.x,
                    y: right.bounds.y,
                    width: left.bounds.width,
                    height: left.bounds.height
                };
            }
            else if (!(0, geometry_1.almostEquals)(left.bounds.width, right.bounds.width)
                || !(0, geometry_1.almostEquals)(left.bounds.height, right.bounds.height)) {
                if (animationData.resizes === undefined)
                    animationData.resizes = [];
                animationData.resizes.push({
                    element: right,
                    fromDimension: {
                        width: left.bounds.width,
                        height: left.bounds.height,
                    },
                    toDimension: {
                        width: right.bounds.width,
                        height: right.bounds.height,
                    }
                });
            }
        }
        if (left instanceof model_6.SRoutableElement && right instanceof model_6.SRoutableElement && this.edgeRouterRegistry) {
            if (animationData.edgeMementi === undefined)
                animationData.edgeMementi = [];
            animationData.edgeMementi.push({
                edge: right,
                before: this.takeSnapshot(left),
                after: this.takeSnapshot(right),
            });
        }
        if ((0, model_4.isSelectable)(left) && (0, model_4.isSelectable)(right)) {
            right.selected = left.selected;
        }
        if (left instanceof smodel_1.SModelRoot && right instanceof smodel_1.SModelRoot) {
            right.canvasBounds = left.canvasBounds;
        }
        if (left instanceof viewport_root_1.ViewportRootElement && right instanceof viewport_root_1.ViewportRootElement) {
            right.scroll = left.scroll;
            right.zoom = left.zoom;
        }
    }
    takeSnapshot(edge) {
        const router = this.edgeRouterRegistry.get(edge.routerKind);
        return router.takeSnapshot(edge);
    }
    createAnimations(data, root, context) {
        const animations = [];
        if (data.fades.length > 0) {
            animations.push(new fade_1.FadeAnimation(root, data.fades, context, true));
        }
        if (data.moves !== undefined && data.moves.length > 0) {
            const movesMap = new Map;
            for (const move of data.moves) {
                movesMap.set(move.element.id, move);
            }
            animations.push(new move_1.MoveAnimation(root, movesMap, context, false));
        }
        if (data.resizes !== undefined && data.resizes.length > 0) {
            const resizesMap = new Map;
            for (const resize of data.resizes) {
                resizesMap.set(resize.element.id, resize);
            }
            animations.push(new resize_1.ResizeAnimation(root, resizesMap, context, false));
        }
        if (data.edgeMementi !== undefined && data.edgeMementi.length > 0) {
            animations.push(new move_1.MorphEdgesAnimation(root, data.edgeMementi, context, false));
        }
        return animations;
    }
    undo(context) {
        return this.performUpdate(this.newRoot, this.oldRoot, context);
    }
    redo(context) {
        return this.performUpdate(this.oldRoot, this.newRoot, context);
    }
};
UpdateModelCommand.KIND = actions_1.UpdateModelAction.KIND;
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    (0, inversify_1.optional)(),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], UpdateModelCommand.prototype, "edgeRouterRegistry", void 0);
UpdateModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], UpdateModelCommand);
exports.UpdateModelCommand = UpdateModelCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/viewport/center-fit.js":
/*!******************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/viewport/center-fit.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CenterKeyboardListener = exports.FitToScreenCommand = exports.CenterCommand = exports.BoundsAwareViewportCommand = exports.FitToScreenAction = exports.CenterAction = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const keyboard_1 = __webpack_require__(/*! ../../utils/keyboard */ "./node_modules/sprotty/lib/utils/keyboard.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const key_tool_1 = __webpack_require__(/*! ../../base/views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js");
const model_1 = __webpack_require__(/*! ../bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const viewport_1 = __webpack_require__(/*! ./viewport */ "./node_modules/sprotty/lib/features/viewport/viewport.js");
const model_3 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/viewport/model.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
/**
 * Triggered when the user requests the viewer to center on the current model. The resulting
 * CenterCommand changes the scroll setting of the viewport accordingly.
 * It also resets the zoom to its default if retainZoom is false.
 * This action can also be sent from the model source to the client in order to perform such a
 * viewport change programmatically.
 *
 * @deprecated Use the declaration in `sprotty-protocol` instead.
 */
class CenterAction {
    constructor(elementIds, animate = true, retainZoom = false) {
        this.elementIds = elementIds;
        this.animate = animate;
        this.retainZoom = retainZoom;
        this.kind = CenterAction.KIND;
    }
}
exports.CenterAction = CenterAction;
CenterAction.KIND = 'center';
/**
 * Triggered when the user requests the viewer to fit its content to the available drawing area.
 * The resulting FitToScreenCommand changes the zoom and scroll settings of the viewport so the model
 * can be shown completely. This action can also be sent from the model source to the client in order
 * to perform such a viewport change programmatically.
 *
 * @deprecated Use the declaration in `sprotty-protocol` instead.
 */
class FitToScreenAction {
    constructor(elementIds, padding, maxZoom, animate = true) {
        this.elementIds = elementIds;
        this.padding = padding;
        this.maxZoom = maxZoom;
        this.animate = animate;
        this.kind = FitToScreenAction.KIND;
    }
}
exports.FitToScreenAction = FitToScreenAction;
FitToScreenAction.KIND = 'fit';
let BoundsAwareViewportCommand = class BoundsAwareViewportCommand extends command_1.Command {
    constructor(animate) {
        super();
        this.animate = animate;
    }
    initialize(model) {
        if ((0, model_3.isViewport)(model)) {
            this.oldViewport = {
                scroll: model.scroll,
                zoom: model.zoom
            };
            const allBounds = [];
            this.getElementIds().forEach(id => {
                const element = model.index.getById(id);
                if (element && (0, model_1.isBoundsAware)(element))
                    allBounds.push(this.boundsInViewport(element, element.bounds, model));
            });
            if (allBounds.length === 0) {
                model.index.all().forEach(element => {
                    if ((0, model_2.isSelectable)(element) && element.selected && (0, model_1.isBoundsAware)(element))
                        allBounds.push(this.boundsInViewport(element, element.bounds, model));
                });
            }
            if (allBounds.length === 0) {
                model.index.all().forEach(element => {
                    if ((0, model_1.isBoundsAware)(element))
                        allBounds.push(this.boundsInViewport(element, element.bounds, model));
                });
            }
            if (allBounds.length !== 0) {
                const bounds = allBounds.reduce((b0, b1) => geometry_1.Bounds.combine(b0, b1));
                if (geometry_1.Dimension.isValid(bounds))
                    this.newViewport = this.getNewViewport(bounds, model);
            }
        }
    }
    boundsInViewport(element, bounds, viewport) {
        if (element instanceof smodel_1.SChildElement && element.parent !== viewport)
            return this.boundsInViewport(element.parent, element.parent.localToParent(bounds), viewport);
        else
            return bounds;
    }
    execute(context) {
        this.initialize(context.root);
        return this.redo(context);
    }
    undo(context) {
        const model = context.root;
        if ((0, model_3.isViewport)(model) && this.newViewport !== undefined && !this.equal(this.newViewport, this.oldViewport)) {
            if (this.animate)
                return new viewport_1.ViewportAnimation(model, this.newViewport, this.oldViewport, context).start();
            else {
                model.scroll = this.oldViewport.scroll;
                model.zoom = this.oldViewport.zoom;
            }
        }
        return model;
    }
    redo(context) {
        const model = context.root;
        if ((0, model_3.isViewport)(model) && this.newViewport !== undefined && !this.equal(this.newViewport, this.oldViewport)) {
            if (this.animate) {
                return new viewport_1.ViewportAnimation(model, this.oldViewport, this.newViewport, context).start();
            }
            else {
                model.scroll = this.newViewport.scroll;
                model.zoom = this.newViewport.zoom;
            }
        }
        return model;
    }
    equal(vp1, vp2) {
        return vp1.zoom === vp2.zoom && vp1.scroll.x === vp2.scroll.x && vp1.scroll.y === vp2.scroll.y;
    }
};
BoundsAwareViewportCommand = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [Boolean])
], BoundsAwareViewportCommand);
exports.BoundsAwareViewportCommand = BoundsAwareViewportCommand;
let CenterCommand = class CenterCommand extends BoundsAwareViewportCommand {
    constructor(action) {
        super(action.animate);
        this.action = action;
    }
    getElementIds() {
        return this.action.elementIds;
    }
    getNewViewport(bounds, model) {
        if (!geometry_1.Dimension.isValid(model.canvasBounds)) {
            return undefined;
        }
        const zoom = (this.action.retainZoom && (0, model_3.isViewport)(model)) ? model.zoom : 1;
        const c = geometry_1.Bounds.center(bounds);
        return {
            scroll: {
                x: c.x - 0.5 * model.canvasBounds.width / zoom,
                y: c.y - 0.5 * model.canvasBounds.height / zoom
            },
            zoom: zoom
        };
    }
};
CenterCommand.KIND = actions_1.CenterAction.KIND;
CenterCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], CenterCommand);
exports.CenterCommand = CenterCommand;
let FitToScreenCommand = class FitToScreenCommand extends BoundsAwareViewportCommand {
    constructor(action) {
        super(action.animate);
        this.action = action;
    }
    getElementIds() {
        return this.action.elementIds;
    }
    getNewViewport(bounds, model) {
        if (!geometry_1.Dimension.isValid(model.canvasBounds)) {
            return undefined;
        }
        const c = geometry_1.Bounds.center(bounds);
        const delta = this.action.padding === undefined
            ? 0
            : 2 * this.action.padding;
        let zoom = Math.min(model.canvasBounds.width / (bounds.width + delta), model.canvasBounds.height / (bounds.height + delta));
        if (this.action.maxZoom !== undefined)
            zoom = Math.min(zoom, this.action.maxZoom);
        if (zoom === Infinity) {
            zoom = 1;
        }
        return {
            scroll: {
                x: c.x - 0.5 * model.canvasBounds.width / zoom,
                y: c.y - 0.5 * model.canvasBounds.height / zoom
            },
            zoom: zoom
        };
    }
};
FitToScreenCommand.KIND = actions_1.FitToScreenAction.KIND;
FitToScreenCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], FitToScreenCommand);
exports.FitToScreenCommand = FitToScreenCommand;
class CenterKeyboardListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyC', 'ctrlCmd', 'shift'))
            return [new CenterAction([])];
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyF', 'ctrlCmd', 'shift'))
            return [new FitToScreenAction([])];
        return [];
    }
}
exports.CenterKeyboardListener = CenterKeyboardListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/viewport/di.config.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/viewport/di.config.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const center_fit_1 = __webpack_require__(/*! ./center-fit */ "./node_modules/sprotty/lib/features/viewport/center-fit.js");
const viewport_1 = __webpack_require__(/*! ./viewport */ "./node_modules/sprotty/lib/features/viewport/viewport.js");
const scroll_1 = __webpack_require__(/*! ./scroll */ "./node_modules/sprotty/lib/features/viewport/scroll.js");
const zoom_1 = __webpack_require__(/*! ./zoom */ "./node_modules/sprotty/lib/features/viewport/zoom.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const viewportModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, center_fit_1.CenterCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, center_fit_1.FitToScreenCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, viewport_1.SetViewportCommand);
    (0, command_registration_1.configureCommand)({ bind, isBound }, viewport_1.GetViewportCommand);
    bind(center_fit_1.CenterKeyboardListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.KeyListener).toService(center_fit_1.CenterKeyboardListener);
    bind(scroll_1.ScrollMouseListener).toSelf().inSingletonScope();
    bind(zoom_1.ZoomMouseListener).toSelf().inSingletonScope();
    bind(types_1.TYPES.MouseListener).toService(scroll_1.ScrollMouseListener);
    bind(types_1.TYPES.MouseListener).toService(zoom_1.ZoomMouseListener);
});
exports["default"] = viewportModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/viewport/model.js":
/*!*************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/viewport/model.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isViewport = exports.viewportFeature = void 0;
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
exports.viewportFeature = Symbol('viewportFeature');
function isViewport(element) {
    return element instanceof smodel_1.SModelRoot
        && element.hasFeature(exports.viewportFeature)
        && 'zoom' in element
        && 'scroll' in element;
}
exports.isViewport = isViewport;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/viewport/scroll.js":
/*!**************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/viewport/scroll.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ScrollMouseListener = exports.isScrollable = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/viewport/model.js");
const model_2 = __webpack_require__(/*! ../move/model */ "./node_modules/sprotty/lib/features/move/model.js");
const model_3 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const model_4 = __webpack_require__(/*! ../projection/model */ "./node_modules/sprotty/lib/features/projection/model.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sprotty/lib/utils/browser.js");
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function isScrollable(element) {
    return 'scroll' in element;
}
exports.isScrollable = isScrollable;
class ScrollMouseListener extends mouse_tool_1.MouseListener {
    constructor() {
        super(...arguments);
        this.scrollbarMouseDownDelay = 200;
    }
    mouseDown(target, event) {
        const moveable = (0, smodel_utils_1.findParentByFeature)(target, model_2.isMoveable);
        if (moveable === undefined && !(target instanceof model_3.SRoutingHandle)) {
            const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
            if (viewport) {
                this.lastScrollPosition = { x: event.pageX, y: event.pageY };
                this.scrollbar = this.getScrollbar(event);
                if (this.scrollbar) {
                    window.clearTimeout(this.scrollbarMouseDownTimeout);
                    return this.moveScrollBar(viewport, event, this.scrollbar, true)
                        .map(action => new Promise(resolve => {
                        this.scrollbarMouseDownTimeout = window.setTimeout(() => resolve(action), this.scrollbarMouseDownDelay);
                    }));
                }
            }
            else {
                this.lastScrollPosition = undefined;
                this.scrollbar = undefined;
            }
        }
        return [];
    }
    mouseMove(target, event) {
        if (event.buttons === 0) {
            return this.mouseUp(target, event);
        }
        if (this.scrollbar) {
            window.clearTimeout(this.scrollbarMouseDownTimeout);
            const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
            if (viewport) {
                return this.moveScrollBar(viewport, event, this.scrollbar);
            }
        }
        if (this.lastScrollPosition) {
            const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
            if (viewport) {
                return this.dragCanvas(viewport, event, this.lastScrollPosition);
            }
        }
        return [];
    }
    mouseEnter(target, event) {
        if (target instanceof smodel_1.SModelRoot && event.buttons === 0) {
            this.mouseUp(target, event);
        }
        return [];
    }
    mouseUp(target, event) {
        this.lastScrollPosition = undefined;
        this.scrollbar = undefined;
        return [];
    }
    doubleClick(target, event) {
        const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
        if (viewport) {
            const scrollbar = this.getScrollbar(event);
            if (scrollbar) {
                window.clearTimeout(this.scrollbarMouseDownTimeout);
                const targetElement = this.findClickTarget(scrollbar, event);
                let elementId;
                if (targetElement && targetElement.id.startsWith('horizontal-projection:')) {
                    elementId = targetElement.id.substring('horizontal-projection:'.length);
                }
                else if (targetElement && targetElement.id.startsWith('vertical-projection:')) {
                    elementId = targetElement.id.substring('vertical-projection:'.length);
                }
                if (elementId) {
                    return [actions_1.CenterAction.create([elementId], { animate: true, retainZoom: true })];
                }
            }
        }
        return [];
    }
    dragCanvas(viewport, event, lastScrollPosition) {
        const dx = (event.pageX - lastScrollPosition.x) / viewport.zoom;
        const dy = (event.pageY - lastScrollPosition.y) / viewport.zoom;
        const newViewport = {
            scroll: {
                x: viewport.scroll.x - dx,
                y: viewport.scroll.y - dy,
            },
            zoom: viewport.zoom
        };
        this.lastScrollPosition = { x: event.pageX, y: event.pageY };
        return [actions_1.SetViewportAction.create(viewport.id, newViewport, { animate: false })];
    }
    moveScrollBar(model, event, scrollbar, animate = false) {
        const modelBounds = (0, model_4.getModelBounds)(model);
        if (!modelBounds || model.zoom <= 0) {
            return [];
        }
        const scrollbarRect = scrollbar.getBoundingClientRect();
        let newScroll;
        if (this.getScrollbarOrientation(scrollbar) === 'horizontal') {
            if (scrollbarRect.width <= 0) {
                return [];
            }
            const viewportSize = (model.canvasBounds.width / (model.zoom * modelBounds.width)) * scrollbarRect.width;
            let position = event.clientX - scrollbarRect.x - viewportSize / 2;
            if (position < 0) {
                position = 0;
            }
            else if (position > scrollbarRect.width - viewportSize) {
                position = scrollbarRect.width - viewportSize;
            }
            newScroll = {
                x: modelBounds.x + (position / scrollbarRect.width) * modelBounds.width,
                y: model.scroll.y
            };
        }
        else {
            if (scrollbarRect.height <= 0) {
                return [];
            }
            const viewportSize = (model.canvasBounds.height / (model.zoom * modelBounds.height)) * scrollbarRect.height;
            let position = event.clientY - scrollbarRect.y - viewportSize / 2;
            if (position < 0) {
                position = 0;
            }
            else if (position > scrollbarRect.height - viewportSize) {
                position = scrollbarRect.height - viewportSize;
            }
            newScroll = {
                x: model.scroll.x,
                y: modelBounds.y + (position / scrollbarRect.height) * modelBounds.height
            };
        }
        return [actions_1.SetViewportAction.create(model.id, { scroll: newScroll, zoom: model.zoom }, { animate })];
    }
    getScrollbar(event) {
        let element = event.target;
        while (element) {
            if (element.classList && element.classList.contains('sprotty-projection-bar')) {
                return element;
            }
            element = element.parentElement;
        }
        return undefined;
    }
    getScrollbarOrientation(scrollbar) {
        if (scrollbar.classList.contains('horizontal')) {
            return 'horizontal';
        }
        else {
            return 'vertical';
        }
    }
    findClickTarget(scrollbar, event) {
        const matching = Array.from(scrollbar.children).filter(child => child.id && child.classList.contains('sprotty-projection') && (0, browser_1.hitsMouseEvent)(child, event));
        if (matching.length > 0) {
            return matching[matching.length - 1];
        }
        return undefined;
    }
}
exports.ScrollMouseListener = ScrollMouseListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/viewport/viewport-root.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/viewport/viewport-root.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewportRootElement = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/viewport/model.js");
const model_2 = __webpack_require__(/*! ../export/model */ "./node_modules/sprotty/lib/features/export/model.js");
/**
 * Model root element that defines a viewport, so it transforms the coordinate system with
 * a `scroll` translation and a `zoom` scaling.
 */
class ViewportRootElement extends smodel_1.SModelRoot {
    constructor(index) {
        super(index);
        this.scroll = { x: 0, y: 0 };
        this.zoom = 1;
        this.position = geometry_1.Point.ORIGIN;
        this.size = geometry_1.Dimension.EMPTY;
    }
    get bounds() {
        return {
            x: this.position.x,
            y: this.position.y,
            width: this.size.width,
            height: this.size.height
        };
    }
    set bounds(newBounds) {
        this.position = {
            x: newBounds.x,
            y: newBounds.y
        };
        this.size = {
            width: newBounds.width,
            height: newBounds.height
        };
    }
    localToParent(point) {
        const result = {
            x: (point.x - this.scroll.x) * this.zoom,
            y: (point.y - this.scroll.y) * this.zoom,
            width: -1,
            height: -1
        };
        if ((0, geometry_1.isBounds)(point)) {
            result.width = point.width * this.zoom;
            result.height = point.height * this.zoom;
        }
        return result;
    }
    parentToLocal(point) {
        const result = {
            x: (point.x / this.zoom) + this.scroll.x,
            y: (point.y / this.zoom) + this.scroll.y,
            width: -1,
            height: -1
        };
        if ((0, geometry_1.isBounds)(point) && geometry_1.Dimension.isValid(point)) {
            result.width = point.width / this.zoom;
            result.height = point.height / this.zoom;
        }
        return result;
    }
}
exports.ViewportRootElement = ViewportRootElement;
ViewportRootElement.DEFAULT_FEATURES = [model_1.viewportFeature, model_2.exportFeature];


/***/ }),

/***/ "./node_modules/sprotty/lib/features/viewport/viewport.js":
/*!****************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/viewport/viewport.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var SetViewportCommand_1;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ViewportAnimation = exports.GetViewportCommand = exports.SetViewportCommand = exports.ViewportResult = exports.GetViewportAction = exports.SetViewportAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const animation_1 = __webpack_require__(/*! ../../base/animations/animation */ "./node_modules/sprotty/lib/base/animations/animation.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/viewport/model.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const request_command_1 = __webpack_require__(/*! ../../base/commands/request-command */ "./node_modules/sprotty/lib/base/commands/request-command.js");
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
class SetViewportAction {
    constructor(elementId, newViewport, animate) {
        this.elementId = elementId;
        this.newViewport = newViewport;
        this.animate = animate;
        this.kind = SetViewportAction.KIND;
    }
}
exports.SetViewportAction = SetViewportAction;
SetViewportAction.KIND = 'viewport';
var GetViewportAction;
(function (GetViewportAction) {
    GetViewportAction.KIND = 'getViewport';
    function create() {
        return {
            kind: GetViewportAction.KIND,
            requestId: (0, actions_1.generateRequestId)()
        };
    }
    GetViewportAction.create = create;
})(GetViewportAction = exports.GetViewportAction || (exports.GetViewportAction = {}));
var ViewportResult;
(function (ViewportResult) {
    ViewportResult.KIND = 'viewportResult';
    function create(viewport, canvasBounds, requestId) {
        return {
            kind: ViewportResult.KIND,
            viewport,
            canvasBounds,
            responseId: requestId
        };
    }
    ViewportResult.create = create;
})(ViewportResult = exports.ViewportResult || (exports.ViewportResult = {}));
let SetViewportCommand = SetViewportCommand_1 = class SetViewportCommand extends command_1.MergeableCommand {
    constructor(action) {
        super();
        this.action = action;
        this.newViewport = action.newViewport;
    }
    execute(context) {
        const model = context.root;
        const element = model.index.getById(this.action.elementId);
        if (element && (0, model_1.isViewport)(element)) {
            this.element = element;
            this.oldViewport = {
                scroll: this.element.scroll,
                zoom: this.element.zoom,
            };
            if (this.action.animate)
                return new ViewportAnimation(this.element, this.oldViewport, this.newViewport, context).start();
            else {
                this.element.scroll = this.newViewport.scroll;
                this.element.zoom = this.newViewport.zoom;
            }
        }
        return model;
    }
    undo(context) {
        return new ViewportAnimation(this.element, this.newViewport, this.oldViewport, context).start();
    }
    redo(context) {
        return new ViewportAnimation(this.element, this.oldViewport, this.newViewport, context).start();
    }
    merge(command, context) {
        if (!this.action.animate && command instanceof SetViewportCommand_1 && this.element === command.element) {
            this.newViewport = command.newViewport;
            return true;
        }
        return false;
    }
};
SetViewportCommand.KIND = actions_1.SetViewportAction.KIND;
SetViewportCommand = SetViewportCommand_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetViewportCommand);
exports.SetViewportCommand = SetViewportCommand;
let GetViewportCommand = class GetViewportCommand extends request_command_1.ModelRequestCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    retrieveResult(context) {
        const elem = context.root;
        let viewport;
        if ((0, model_1.isViewport)(elem)) {
            viewport = { scroll: elem.scroll, zoom: elem.zoom };
        }
        else {
            viewport = { scroll: geometry_1.Point.ORIGIN, zoom: 1 };
        }
        return ViewportResult.create(viewport, elem.canvasBounds, this.action.requestId);
    }
};
GetViewportCommand.KIND = GetViewportAction.KIND;
GetViewportCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], GetViewportCommand);
exports.GetViewportCommand = GetViewportCommand;
class ViewportAnimation extends animation_1.Animation {
    constructor(element, oldViewport, newViewport, context) {
        super(context);
        this.element = element;
        this.oldViewport = oldViewport;
        this.newViewport = newViewport;
        this.context = context;
        this.zoomFactor = Math.log(newViewport.zoom / oldViewport.zoom);
    }
    tween(t, context) {
        this.element.scroll = {
            x: (1 - t) * this.oldViewport.scroll.x + t * this.newViewport.scroll.x,
            y: (1 - t) * this.oldViewport.scroll.y + t * this.newViewport.scroll.y
        };
        this.element.zoom = this.oldViewport.zoom * Math.exp(t * this.zoomFactor);
        return context.root;
    }
}
exports.ViewportAnimation = ViewportAnimation;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/viewport/zoom.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/viewport/zoom.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ZoomMouseListener = exports.getZoom = exports.isZoomable = void 0;
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const browser_1 = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sprotty/lib/utils/browser.js");
const mouse_tool_1 = __webpack_require__(/*! ../../base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js");
const smodel_utils_1 = __webpack_require__(/*! ../../base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/features/viewport/model.js");
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function isZoomable(element) {
    return 'zoom' in element;
}
exports.isZoomable = isZoomable;
function getZoom(label) {
    let zoom = 1;
    const viewport = (0, smodel_utils_1.findParentByFeature)(label, model_1.isViewport);
    if (viewport) {
        zoom = viewport.zoom;
    }
    return zoom;
}
exports.getZoom = getZoom;
class ZoomMouseListener extends mouse_tool_1.MouseListener {
    wheel(target, event) {
        const viewport = (0, smodel_utils_1.findParentByFeature)(target, model_1.isViewport);
        if (viewport) {
            const newZoom = this.getZoomFactor(event);
            const viewportOffset = this.getViewportOffset(target.root, event);
            const offsetFactor = 1.0 / (newZoom * viewport.zoom) - 1.0 / viewport.zoom;
            const newViewport = {
                scroll: {
                    x: viewport.scroll.x - offsetFactor * viewportOffset.x,
                    y: viewport.scroll.y - offsetFactor * viewportOffset.y
                },
                zoom: viewport.zoom * newZoom
            };
            return [actions_1.SetViewportAction.create(viewport.id, newViewport, { animate: false })];
        }
        return [];
    }
    getViewportOffset(root, event) {
        const canvasBounds = root.canvasBounds;
        const windowScroll = (0, browser_1.getWindowScroll)();
        return {
            x: event.clientX + windowScroll.x - canvasBounds.x,
            y: event.clientY + windowScroll.y - canvasBounds.y
        };
    }
    getZoomFactor(event) {
        if (event.deltaMode === event.DOM_DELTA_PAGE)
            return Math.exp(-event.deltaY * 0.5);
        else if (event.deltaMode === event.DOM_DELTA_LINE)
            return Math.exp(-event.deltaY * 0.05);
        else // deltaMode === DOM_DELTA_PIXEL
            return Math.exp(-event.deltaY * 0.005);
    }
}
exports.ZoomMouseListener = ZoomMouseListener;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/zorder/di.config.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/zorder/di.config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const command_registration_1 = __webpack_require__(/*! ../../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const zorder_1 = __webpack_require__(/*! ./zorder */ "./node_modules/sprotty/lib/features/zorder/zorder.js");
const zorderModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    (0, command_registration_1.configureCommand)({ bind, isBound }, zorder_1.BringToFrontCommand);
});
exports["default"] = zorderModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/features/zorder/zorder.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/features/zorder/zorder.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BringToFrontCommand = exports.BringToFrontAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../../base/types */ "./node_modules/sprotty/lib/base/types.js");
const smodel_1 = __webpack_require__(/*! ../../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const command_1 = __webpack_require__(/*! ../../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const model_1 = __webpack_require__(/*! ../routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
var BringToFrontAction;
(function (BringToFrontAction) {
    BringToFrontAction.KIND = 'bringToFront';
    function create(elementIDs) {
        return {
            kind: BringToFrontAction.KIND,
            elementIDs
        };
    }
    BringToFrontAction.create = create;
})(BringToFrontAction = exports.BringToFrontAction || (exports.BringToFrontAction = {}));
let BringToFrontCommand = class BringToFrontCommand extends command_1.Command {
    constructor(action) {
        super();
        this.action = action;
        this.selected = [];
    }
    execute(context) {
        const model = context.root;
        this.action.elementIDs.forEach(id => {
            const element = model.index.getById(id);
            if (element instanceof model_1.SRoutableElement) {
                if (element.source)
                    this.addToSelection(element.source);
                if (element.target)
                    this.addToSelection(element.target);
            }
            if (element instanceof smodel_1.SChildElement) {
                this.addToSelection(element);
            }
            this.includeConnectedEdges(element);
        });
        return this.redo(context);
    }
    includeConnectedEdges(element) {
        if (element instanceof model_1.SConnectableElement) {
            element.incomingEdges.forEach(edge => this.addToSelection(edge));
            element.outgoingEdges.forEach(edge => this.addToSelection(edge));
        }
        if (element instanceof smodel_1.SParentElement) {
            for (const child of element.children) {
                this.includeConnectedEdges(child);
            }
        }
    }
    addToSelection(element) {
        this.selected.push({
            element: element,
            index: element.parent.children.indexOf(element)
        });
    }
    undo(context) {
        for (let i = this.selected.length - 1; i >= 0; i--) {
            const selection = this.selected[i];
            const element = selection.element;
            element.parent.move(element, selection.index);
        }
        return context.root;
    }
    redo(context) {
        for (let i = 0; i < this.selected.length; i++) {
            this.bringToFront(this.selected[i]);
        }
        return context.root;
    }
    bringToFront(selection) {
        const element = selection.element;
        const childrenLength = element.parent.children.length;
        element.parent.move(element, childrenLength - 1);
    }
};
BringToFrontCommand.KIND = BringToFrontAction.KIND;
BringToFrontCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], BringToFrontCommand);
exports.BringToFrontCommand = BringToFrontCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/graph/di.config.js":
/*!*****************************************************!*\
  !*** ./node_modules/sprotty/lib/graph/di.config.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../base/types */ "./node_modules/sprotty/lib/base/types.js");
const sgraph_factory_1 = __webpack_require__(/*! ./sgraph-factory */ "./node_modules/sprotty/lib/graph/sgraph-factory.js");
const graphModule = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
    rebind(types_1.TYPES.IModelFactory).to(sgraph_factory_1.SGraphFactory).inSingletonScope();
});
exports["default"] = graphModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/graph/sgraph-factory.js":
/*!**********************************************************!*\
  !*** ./node_modules/sprotty/lib/graph/sgraph-factory.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SGraphFactory = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "./node_modules/sprotty-protocol/lib/utils/model-utils.js");
const smodel_factory_1 = __webpack_require__(/*! ../base/model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js");
const smodel_1 = __webpack_require__(/*! ../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const sgraph_1 = __webpack_require__(/*! ./sgraph */ "./node_modules/sprotty/lib/graph/sgraph.js");
const model_1 = __webpack_require__(/*! ../features/button/model */ "./node_modules/sprotty/lib/features/button/model.js");
/**
 * @deprecated
 * Subclassing SModelFactory is discouraged. Use `registerModelElement`
 * or `configureModelElement` instead.
 */
let SGraphFactory = class SGraphFactory extends smodel_factory_1.SModelFactory {
    constructor() {
        super(...arguments);
        this.defaultGraphFeatures = (0, smodel_factory_1.createFeatureSet)(sgraph_1.SGraph.DEFAULT_FEATURES);
        this.defaultNodeFeatures = (0, smodel_factory_1.createFeatureSet)(sgraph_1.SNode.DEFAULT_FEATURES);
        this.defaultPortFeatures = (0, smodel_factory_1.createFeatureSet)(sgraph_1.SPort.DEFAULT_FEATURES);
        this.defaultEdgeFeatures = (0, smodel_factory_1.createFeatureSet)(sgraph_1.SEdge.DEFAULT_FEATURES);
        this.defaultLabelFeatures = (0, smodel_factory_1.createFeatureSet)(sgraph_1.SLabel.DEFAULT_FEATURES);
        this.defaultCompartmentFeatures = (0, smodel_factory_1.createFeatureSet)(sgraph_1.SCompartment.DEFAULT_FEATURES);
        this.defaultButtonFeatures = (0, smodel_factory_1.createFeatureSet)(model_1.SButton.DEFAULT_FEATURES);
    }
    createElement(schema, parent) {
        let child;
        if (this.registry.hasKey(schema.type)) {
            const regElement = this.registry.get(schema.type, undefined);
            if (!(regElement instanceof smodel_1.SChildElement))
                throw new Error(`Element with type ${schema.type} was expected to be an SChildElement.`);
            child = regElement;
        }
        else if (this.isNodeSchema(schema)) {
            child = new sgraph_1.SNode();
            child.features = this.defaultNodeFeatures;
        }
        else if (this.isPortSchema(schema)) {
            child = new sgraph_1.SPort();
            child.features = this.defaultPortFeatures;
        }
        else if (this.isEdgeSchema(schema)) {
            child = new sgraph_1.SEdge();
            child.features = this.defaultEdgeFeatures;
        }
        else if (this.isLabelSchema(schema)) {
            child = new sgraph_1.SLabel();
            child.features = this.defaultLabelFeatures;
        }
        else if (this.isCompartmentSchema(schema)) {
            child = new sgraph_1.SCompartment();
            child.features = this.defaultCompartmentFeatures;
        }
        else if (this.isButtonSchema(schema)) {
            child = new model_1.SButton();
            child.features = this.defaultButtonFeatures;
        }
        else {
            child = new smodel_1.SChildElement();
        }
        return this.initializeChild(child, schema, parent);
    }
    createRoot(schema) {
        let root;
        if (this.registry.hasKey(schema.type)) {
            const regElement = this.registry.get(schema.type, undefined);
            if (!(regElement instanceof smodel_1.SModelRoot))
                throw new Error(`Element with type ${schema.type} was expected to be an SModelRoot.`);
            root = regElement;
        }
        else if (this.isGraphSchema(schema)) {
            root = new sgraph_1.SGraph();
            root.features = this.defaultGraphFeatures;
        }
        else {
            root = new smodel_1.SModelRoot();
        }
        return this.initializeRoot(root, schema);
    }
    isGraphSchema(schema) {
        return (0, model_utils_1.getBasicType)(schema) === 'graph';
    }
    isNodeSchema(schema) {
        return (0, model_utils_1.getBasicType)(schema) === 'node';
    }
    isPortSchema(schema) {
        return (0, model_utils_1.getBasicType)(schema) === 'port';
    }
    isEdgeSchema(schema) {
        return (0, model_utils_1.getBasicType)(schema) === 'edge';
    }
    isLabelSchema(schema) {
        return (0, model_utils_1.getBasicType)(schema) === 'label';
    }
    isCompartmentSchema(schema) {
        return (0, model_utils_1.getBasicType)(schema) === 'comp';
    }
    isButtonSchema(schema) {
        return (0, model_utils_1.getBasicType)(schema) === 'button';
    }
};
SGraphFactory = __decorate([
    (0, inversify_1.injectable)()
], SGraphFactory);
exports.SGraphFactory = SGraphFactory;


/***/ }),

/***/ "./node_modules/sprotty/lib/graph/sgraph.js":
/*!**************************************************!*\
  !*** ./node_modules/sprotty/lib/graph/sgraph.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SGraphIndex = exports.SCompartment = exports.SLabel = exports.SEdge = exports.SPort = exports.SNode = exports.SGraph = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ../features/bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../features/edge-layout/model */ "./node_modules/sprotty/lib/features/edge-layout/model.js");
const delete_1 = __webpack_require__(/*! ../features/edit/delete */ "./node_modules/sprotty/lib/features/edit/delete.js");
const model_3 = __webpack_require__(/*! ../features/edit/model */ "./node_modules/sprotty/lib/features/edit/model.js");
const model_4 = __webpack_require__(/*! ../features/fade/model */ "./node_modules/sprotty/lib/features/fade/model.js");
const model_5 = __webpack_require__(/*! ../features/hover/model */ "./node_modules/sprotty/lib/features/hover/model.js");
const model_6 = __webpack_require__(/*! ../features/move/model */ "./node_modules/sprotty/lib/features/move/model.js");
const model_7 = __webpack_require__(/*! ../features/routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const model_8 = __webpack_require__(/*! ../features/select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const viewport_root_1 = __webpack_require__(/*! ../features/viewport/viewport-root */ "./node_modules/sprotty/lib/features/viewport/viewport-root.js");
const iterable_1 = __webpack_require__(/*! ../utils/iterable */ "./node_modules/sprotty/lib/utils/iterable.js");
/**
 * Root element for graph-like models.
 */
class SGraph extends viewport_root_1.ViewportRootElement {
    constructor(index = new SGraphIndex()) {
        super(index);
    }
}
exports.SGraph = SGraph;
/**
 * Model element class for nodes, which are the main entities in a graph. A node can be connected to
 * another node via an SEdge. Such a connection can be direct, i.e. the node is the source or target of
 * the edge, or indirect through a port, i.e. it contains an SPort which is the source or target of the edge.
 */
class SNode extends model_7.SConnectableElement {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.hoverFeedback = false;
        this.opacity = 1;
    }
    canConnect(routable, role) {
        return this.children.find(c => c instanceof SPort) === undefined;
    }
    get incomingEdges() {
        const index = this.index;
        if (index instanceof SGraphIndex) {
            return index.getIncomingEdges(this);
        }
        const allEdges = this.index.all().filter(e => e instanceof SEdge);
        return allEdges.filter(e => e.targetId === this.id);
    }
    get outgoingEdges() {
        const index = this.index;
        if (index instanceof SGraphIndex) {
            return index.getOutgoingEdges(this);
        }
        const allEdges = this.index.all().filter(e => e instanceof SEdge);
        return allEdges.filter(e => e.sourceId === this.id);
    }
}
exports.SNode = SNode;
SNode.DEFAULT_FEATURES = [model_7.connectableFeature, delete_1.deletableFeature, model_8.selectFeature, model_1.boundsFeature,
    model_6.moveFeature, model_1.layoutContainerFeature, model_4.fadeFeature, model_5.hoverFeedbackFeature, model_5.popupFeature];
/**
 * A port is a connection point for edges. It should always be contained in an SNode.
 */
class SPort extends model_7.SConnectableElement {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.hoverFeedback = false;
        this.opacity = 1;
    }
    get incomingEdges() {
        const index = this.index;
        if (index instanceof SGraphIndex) {
            return index.getIncomingEdges(this);
        }
        return super.incomingEdges.filter(e => e instanceof SEdge);
    }
    get outgoingEdges() {
        const index = this.index;
        if (index instanceof SGraphIndex) {
            return index.getOutgoingEdges(this);
        }
        return super.outgoingEdges.filter(e => e instanceof SEdge);
    }
}
exports.SPort = SPort;
SPort.DEFAULT_FEATURES = [model_7.connectableFeature, model_8.selectFeature, model_1.boundsFeature, model_4.fadeFeature,
    model_5.hoverFeedbackFeature];
/**
 * Model element class for edges, which are the connectors in a graph. An edge has a source and a target,
 * each of which can be either a node or a port. The source and target elements are referenced via their
 * ids and can be resolved with the index stored in the root element.
 */
class SEdge extends model_7.SRoutableElement {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.hoverFeedback = false;
        this.opacity = 1;
    }
}
exports.SEdge = SEdge;
SEdge.DEFAULT_FEATURES = [model_3.editFeature, delete_1.deletableFeature, model_8.selectFeature, model_4.fadeFeature,
    model_5.hoverFeedbackFeature];
/**
 * A label can be attached to a node, edge, or port, and contains some text to be rendered in its view.
 */
class SLabel extends model_1.SShapeElement {
    constructor() {
        super(...arguments);
        this.selected = false;
        this.alignment = geometry_1.Point.ORIGIN;
        this.opacity = 1;
    }
}
exports.SLabel = SLabel;
SLabel.DEFAULT_FEATURES = [model_1.boundsFeature, model_1.alignFeature, model_1.layoutableChildFeature,
    model_2.edgeLayoutFeature, model_4.fadeFeature];
/**
 * A compartment is used to group multiple child elements such as labels of a node. Usually a `vbox`
 * or `hbox` layout is used to arrange these children.
 */
class SCompartment extends model_1.SShapeElement {
    constructor() {
        super(...arguments);
        this.opacity = 1;
    }
}
exports.SCompartment = SCompartment;
SCompartment.DEFAULT_FEATURES = [model_1.boundsFeature, model_1.layoutContainerFeature, model_1.layoutableChildFeature,
    model_4.fadeFeature];
/**
 * A specialized model index that tracks outgoing and incoming edges.
 */
class SGraphIndex extends smodel_1.ModelIndexImpl {
    constructor() {
        super(...arguments);
        this.outgoing = new Map;
        this.incoming = new Map;
    }
    add(element) {
        super.add(element);
        if (element instanceof SEdge) {
            // Register the edge in the outgoing map
            if (element.sourceId) {
                const sourceArr = this.outgoing.get(element.sourceId);
                if (sourceArr === undefined)
                    this.outgoing.set(element.sourceId, [element]);
                else
                    sourceArr.push(element);
            }
            // Register the edge in the incoming map
            if (element.targetId) {
                const targetArr = this.incoming.get(element.targetId);
                if (targetArr === undefined)
                    this.incoming.set(element.targetId, [element]);
                else
                    targetArr.push(element);
            }
        }
    }
    remove(element) {
        super.remove(element);
        if (element instanceof SEdge) {
            // Remove the edge from the outgoing map
            const sourceArr = this.outgoing.get(element.sourceId);
            if (sourceArr !== undefined) {
                const index = sourceArr.indexOf(element);
                if (index >= 0) {
                    if (sourceArr.length === 1)
                        this.outgoing.delete(element.sourceId);
                    else
                        sourceArr.splice(index, 1);
                }
            }
            // Remove the edge from the incoming map
            const targetArr = this.incoming.get(element.targetId);
            if (targetArr !== undefined) {
                const index = targetArr.indexOf(element);
                if (index >= 0) {
                    if (targetArr.length === 1)
                        this.incoming.delete(element.targetId);
                    else
                        targetArr.splice(index, 1);
                }
            }
        }
    }
    getAttachedElements(element) {
        return new iterable_1.FluentIterableImpl(() => ({
            outgoing: this.outgoing.get(element.id),
            incoming: this.incoming.get(element.id),
            nextOutgoingIndex: 0,
            nextIncomingIndex: 0
        }), (state) => {
            let index = state.nextOutgoingIndex;
            if (state.outgoing !== undefined && index < state.outgoing.length) {
                state.nextOutgoingIndex = index + 1;
                return { done: false, value: state.outgoing[index] };
            }
            index = state.nextIncomingIndex;
            if (state.incoming !== undefined) {
                // Filter out self-loops: edges that are both outgoing and incoming
                while (index < state.incoming.length) {
                    const edge = state.incoming[index];
                    if (edge.sourceId !== edge.targetId) {
                        state.nextIncomingIndex = index + 1;
                        return { done: false, value: edge };
                    }
                    index++;
                }
            }
            return { done: true, value: undefined };
        });
    }
    getIncomingEdges(element) {
        return this.incoming.get(element.id) || [];
    }
    getOutgoingEdges(element) {
        return this.outgoing.get(element.id) || [];
    }
}
exports.SGraphIndex = SGraphIndex;


/***/ }),

/***/ "./node_modules/sprotty/lib/graph/views.js":
/*!*************************************************!*\
  !*** ./node_modules/sprotty/lib/graph/views.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SBezierControlHandleView = exports.SBezierCreateHandleView = exports.SCompartmentView = exports.SLabelView = exports.SRoutingHandleView = exports.BezierCurveEdgeView = exports.PolylineEdgeViewWithGapsOnIntersections = exports.JumpingPolylineEdgeView = exports.PolylineEdgeView = exports.SGraphView = void 0;
/** @jsx svg */
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "./node_modules/sprotty-protocol/lib/utils/model-utils.js");
const vnode_utils_1 = __webpack_require__(/*! ../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const views_1 = __webpack_require__(/*! ../features/bounds/views */ "./node_modules/sprotty/lib/features/bounds/views.js");
const intersection_finder_1 = __webpack_require__(/*! ../features/edge-intersection/intersection-finder */ "./node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js");
const model_1 = __webpack_require__(/*! ../features/edge-layout/model */ "./node_modules/sprotty/lib/features/edge-layout/model.js");
const model_2 = __webpack_require__(/*! ../features/routing/model */ "./node_modules/sprotty/lib/features/routing/model.js");
const routing_1 = __webpack_require__(/*! ../features/routing/routing */ "./node_modules/sprotty/lib/features/routing/routing.js");
const views_2 = __webpack_require__(/*! ../features/routing/views */ "./node_modules/sprotty/lib/features/routing/views.js");
const jsx_1 = __webpack_require__(/*! ../lib/jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const geometry_2 = __webpack_require__(/*! ../utils/geometry */ "./node_modules/sprotty/lib/utils/geometry.js");
/**
 * IView component that turns an SGraph element and its children into a tree of virtual DOM elements.
 */
let SGraphView = class SGraphView {
    render(model, context) {
        const edgeRouting = this.edgeRouterRegistry.routeAllChildren(model);
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        return (0, jsx_1.svg)("svg", { "class-sprotty-graph": true },
            (0, jsx_1.svg)("g", { transform: transform }, context.renderChildren(model, { edgeRouting })));
    }
};
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], SGraphView.prototype, "edgeRouterRegistry", void 0);
SGraphView = __decorate([
    (0, inversify_1.injectable)()
], SGraphView);
exports.SGraphView = SGraphView;
let PolylineEdgeView = class PolylineEdgeView extends views_2.RoutableView {
    render(edge, context, args) {
        const route = this.edgeRouterRegistry.route(edge, args);
        if (route.length === 0) {
            return this.renderDanglingEdge("Cannot compute route", edge, context);
        }
        if (!this.isVisible(edge, route, context)) {
            if (edge.children.length === 0) {
                return undefined;
            }
            // The children of an edge are not necessarily inside the bounding box of the route,
            // so we need to render a group to ensure the children have a chance to be rendered.
            return (0, jsx_1.svg)("g", null, context.renderChildren(edge, { route }));
        }
        return (0, jsx_1.svg)("g", { "class-sprotty-edge": true, "class-mouseover": edge.hoverFeedback },
            this.renderLine(edge, route, context, args),
            this.renderAdditionals(edge, route, context),
            context.renderChildren(edge, { route }));
    }
    renderLine(edge, segments, context, args) {
        const firstPoint = segments[0];
        let path = `M ${firstPoint.x},${firstPoint.y}`;
        for (let i = 1; i < segments.length; i++) {
            const p = segments[i];
            path += ` L ${p.x},${p.y}`;
        }
        return (0, jsx_1.svg)("path", { d: path });
    }
    renderAdditionals(edge, segments, context) {
        // here we need to render the control points?
        return [];
    }
    renderDanglingEdge(message, edge, context) {
        return (0, jsx_1.svg)("text", { "class-sprotty-edge-dangling": true, title: message }, "?");
    }
};
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], PolylineEdgeView.prototype, "edgeRouterRegistry", void 0);
PolylineEdgeView = __decorate([
    (0, inversify_1.injectable)()
], PolylineEdgeView);
exports.PolylineEdgeView = PolylineEdgeView;
/**
 * A `PolylineEdgeView` that renders jumps over intersections.
 *
 * In order to find intersections, `IntersectionFinder` needs to be configured as a `TYPES.IEdgeRoutePostprocessor`
 * so that that intersections are declared as `IntersectingRoutedPoint` in the computed routes.
 *
 * This view only draws correct line jumps for intersections among straight line segments and doesn't work with bezier curves.
 *
 * @see IntersectionFinder
 * @see IntersectingRoutedPoint
 * @see EdgeRouterRegistry
 */
let JumpingPolylineEdgeView = class JumpingPolylineEdgeView extends PolylineEdgeView {
    constructor() {
        super(...arguments);
        this.jumpOffsetBefore = 5;
        this.jumpOffsetAfter = 5;
        this.skipOffsetBefore = 3;
        this.skipOffsetAfter = 2;
    }
    renderLine(edge, segments, context, args) {
        let path = '';
        for (let i = 0; i < segments.length; i++) {
            const p = segments[i];
            if (i === 0) {
                path = `M ${p.x},${p.y}`;
            }
            if ((0, intersection_finder_1.isIntersectingRoutedPoint)(p)) {
                path += this.intersectionPath(edge, segments, p, args);
            }
            if (i !== 0) {
                path += ` L ${p.x},${p.y}`;
            }
        }
        return (0, jsx_1.svg)("path", { d: path });
    }
    /**
     * Returns a path that takes the intersections into account by drawing a line jump or a gap for intersections on that path.
     */
    intersectionPath(edge, segments, intersectingPoint, args) {
        if (intersectingPoint.intersections.length < 1) {
            return '';
        }
        const segment = this.getLineSegment(edge, intersectingPoint.intersections[0], args, segments);
        const intersections = this.getIntersectionsSortedBySegmentDirection(segment, intersectingPoint);
        let path = '';
        for (const intersection of intersections) {
            const otherLineSegment = this.getOtherLineSegment(edge, intersection, args);
            if (otherLineSegment === undefined) {
                continue;
            }
            const currentLineSegment = this.getLineSegment(edge, intersection, args, segments);
            const intersectionPoint = intersection.intersectionPoint;
            if (this.shouldDrawLineJumpOnIntersection(currentLineSegment, otherLineSegment)) {
                path += this.createJumpPath(intersectionPoint, currentLineSegment);
            }
            else if (this.shouldDrawLineGapOnIntersection(currentLineSegment, otherLineSegment)) {
                path += this.createGapPath(intersectionPoint, currentLineSegment);
            }
        }
        return path;
    }
    /**
     * Returns the intersections sorted by the direction of the `lineSegment`.
     *
     * The coordinate system goes from left to right and top to bottom.
     * Thus, x increases to the right and y increases downwards.
     *
     * We need to draw the intersections in the order of the direction of the line segment.
     * To draw a line pointing north, we need to order intersections by Y in a descending order.
     * To draw a line pointing south, we need to order intersections by Y in an ascending order.
     */
    getIntersectionsSortedBySegmentDirection(lineSegment, intersectingPoint) {
        switch (lineSegment.direction) {
            case 'north':
            case 'north-east':
                return intersectingPoint.intersections.sort(intersection_finder_1.BY_X_THEN_DESCENDING_Y);
            case 'south':
            case 'south-east':
            case 'east':
                return intersectingPoint.intersections.sort(intersection_finder_1.BY_X_THEN_Y);
            case 'south-west':
            case 'west':
                return intersectingPoint.intersections.sort(intersection_finder_1.BY_DESCENDING_X_THEN_Y);
            case 'north-west':
                return intersectingPoint.intersections.sort(intersection_finder_1.BY_DESCENDING_X_THEN_DESCENDING_Y);
        }
    }
    /**
     * Whether or not to draw a line jump on an intersection for the `currentLineSegment`.
     * This should usually be inverse of `shouldDrawLineGapOnIntersection()`.
     */
    shouldDrawLineJumpOnIntersection(currentLineSegment, otherLineSegment) {
        return Math.abs(currentLineSegment.slopeOrMax) < Math.abs(otherLineSegment.slopeOrMax);
    }
    /**
     * Whether or not to draw a line gap on an intersection for the `currentLineSegment`.
     * This should usually be inverse of `shouldDrawLineJumpOnIntersection()`.
     */
    shouldDrawLineGapOnIntersection(currentLineSegment, otherLineSegment) {
        return !this.shouldDrawLineJumpOnIntersection(currentLineSegment, otherLineSegment);
    }
    getLineSegment(edge, intersection, args, segments) {
        const route = segments ? segments : this.edgeRouterRegistry.route(edge, args);
        const index = intersection.routable1 === edge.id ? intersection.segmentIndex1 : intersection.segmentIndex2;
        return new geometry_2.PointToPointLine(route[index], route[index + 1]);
    }
    getOtherLineSegment(currentEdge, intersection, args) {
        const otherEdgeId = intersection.routable1 === currentEdge.id ? intersection.routable2 : intersection.routable1;
        const otherEdge = currentEdge.index.getById(otherEdgeId);
        if (!(otherEdge instanceof model_2.SRoutableElement)) {
            return undefined;
        }
        return this.getLineSegment(otherEdge, intersection, args);
    }
    createJumpPath(intersectionPoint, lineSegment) {
        const anchorBefore = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p1, this.jumpOffsetBefore);
        const anchorAfter = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p2, this.jumpOffsetAfter);
        const rotation = lineSegment.p1.x < lineSegment.p2.x ? 1 : 0;
        return ` L ${anchorBefore.x},${anchorBefore.y} A 1,1 0,0 ${rotation} ${anchorAfter.x},${anchorAfter.y}`;
    }
    createGapPath(intersectionPoint, lineSegment) {
        let offsetBefore;
        let offsetAfter;
        if (intersectionPoint.y < lineSegment.p1.y) {
            offsetBefore = -this.skipOffsetBefore;
            offsetAfter = this.jumpOffsetAfter + this.skipOffsetAfter;
        }
        else {
            offsetBefore = this.jumpOffsetBefore + this.skipOffsetAfter;
            offsetAfter = -this.skipOffsetBefore;
        }
        const anchorBefore = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p1, offsetBefore);
        const anchorAfter = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p2, offsetAfter);
        return ` L ${anchorBefore.x},${anchorBefore.y} M ${anchorAfter.x},${anchorAfter.y}`;
    }
};
JumpingPolylineEdgeView = __decorate([
    (0, inversify_1.injectable)()
], JumpingPolylineEdgeView);
exports.JumpingPolylineEdgeView = JumpingPolylineEdgeView;
/**
 * A `PolylineEdgeView` that renders gaps on intersections.
 *
 * In order to find intersections, `IntersectionFinder` needs to be configured as a `TYPES.IEdgeRoutePostprocessor`
 * so that that intersections are declared as `IntersectingRoutedPoint` in the computed routes.
 *
 * This view only draws correct gaps for intersections among straight line segments and doesn't work with bezier curves.
 *
 * @see IntersectionFinder
 * @see IntersectingRoutedPoint
 * @see EdgeRouterRegistry
 */
let PolylineEdgeViewWithGapsOnIntersections = class PolylineEdgeViewWithGapsOnIntersections extends JumpingPolylineEdgeView {
    constructor() {
        super(...arguments);
        this.skipOffsetBefore = 3;
        this.skipOffsetAfter = 3;
    }
    shouldDrawLineJumpOnIntersection(currentLineSegment, otherLineSegment) {
        return false;
    }
    shouldDrawLineGapOnIntersection(currentLineSegment, otherLineSegment) {
        return Math.abs(currentLineSegment.slopeOrMax) >= Math.abs(otherLineSegment.slopeOrMax);
    }
    createGapPath(intersectionPoint, lineSegment) {
        const anchorBefore = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p1, this.skipOffsetBefore);
        const anchorAfter = geometry_1.Point.shiftTowards(intersectionPoint, lineSegment.p2, this.skipOffsetAfter);
        return ` L ${anchorBefore.x},${anchorBefore.y} M ${anchorAfter.x},${anchorAfter.y}`;
    }
};
PolylineEdgeViewWithGapsOnIntersections = __decorate([
    (0, inversify_1.injectable)()
], PolylineEdgeViewWithGapsOnIntersections);
exports.PolylineEdgeViewWithGapsOnIntersections = PolylineEdgeViewWithGapsOnIntersections;
let BezierCurveEdgeView = class BezierCurveEdgeView extends views_2.RoutableView {
    render(edge, context, args) {
        const route = this.edgeRouterRegistry.route(edge, args);
        if (route.length === 0) {
            return this.renderDanglingEdge("Cannot compute route", edge, context);
        }
        if (!this.isVisible(edge, route, context)) {
            if (edge.children.length === 0) {
                return undefined;
            }
            // The children of an edge are not necessarily inside the bounding box of the route,
            // so we need to render a group to ensure the children have a chance to be rendered.
            return (0, jsx_1.svg)("g", null, context.renderChildren(edge, { route }));
        }
        return (0, jsx_1.svg)("g", { "class-sprotty-edge": true, "class-mouseover": edge.hoverFeedback },
            this.renderLine(edge, route, context, args),
            this.renderAdditionals(edge, route, context),
            context.renderChildren(edge, { route }));
    }
    renderLine(edge, segments, context, args) {
        /**
         * Example for two splines:
         * SVG:
         * <path d="M0,300 C0,150 300,150 300,300 S600,450 600,300" />
         *
         * Segments input layout:
         * routingPoints[0] = source;
         * routingPoints[1] = controlForSource;
         * routingPoints[2] = controlForSegment1;
         * routingPoints[3] = segment;
         * routingPoints[4] = controlForSegment2;
         * routingPoints[5] = controlForTarget;
         * routingPoints[6] = target;
         */
        let path = '';
        if (segments.length >= 4) {
            path += this.buildMainSegment(segments);
            const pointsLeft = segments.length - 4;
            if (pointsLeft > 0 && pointsLeft % 3 === 0) {
                for (let i = 4; i < segments.length; i += 3) {
                    path += this.addSpline(segments, i);
                }
            }
        }
        return (0, jsx_1.svg)("path", { d: path });
    }
    buildMainSegment(segments) {
        const s = segments[0];
        const h1 = segments[1];
        const h2 = segments[2];
        const t = segments[3];
        return `M${s.x},${s.y} C${h1.x},${h1.y} ${h2.x},${h2.y} ${t.x},${t.y}`;
    }
    addSpline(segments, index) {
        // We have two controls for each junction, but SVG does not therefore index is jumped over
        const c = segments[index + 1];
        const p = segments[index + 2];
        return ` S${c.x},${c.y} ${p.x},${p.y}`;
    }
    renderAdditionals(edge, segments, context) {
        return [];
    }
    renderDanglingEdge(message, edge, context) {
        return (0, jsx_1.svg)("text", { "class-sprotty-edge-dangling": true, title: message }, "?");
    }
};
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], BezierCurveEdgeView.prototype, "edgeRouterRegistry", void 0);
BezierCurveEdgeView = __decorate([
    (0, inversify_1.injectable)()
], BezierCurveEdgeView);
exports.BezierCurveEdgeView = BezierCurveEdgeView;
let SRoutingHandleView = class SRoutingHandleView {
    constructor() {
        this.minimalPointDistance = 10;
    }
    render(handle, context, args) {
        if (args && args.route) {
            if (handle.parent instanceof model_2.SRoutableElement) {
                const router = this.edgeRouterRegistry.get(handle.parent.routerKind);
                const theRoute = args.route === undefined ? this.edgeRouterRegistry.route(handle.parent, args) : args.route;
                const position = router.getHandlePosition(handle.parent, theRoute, handle);
                if (position !== undefined) {
                    const node = (0, jsx_1.svg)("circle", { "class-sprotty-routing-handle": true, "class-selected": handle.selected, "class-mouseover": handle.hoverFeedback, cx: position.x, cy: position.y, r: this.getRadius() });
                    (0, vnode_utils_1.setAttr)(node, 'data-kind', handle.kind);
                    return node;
                }
            }
        }
        // Fallback: Create an empty group
        return (0, jsx_1.svg)("g", null);
    }
    getRadius() {
        return 7;
    }
};
__decorate([
    (0, inversify_1.inject)(routing_1.EdgeRouterRegistry),
    __metadata("design:type", routing_1.EdgeRouterRegistry)
], SRoutingHandleView.prototype, "edgeRouterRegistry", void 0);
SRoutingHandleView = __decorate([
    (0, inversify_1.injectable)()
], SRoutingHandleView);
exports.SRoutingHandleView = SRoutingHandleView;
let SLabelView = class SLabelView extends views_1.ShapeView {
    render(label, context) {
        if (!(0, model_1.isEdgeLayoutable)(label) && !this.isVisible(label, context)) {
            return undefined;
        }
        const vnode = (0, jsx_1.svg)("text", { "class-sprotty-label": true }, label.text);
        const subType = (0, model_utils_1.getSubType)(label);
        if (subType) {
            (0, vnode_utils_1.setAttr)(vnode, 'class', subType);
        }
        return vnode;
    }
};
SLabelView = __decorate([
    (0, inversify_1.injectable)()
], SLabelView);
exports.SLabelView = SLabelView;
let SCompartmentView = class SCompartmentView {
    render(compartment, context, args) {
        const translate = `translate(${compartment.bounds.x}, ${compartment.bounds.y})`;
        const vnode = (0, jsx_1.svg)("g", { transform: translate, "class-sprotty-comp": "{true}" }, context.renderChildren(compartment));
        const subType = (0, model_utils_1.getSubType)(compartment);
        if (subType)
            (0, vnode_utils_1.setAttr)(vnode, 'class', subType);
        return vnode;
    }
};
SCompartmentView = __decorate([
    (0, inversify_1.injectable)()
], SCompartmentView);
exports.SCompartmentView = SCompartmentView;
let SBezierCreateHandleView = class SBezierCreateHandleView extends SRoutingHandleView {
    render(handle, context, args) {
        if (args) {
            const theRoute = args.route;
            if (theRoute && handle.parent instanceof model_2.SRoutableElement) {
                const router = this.edgeRouterRegistry.get(handle.parent.routerKind);
                const position = router.getHandlePosition(handle.parent, theRoute, handle);
                if (position !== undefined) {
                    const translation = "translate(" + position.x + ", " + position.y + ")";
                    const textOffsetX = -5.5;
                    const textOffsetY = 5.5;
                    const text = (handle.kind === "bezier-add") ? "+" : "-";
                    const node = (0, jsx_1.svg)("g", { transform: translation, "class-sprotty-routing-handle": true, "class-selected": handle.selected, "class-mouseover": handle.hoverFeedback },
                        (0, jsx_1.svg)("circle", { r: this.getRadius() }),
                        (0, jsx_1.svg)("text", { x: textOffsetX, y: textOffsetY, "attrs-text-align": "middle", "style-font-family": "monospace", "style-pointer-events": "none", "style-fill": "white" }, text));
                    (0, vnode_utils_1.setAttr)(node, 'data-kind', handle.kind);
                    return node;
                }
            }
        }
        // Fallback: Create an empty group
        return (0, jsx_1.svg)("g", null);
    }
};
SBezierCreateHandleView = __decorate([
    (0, inversify_1.injectable)()
], SBezierCreateHandleView);
exports.SBezierCreateHandleView = SBezierCreateHandleView;
let SBezierControlHandleView = class SBezierControlHandleView extends SRoutingHandleView {
    render(handle, context, args) {
        if (args) {
            const theRoute = args.route;
            if (theRoute && handle.parent instanceof model_2.SRoutableElement) {
                const router = this.edgeRouterRegistry.get(handle.parent.routerKind);
                const position = router.getHandlePosition(handle.parent, theRoute, handle);
                if (position !== undefined) {
                    let pathEndPos;
                    for (let i = 0; i < theRoute.length; i++) {
                        const elem = theRoute[i];
                        if (elem.kind === position.kind && elem.pointIndex === position.pointIndex) {
                            if (handle.kind === 'bezier-control-before') {
                                pathEndPos = theRoute[i + 1];
                            }
                            else {
                                pathEndPos = theRoute[i - 1];
                            }
                            break;
                        }
                    }
                    let node;
                    if (pathEndPos) {
                        const coords = `M ${position.x}, ${position.y} L ${pathEndPos.x}, ${pathEndPos.y}`;
                        node =
                            (0, jsx_1.svg)("g", { "class-sprotty-routing-handle": true, "class-selected": handle.selected, "class-mouseover": handle.hoverFeedback },
                                (0, jsx_1.svg)("path", { d: coords, stroke: "grey", "style-stroke-width": "2px" }),
                                (0, jsx_1.svg)("circle", { cx: position.x, cy: position.y, r: this.getRadius() }));
                    }
                    else {
                        node = (0, jsx_1.svg)("circle", { "class-sprotty-routing-handle": true, "class-selected": handle.selected, "class-mouseover": handle.hoverFeedback, cx: position.x, cy: position.y, r: this.getRadius() });
                    }
                    (0, vnode_utils_1.setAttr)(node, 'data-kind', handle.kind);
                    return node;
                }
            }
        }
        // Fallback: Create an empty group
        return (0, jsx_1.svg)("g", null);
    }
};
SBezierControlHandleView = __decorate([
    (0, inversify_1.injectable)()
], SBezierControlHandleView);
exports.SBezierControlHandleView = SBezierControlHandleView;


/***/ }),

/***/ "./node_modules/sprotty/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/sprotty/lib/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.modelSourceModule = exports.zorderModule = exports.viewportModule = exports.updateModule = exports.undoRedoModule = exports.selectModule = exports.routingModule = exports.openModule = exports.moveModule = exports.hoverModule = exports.fadeModule = exports.exportModule = exports.expandModule = exports.edgeLayoutModule = exports.edgeIntersectionModule = exports.decorationModule = exports.contextMenuModule = exports.commandPaletteModule = exports.buttonModule = exports.boundsModule = exports.graphModule = exports.defaultModule = void 0;
// ------------------ Base ------------------
__exportStar(__webpack_require__(/*! ./base/actions/action */ "./node_modules/sprotty/lib/base/actions/action.js"), exports);
__exportStar(__webpack_require__(/*! ./base/actions/action-dispatcher */ "./node_modules/sprotty/lib/base/actions/action-dispatcher.js"), exports);
__exportStar(__webpack_require__(/*! ./base/actions/action-handler */ "./node_modules/sprotty/lib/base/actions/action-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./base/actions/diagram-locker */ "./node_modules/sprotty/lib/base/actions/diagram-locker.js"), exports);
__exportStar(__webpack_require__(/*! ./base/animations/animation-frame-syncer */ "./node_modules/sprotty/lib/base/animations/animation-frame-syncer.js"), exports);
__exportStar(__webpack_require__(/*! ./base/animations/animation */ "./node_modules/sprotty/lib/base/animations/animation.js"), exports);
__exportStar(__webpack_require__(/*! ./base/animations/easing */ "./node_modules/sprotty/lib/base/animations/easing.js"), exports);
__exportStar(__webpack_require__(/*! ./base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js"), exports);
__exportStar(__webpack_require__(/*! ./base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js"), exports);
__exportStar(__webpack_require__(/*! ./base/commands/command-stack-options */ "./node_modules/sprotty/lib/base/commands/command-stack-options.js"), exports);
__exportStar(__webpack_require__(/*! ./base/commands/command-stack */ "./node_modules/sprotty/lib/base/commands/command-stack.js"), exports);
__exportStar(__webpack_require__(/*! ./base/features/initialize-canvas */ "./node_modules/sprotty/lib/base/features/initialize-canvas.js"), exports);
__exportStar(__webpack_require__(/*! ./base/features/set-model */ "./node_modules/sprotty/lib/base/features/set-model.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/smodel-extension */ "./node_modules/sprotty/lib/base/model/smodel-extension.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/smodel-utils */ "./node_modules/sprotty/lib/base/model/smodel-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js"), exports);
__exportStar(__webpack_require__(/*! ./base/tool-manager/tool-manager */ "./node_modules/sprotty/lib/base/tool-manager/tool-manager.js"), exports);
__exportStar(__webpack_require__(/*! ./base/tool-manager/tool */ "./node_modules/sprotty/lib/base/tool-manager/tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/ui-extensions/ui-extension-registry */ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension-registry.js"), exports);
__exportStar(__webpack_require__(/*! ./base/ui-extensions/ui-extension */ "./node_modules/sprotty/lib/base/ui-extensions/ui-extension.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/key-tool */ "./node_modules/sprotty/lib/base/views/key-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/mouse-tool */ "./node_modules/sprotty/lib/base/views/mouse-tool.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/thunk-view */ "./node_modules/sprotty/lib/base/views/thunk-view.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/view */ "./node_modules/sprotty/lib/base/views/view.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/viewer-cache */ "./node_modules/sprotty/lib/base/views/viewer-cache.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/viewer-options */ "./node_modules/sprotty/lib/base/views/viewer-options.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/viewer */ "./node_modules/sprotty/lib/base/views/viewer.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/vnode-postprocessor */ "./node_modules/sprotty/lib/base/views/vnode-postprocessor.js"), exports);
__exportStar(__webpack_require__(/*! ./base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js"), exports);
__exportStar(__webpack_require__(/*! ./base/types */ "./node_modules/sprotty/lib/base/types.js"), exports);
const di_config_1 = __importDefault(__webpack_require__(/*! ./base/di.config */ "./node_modules/sprotty/lib/base/di.config.js"));
exports.defaultModule = di_config_1.default;
// ------------------ Features ------------------
__exportStar(__webpack_require__(/*! ./features/bounds/bounds-manipulation */ "./node_modules/sprotty/lib/features/bounds/bounds-manipulation.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/hidden-bounds-updater */ "./node_modules/sprotty/lib/features/bounds/hidden-bounds-updater.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/layout */ "./node_modules/sprotty/lib/features/bounds/layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/vbox-layout */ "./node_modules/sprotty/lib/features/bounds/vbox-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/hbox-layout */ "./node_modules/sprotty/lib/features/bounds/hbox-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/stack-layout */ "./node_modules/sprotty/lib/features/bounds/stack-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/bounds/views */ "./node_modules/sprotty/lib/features/bounds/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/button/button-handler */ "./node_modules/sprotty/lib/features/button/button-handler.js"), exports);
__exportStar(__webpack_require__(/*! ./features/button/model */ "./node_modules/sprotty/lib/features/button/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/command-palette/action-providers */ "./node_modules/sprotty/lib/features/command-palette/action-providers.js"), exports);
__exportStar(__webpack_require__(/*! ./features/command-palette/command-palette */ "./node_modules/sprotty/lib/features/command-palette/command-palette.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/context-menu-service */ "./node_modules/sprotty/lib/features/context-menu/context-menu-service.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/menu-providers */ "./node_modules/sprotty/lib/features/context-menu/menu-providers.js"), exports);
__exportStar(__webpack_require__(/*! ./features/context-menu/mouse-listener */ "./node_modules/sprotty/lib/features/context-menu/mouse-listener.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-layout/di.config */ "./node_modules/sprotty/lib/features/edge-layout/di.config.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-layout/edge-layout */ "./node_modules/sprotty/lib/features/edge-layout/edge-layout.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-layout/model */ "./node_modules/sprotty/lib/features/edge-layout/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/create */ "./node_modules/sprotty/lib/features/edit/create.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/create-on-drag */ "./node_modules/sprotty/lib/features/edit/create-on-drag.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/di.config */ "./node_modules/sprotty/lib/features/edit/di.config.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/delete */ "./node_modules/sprotty/lib/features/edit/delete.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/edit-label */ "./node_modules/sprotty/lib/features/edit/edit-label.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/edit-label-ui */ "./node_modules/sprotty/lib/features/edit/edit-label-ui.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/edit-routing */ "./node_modules/sprotty/lib/features/edit/edit-routing.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/model */ "./node_modules/sprotty/lib/features/edit/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edit/reconnect */ "./node_modules/sprotty/lib/features/edit/reconnect.js"), exports);
__exportStar(__webpack_require__(/*! ./features/expand/expand */ "./node_modules/sprotty/lib/features/expand/expand.js"), exports);
__exportStar(__webpack_require__(/*! ./features/expand/model */ "./node_modules/sprotty/lib/features/expand/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/expand/views */ "./node_modules/sprotty/lib/features/expand/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/export */ "./node_modules/sprotty/lib/features/export/export.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/model */ "./node_modules/sprotty/lib/features/export/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/export/svg-exporter */ "./node_modules/sprotty/lib/features/export/svg-exporter.js"), exports);
__exportStar(__webpack_require__(/*! ./features/fade/fade */ "./node_modules/sprotty/lib/features/fade/fade.js"), exports);
__exportStar(__webpack_require__(/*! ./features/fade/model */ "./node_modules/sprotty/lib/features/fade/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hover/hover */ "./node_modules/sprotty/lib/features/hover/hover.js"), exports);
__exportStar(__webpack_require__(/*! ./features/hover/model */ "./node_modules/sprotty/lib/features/hover/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/decoration/model */ "./node_modules/sprotty/lib/features/decoration/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/decoration/views */ "./node_modules/sprotty/lib/features/decoration/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/decoration/decoration-placer */ "./node_modules/sprotty/lib/features/decoration/decoration-placer.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-intersection/intersection-finder */ "./node_modules/sprotty/lib/features/edge-intersection/intersection-finder.js"), exports);
__exportStar(__webpack_require__(/*! ./features/edge-intersection/sweepline */ "./node_modules/sprotty/lib/features/edge-intersection/sweepline.js"), exports);
__exportStar(__webpack_require__(/*! ./features/move/model */ "./node_modules/sprotty/lib/features/move/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/move/move */ "./node_modules/sprotty/lib/features/move/move.js"), exports);
__exportStar(__webpack_require__(/*! ./features/move/snap */ "./node_modules/sprotty/lib/features/move/snap.js"), exports);
__exportStar(__webpack_require__(/*! ./features/nameable/model */ "./node_modules/sprotty/lib/features/nameable/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/open/open */ "./node_modules/sprotty/lib/features/open/open.js"), exports);
__exportStar(__webpack_require__(/*! ./features/open/model */ "./node_modules/sprotty/lib/features/open/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/projection/model */ "./node_modules/sprotty/lib/features/projection/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/projection/views */ "./node_modules/sprotty/lib/features/projection/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/anchor */ "./node_modules/sprotty/lib/features/routing/anchor.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/abstract-edge-router */ "./node_modules/sprotty/lib/features/routing/abstract-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/bezier-anchors */ "./node_modules/sprotty/lib/features/routing/bezier-anchors.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/bezier-edge-router */ "./node_modules/sprotty/lib/features/routing/bezier-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/manhattan-anchors */ "./node_modules/sprotty/lib/features/routing/manhattan-anchors.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/manhattan-edge-router */ "./node_modules/sprotty/lib/features/routing/manhattan-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/model */ "./node_modules/sprotty/lib/features/routing/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/polyline-anchors */ "./node_modules/sprotty/lib/features/routing/polyline-anchors.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/polyline-edge-router */ "./node_modules/sprotty/lib/features/routing/polyline-edge-router.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/routing */ "./node_modules/sprotty/lib/features/routing/routing.js"), exports);
__exportStar(__webpack_require__(/*! ./features/routing/views */ "./node_modules/sprotty/lib/features/routing/views.js"), exports);
__exportStar(__webpack_require__(/*! ./features/select/model */ "./node_modules/sprotty/lib/features/select/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/select/select */ "./node_modules/sprotty/lib/features/select/select.js"), exports);
__exportStar(__webpack_require__(/*! ./features/undo-redo/undo-redo */ "./node_modules/sprotty/lib/features/undo-redo/undo-redo.js"), exports);
__exportStar(__webpack_require__(/*! ./features/update/model-matching */ "./node_modules/sprotty/lib/features/update/model-matching.js"), exports);
__exportStar(__webpack_require__(/*! ./features/update/update-model */ "./node_modules/sprotty/lib/features/update/update-model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/center-fit */ "./node_modules/sprotty/lib/features/viewport/center-fit.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/model */ "./node_modules/sprotty/lib/features/viewport/model.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/scroll */ "./node_modules/sprotty/lib/features/viewport/scroll.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/viewport-root */ "./node_modules/sprotty/lib/features/viewport/viewport-root.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/viewport */ "./node_modules/sprotty/lib/features/viewport/viewport.js"), exports);
__exportStar(__webpack_require__(/*! ./features/viewport/zoom */ "./node_modules/sprotty/lib/features/viewport/zoom.js"), exports);
__exportStar(__webpack_require__(/*! ./features/zorder/zorder */ "./node_modules/sprotty/lib/features/zorder/zorder.js"), exports);
const di_config_2 = __importDefault(__webpack_require__(/*! ./graph/di.config */ "./node_modules/sprotty/lib/graph/di.config.js"));
exports.graphModule = di_config_2.default;
const di_config_3 = __importDefault(__webpack_require__(/*! ./features/bounds/di.config */ "./node_modules/sprotty/lib/features/bounds/di.config.js"));
exports.boundsModule = di_config_3.default;
const di_config_4 = __importDefault(__webpack_require__(/*! ./features/button/di.config */ "./node_modules/sprotty/lib/features/button/di.config.js"));
exports.buttonModule = di_config_4.default;
const di_config_5 = __importDefault(__webpack_require__(/*! ./features/command-palette/di.config */ "./node_modules/sprotty/lib/features/command-palette/di.config.js"));
exports.commandPaletteModule = di_config_5.default;
const di_config_6 = __importDefault(__webpack_require__(/*! ./features/context-menu/di.config */ "./node_modules/sprotty/lib/features/context-menu/di.config.js"));
exports.contextMenuModule = di_config_6.default;
const di_config_7 = __importDefault(__webpack_require__(/*! ./features/decoration/di.config */ "./node_modules/sprotty/lib/features/decoration/di.config.js"));
exports.decorationModule = di_config_7.default;
const di_config_8 = __importDefault(__webpack_require__(/*! ./features/edge-intersection/di.config */ "./node_modules/sprotty/lib/features/edge-intersection/di.config.js"));
exports.edgeIntersectionModule = di_config_8.default;
const di_config_9 = __importDefault(__webpack_require__(/*! ./features/edge-layout/di.config */ "./node_modules/sprotty/lib/features/edge-layout/di.config.js"));
exports.edgeLayoutModule = di_config_9.default;
const di_config_10 = __importDefault(__webpack_require__(/*! ./features/expand/di.config */ "./node_modules/sprotty/lib/features/expand/di.config.js"));
exports.expandModule = di_config_10.default;
const di_config_11 = __importDefault(__webpack_require__(/*! ./features/export/di.config */ "./node_modules/sprotty/lib/features/export/di.config.js"));
exports.exportModule = di_config_11.default;
const di_config_12 = __importDefault(__webpack_require__(/*! ./features/fade/di.config */ "./node_modules/sprotty/lib/features/fade/di.config.js"));
exports.fadeModule = di_config_12.default;
const di_config_13 = __importDefault(__webpack_require__(/*! ./features/hover/di.config */ "./node_modules/sprotty/lib/features/hover/di.config.js"));
exports.hoverModule = di_config_13.default;
const di_config_14 = __importDefault(__webpack_require__(/*! ./features/move/di.config */ "./node_modules/sprotty/lib/features/move/di.config.js"));
exports.moveModule = di_config_14.default;
const di_config_15 = __importDefault(__webpack_require__(/*! ./features/open/di.config */ "./node_modules/sprotty/lib/features/open/di.config.js"));
exports.openModule = di_config_15.default;
const di_config_16 = __importDefault(__webpack_require__(/*! ./features/routing/di.config */ "./node_modules/sprotty/lib/features/routing/di.config.js"));
exports.routingModule = di_config_16.default;
const di_config_17 = __importDefault(__webpack_require__(/*! ./features/select/di.config */ "./node_modules/sprotty/lib/features/select/di.config.js"));
exports.selectModule = di_config_17.default;
const di_config_18 = __importDefault(__webpack_require__(/*! ./features/undo-redo/di.config */ "./node_modules/sprotty/lib/features/undo-redo/di.config.js"));
exports.undoRedoModule = di_config_18.default;
const di_config_19 = __importDefault(__webpack_require__(/*! ./features/update/di.config */ "./node_modules/sprotty/lib/features/update/di.config.js"));
exports.updateModule = di_config_19.default;
const di_config_20 = __importDefault(__webpack_require__(/*! ./features/viewport/di.config */ "./node_modules/sprotty/lib/features/viewport/di.config.js"));
exports.viewportModule = di_config_20.default;
const di_config_21 = __importDefault(__webpack_require__(/*! ./features/zorder/di.config */ "./node_modules/sprotty/lib/features/zorder/di.config.js"));
exports.zorderModule = di_config_21.default;
// ------------------ Graph ------------------
__exportStar(__webpack_require__(/*! ./graph/sgraph-factory */ "./node_modules/sprotty/lib/graph/sgraph-factory.js"), exports);
__exportStar(__webpack_require__(/*! ./graph/sgraph */ "./node_modules/sprotty/lib/graph/sgraph.js"), exports);
__exportStar(__webpack_require__(/*! ./graph/views */ "./node_modules/sprotty/lib/graph/views.js"), exports);
// ------------------ Library ------------------
__exportStar(__webpack_require__(/*! ./lib/modules */ "./node_modules/sprotty/lib/lib/modules.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/generic-views */ "./node_modules/sprotty/lib/lib/generic-views.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/html-views */ "./node_modules/sprotty/lib/lib/html-views.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/jsx */ "./node_modules/sprotty/lib/lib/jsx.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/model */ "./node_modules/sprotty/lib/lib/model.js"), exports);
__exportStar(__webpack_require__(/*! ./lib/svg-views */ "./node_modules/sprotty/lib/lib/svg-views.js"), exports);
// ------------------ Model Source ------------------
__exportStar(__webpack_require__(/*! ./model-source/commit-model */ "./node_modules/sprotty/lib/model-source/commit-model.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/diagram-server */ "./node_modules/sprotty/lib/model-source/diagram-server.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/local-model-source */ "./node_modules/sprotty/lib/model-source/local-model-source.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/logging */ "./node_modules/sprotty/lib/model-source/logging.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/model-source */ "./node_modules/sprotty/lib/model-source/model-source.js"), exports);
__exportStar(__webpack_require__(/*! ./model-source/websocket */ "./node_modules/sprotty/lib/model-source/websocket.js"), exports);
const di_config_22 = __importDefault(__webpack_require__(/*! ./model-source/di.config */ "./node_modules/sprotty/lib/model-source/di.config.js"));
exports.modelSourceModule = di_config_22.default;
// ------------------ Utilities ------------------
__exportStar(__webpack_require__(/*! ./utils/browser */ "./node_modules/sprotty/lib/utils/browser.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/codicon */ "./node_modules/sprotty/lib/utils/codicon.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/color */ "./node_modules/sprotty/lib/utils/color.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/geometry */ "./node_modules/sprotty/lib/utils/geometry.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/inversify */ "./node_modules/sprotty/lib/utils/inversify.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/json */ "./node_modules/sprotty/lib/utils/json.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/logging */ "./node_modules/sprotty/lib/utils/logging.js"), exports);
__exportStar(__webpack_require__(/*! ./utils/registry */ "./node_modules/sprotty/lib/utils/registry.js"), exports);


/***/ }),

/***/ "./node_modules/sprotty/lib/lib/generic-views.js":
/*!*******************************************************!*\
  !*** ./node_modules/sprotty/lib/lib/generic-views.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForeignObjectView = exports.PreRenderedView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ./jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const virtualize_1 = __importDefault(__webpack_require__(/*! ./virtualize */ "./node_modules/sprotty/lib/lib/virtualize.js"));
const vnode_utils_1 = __webpack_require__(/*! ../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
const views_1 = __webpack_require__(/*! ../features/bounds/views */ "./node_modules/sprotty/lib/features/bounds/views.js");
const model_1 = __webpack_require__(/*! ./model */ "./node_modules/sprotty/lib/lib/model.js");
let PreRenderedView = class PreRenderedView extends views_1.ShapeView {
    render(model, context) {
        if (model instanceof model_1.ShapedPreRenderedElement && !this.isVisible(model, context)) {
            return undefined;
        }
        const node = (0, virtualize_1.default)(model.code);
        if (node === null)
            return undefined;
        this.correctNamespace(node);
        return node;
    }
    correctNamespace(node) {
        if (node.sel === 'svg' || node.sel === 'g')
            (0, vnode_utils_1.setNamespace)(node, 'http://www.w3.org/2000/svg');
    }
};
PreRenderedView = __decorate([
    (0, inversify_1.injectable)()
], PreRenderedView);
exports.PreRenderedView = PreRenderedView;
/**
 * An SVG `foreignObject` view with a namespace specified by the provided `ForeignObjectElement`.
 * Note that `foreignObject` may not be supported by all browsers or SVG viewers.
 */
let ForeignObjectView = class ForeignObjectView {
    render(model, context) {
        const foreignObjectContents = (0, virtualize_1.default)(model.code);
        if (foreignObjectContents === null)
            return undefined;
        const node = (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("foreignObject", { requiredFeatures: 'http://www.w3.org/TR/SVG11/feature#Extensibility', height: model.bounds.height, width: model.bounds.width, x: 0, y: 0 }, foreignObjectContents),
            context.renderChildren(model));
        (0, vnode_utils_1.setAttr)(node, 'class', model.type);
        (0, vnode_utils_1.setNamespace)(foreignObjectContents, model.namespace);
        return node;
    }
};
ForeignObjectView = __decorate([
    (0, inversify_1.injectable)()
], ForeignObjectView);
exports.ForeignObjectView = ForeignObjectView;


/***/ }),

/***/ "./node_modules/sprotty/lib/lib/html-views.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty/lib/lib/html-views.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HtmlRootView = void 0;
/** @jsx html */
const jsx_1 = __webpack_require__(/*! ./jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const vnode_utils_1 = __webpack_require__(/*! ../base/views/vnode-utils */ "./node_modules/sprotty/lib/base/views/vnode-utils.js");
/**
 * View for `HtmlRoot` elements. Typically this is used in hover popup boxes.
 */
let HtmlRootView = class HtmlRootView {
    render(model, context) {
        const root = (0, jsx_1.html)("div", null, context.renderChildren(model));
        for (const c of model.classes) {
            (0, vnode_utils_1.setClass)(root, c, true);
        }
        return root;
    }
};
HtmlRootView = __decorate([
    (0, inversify_1.injectable)()
], HtmlRootView);
exports.HtmlRootView = HtmlRootView;


/***/ }),

/***/ "./node_modules/sprotty/lib/lib/jsx.js":
/*!*********************************************!*\
  !*** ./node_modules/sprotty/lib/lib/jsx.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSX = exports.svg = exports.html = void 0;
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "./node_modules/snabbdom/build/index.js");
const modulesNS = ['hook', 'on', 'style', 'class', 'props', 'attrs', 'dataset'];
const SVGNS = 'http://www.w3.org/2000/svg';
function normalizeAttrs(source, defNS, namespace) {
    const data = {};
    if (namespace) {
        data.ns = namespace;
    }
    if (source === null) {
        return data;
    }
    modulesNS.forEach(mod => {
        if (source[mod]) {
            data[mod] = source[mod];
        }
    });
    Object.keys(source).forEach(key => {
        if (key === 'key' || key === 'classNames' || key === 'selector')
            return;
        const idx = key.indexOf('-');
        if (idx > 0)
            addAttr(key.slice(0, idx), key.slice(idx + 1), source[key]);
        else if (!data[key])
            addAttr(defNS, key, source[key]);
    });
    return data;
    function addAttr(modname, key, val) {
        const mod = data[modname] || (data[modname] = {});
        mod[key] = val;
    }
}
// eslint-disable-next-line @typescript-eslint/naming-convention
function JSX(namespace, defNS = 'props') {
    return (tag, attrs, ...children) => (0, snabbdom_1.jsx)(tag, normalizeAttrs(attrs, defNS, namespace), children);
}
exports.JSX = JSX;
const html = JSX();
exports.html = html;
const svg = JSX(SVGNS, 'attrs');
exports.svg = svg;


/***/ }),

/***/ "./node_modules/sprotty/lib/lib/model.js":
/*!***********************************************!*\
  !*** ./node_modules/sprotty/lib/lib/model.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForeignObjectElement = exports.ShapedPreRenderedElement = exports.PreRenderedElement = exports.HtmlRoot = exports.RectangularPort = exports.CircularPort = exports.DiamondNode = exports.RectangularNode = exports.CircularNode = void 0;
const geometry_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/geometry */ "./node_modules/sprotty-protocol/lib/utils/geometry.js");
const smodel_1 = __webpack_require__(/*! ../base/model/smodel */ "./node_modules/sprotty/lib/base/model/smodel.js");
const model_1 = __webpack_require__(/*! ../features/bounds/model */ "./node_modules/sprotty/lib/features/bounds/model.js");
const model_2 = __webpack_require__(/*! ../features/move/model */ "./node_modules/sprotty/lib/features/move/model.js");
const model_3 = __webpack_require__(/*! ../features/select/model */ "./node_modules/sprotty/lib/features/select/model.js");
const sgraph_1 = __webpack_require__(/*! ../graph/sgraph */ "./node_modules/sprotty/lib/graph/sgraph.js");
const anchor_1 = __webpack_require__(/*! ../features/routing/anchor */ "./node_modules/sprotty/lib/features/routing/anchor.js");
/**
 * A node that is represented by a circle.
 */
class CircularNode extends sgraph_1.SNode {
    get anchorKind() {
        return anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
}
exports.CircularNode = CircularNode;
/**
 * A node that is represented by a rectangle.
 */
class RectangularNode extends sgraph_1.SNode {
    get anchorKind() {
        return anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
}
exports.RectangularNode = RectangularNode;
/**
 * A node that is represented by a diamond.
 */
class DiamondNode extends sgraph_1.SNode {
    get anchorKind() {
        return anchor_1.DIAMOND_ANCHOR_KIND;
    }
}
exports.DiamondNode = DiamondNode;
/**
 * A port that is represented by a circle.
 */
class CircularPort extends sgraph_1.SPort {
    get anchorKind() {
        return anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
}
exports.CircularPort = CircularPort;
/**
 * A port that is represented by a rectangle.
 */
class RectangularPort extends sgraph_1.SPort {
    get anchorKind() {
        return anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
}
exports.RectangularPort = RectangularPort;
/**
 * Root model element class for HTML content. Usually this is rendered with a `div` DOM element.
 */
class HtmlRoot extends smodel_1.SModelRoot {
    constructor() {
        super(...arguments);
        this.classes = [];
    }
}
exports.HtmlRoot = HtmlRoot;
/**
 * Pre-rendered elements contain HTML or SVG code to be transferred to the DOM. This can be useful to
 * render complex figures or to compute the view on the server instead of the client code.
 */
class PreRenderedElement extends smodel_1.SChildElement {
}
exports.PreRenderedElement = PreRenderedElement;
/**
 * Same as PreRenderedElement, but with a position and a size.
 */
class ShapedPreRenderedElement extends PreRenderedElement {
    constructor() {
        super(...arguments);
        this.position = geometry_1.Point.ORIGIN;
        this.size = geometry_1.Dimension.EMPTY;
        this.selected = false;
        this.alignment = geometry_1.Point.ORIGIN;
    }
    get bounds() {
        return {
            x: this.position.x,
            y: this.position.y,
            width: this.size.width,
            height: this.size.height
        };
    }
    set bounds(newBounds) {
        this.position = {
            x: newBounds.x,
            y: newBounds.y
        };
        this.size = {
            width: newBounds.width,
            height: newBounds.height
        };
    }
}
exports.ShapedPreRenderedElement = ShapedPreRenderedElement;
ShapedPreRenderedElement.DEFAULT_FEATURES = [model_2.moveFeature, model_1.boundsFeature, model_3.selectFeature, model_1.alignFeature];
/**
 * A `foreignObject` element to be transferred to the DOM within the SVG.
 *
 * This can be useful to to benefit from e.g. HTML rendering features, such as line wrapping, inside of
 * the SVG diagram.  Note that `foreignObject` is not supported by all browsers and SVG viewers may not
 * support rendering the `foreignObject` content.
 *
 * If no dimensions are specified in the schema element, this element will obtain the dimension of
 * its parent to fill the entire available room. Thus, this element requires specified bounds itself
 * or bounds to be available for its parent.
 */
class ForeignObjectElement extends ShapedPreRenderedElement {
    get bounds() {
        if (geometry_1.Dimension.isValid(this.size)) {
            return {
                x: this.position.x,
                y: this.position.y,
                width: this.size.width,
                height: this.size.height
            };
        }
        else if ((0, model_1.isBoundsAware)(this.parent)) {
            return {
                x: this.position.x,
                y: this.position.y,
                width: this.parent.bounds.width,
                height: this.parent.bounds.height
            };
        }
        return geometry_1.Bounds.EMPTY;
    }
}
exports.ForeignObjectElement = ForeignObjectElement;


/***/ }),

/***/ "./node_modules/sprotty/lib/lib/modules.js":
/*!*************************************************!*\
  !*** ./node_modules/sprotty/lib/lib/modules.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.loadDefaultModules = void 0;
const di_config_1 = __importDefault(__webpack_require__(/*! ../base/di.config */ "./node_modules/sprotty/lib/base/di.config.js"));
const di_config_2 = __importDefault(__webpack_require__(/*! ../model-source/di.config */ "./node_modules/sprotty/lib/model-source/di.config.js"));
const di_config_3 = __importDefault(__webpack_require__(/*! ../features/bounds/di.config */ "./node_modules/sprotty/lib/features/bounds/di.config.js"));
const di_config_4 = __importDefault(__webpack_require__(/*! ../features/button/di.config */ "./node_modules/sprotty/lib/features/button/di.config.js"));
const di_config_5 = __importDefault(__webpack_require__(/*! ../features/command-palette/di.config */ "./node_modules/sprotty/lib/features/command-palette/di.config.js"));
const di_config_6 = __importDefault(__webpack_require__(/*! ../features/context-menu/di.config */ "./node_modules/sprotty/lib/features/context-menu/di.config.js"));
const di_config_7 = __importDefault(__webpack_require__(/*! ../features/decoration/di.config */ "./node_modules/sprotty/lib/features/decoration/di.config.js"));
const di_config_8 = __importDefault(__webpack_require__(/*! ../features/edge-layout/di.config */ "./node_modules/sprotty/lib/features/edge-layout/di.config.js"));
const di_config_9 = __webpack_require__(/*! ../features/edit/di.config */ "./node_modules/sprotty/lib/features/edit/di.config.js");
const di_config_10 = __importDefault(__webpack_require__(/*! ../features/expand/di.config */ "./node_modules/sprotty/lib/features/expand/di.config.js"));
const di_config_11 = __importDefault(__webpack_require__(/*! ../features/export/di.config */ "./node_modules/sprotty/lib/features/export/di.config.js"));
const di_config_12 = __importDefault(__webpack_require__(/*! ../features/fade/di.config */ "./node_modules/sprotty/lib/features/fade/di.config.js"));
const di_config_13 = __importDefault(__webpack_require__(/*! ../features/hover/di.config */ "./node_modules/sprotty/lib/features/hover/di.config.js"));
const di_config_14 = __importDefault(__webpack_require__(/*! ../features/move/di.config */ "./node_modules/sprotty/lib/features/move/di.config.js"));
const di_config_15 = __importDefault(__webpack_require__(/*! ../features/open/di.config */ "./node_modules/sprotty/lib/features/open/di.config.js"));
const di_config_16 = __importDefault(__webpack_require__(/*! ../features/routing/di.config */ "./node_modules/sprotty/lib/features/routing/di.config.js"));
const di_config_17 = __importDefault(__webpack_require__(/*! ../features/select/di.config */ "./node_modules/sprotty/lib/features/select/di.config.js"));
const di_config_18 = __importDefault(__webpack_require__(/*! ../features/undo-redo/di.config */ "./node_modules/sprotty/lib/features/undo-redo/di.config.js"));
const di_config_19 = __importDefault(__webpack_require__(/*! ../features/update/di.config */ "./node_modules/sprotty/lib/features/update/di.config.js"));
const di_config_20 = __importDefault(__webpack_require__(/*! ../features/viewport/di.config */ "./node_modules/sprotty/lib/features/viewport/di.config.js"));
const di_config_21 = __importDefault(__webpack_require__(/*! ../features/zorder/di.config */ "./node_modules/sprotty/lib/features/zorder/di.config.js"));
/**
 * Load the default set of container modules provided by Sprotty.
 */
function loadDefaultModules(container, options) {
    const modules = [
        di_config_1.default, di_config_2.default, di_config_3.default, di_config_4.default,
        di_config_5.default, di_config_6.default, di_config_7.default, di_config_9.edgeEditModule,
        di_config_8.default, di_config_10.default, di_config_11.default, di_config_12.default,
        di_config_13.default, di_config_9.labelEditModule, di_config_9.labelEditUiModule, di_config_14.default,
        di_config_15.default, di_config_16.default, di_config_17.default, di_config_18.default,
        di_config_19.default, di_config_20.default, di_config_21.default
    ];
    if (options && options.exclude) {
        for (const mod of options.exclude) {
            const index = modules.indexOf(mod);
            if (index >= 0)
                modules.splice(index, 1);
        }
    }
    container.load(...modules);
}
exports.loadDefaultModules = loadDefaultModules;


/***/ }),

/***/ "./node_modules/sprotty/lib/lib/svg-views.js":
/*!***************************************************!*\
  !*** ./node_modules/sprotty/lib/lib/svg-views.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EmptyGroupView = exports.DiamondNodeView = exports.RectangularNodeView = exports.CircularNodeView = exports.SvgViewportView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! ./jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const sgraph_1 = __webpack_require__(/*! ../graph/sgraph */ "./node_modules/sprotty/lib/graph/sgraph.js");
const views_1 = __webpack_require__(/*! ../features/bounds/views */ "./node_modules/sprotty/lib/features/bounds/views.js");
const geometry_1 = __webpack_require__(/*! ../utils/geometry */ "./node_modules/sprotty/lib/utils/geometry.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let SvgViewportView = class SvgViewportView {
    render(model, context, args) {
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        return (0, jsx_1.svg)("svg", null,
            (0, jsx_1.svg)("g", { transform: transform }, context.renderChildren(model)));
    }
};
SvgViewportView = __decorate([
    (0, inversify_1.injectable)()
], SvgViewportView);
exports.SvgViewportView = SvgViewportView;
let CircularNodeView = class CircularNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        const radius = this.getRadius(node);
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("circle", { "class-sprotty-node": node instanceof sgraph_1.SNode, "class-sprotty-port": node instanceof sgraph_1.SPort, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, r: radius, cx: radius, cy: radius }),
            context.renderChildren(node));
    }
    getRadius(node) {
        const d = Math.min(node.size.width, node.size.height);
        return d > 0 ? d / 2 : 0;
    }
};
CircularNodeView = __decorate([
    (0, inversify_1.injectable)()
], CircularNodeView);
exports.CircularNodeView = CircularNodeView;
let RectangularNodeView = class RectangularNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("rect", { "class-sprotty-node": node instanceof sgraph_1.SNode, "class-sprotty-port": node instanceof sgraph_1.SPort, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, x: "0", y: "0", width: Math.max(node.size.width, 0), height: Math.max(node.size.height, 0) }),
            context.renderChildren(node));
    }
};
RectangularNodeView = __decorate([
    (0, inversify_1.injectable)()
], RectangularNodeView);
exports.RectangularNodeView = RectangularNodeView;
let DiamondNodeView = class DiamondNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        const diamond = new geometry_1.Diamond({ height: Math.max(node.size.height, 0), width: Math.max(node.size.width, 0), x: 0, y: 0 });
        const points = `${svgStr(diamond.topPoint)} ${svgStr(diamond.rightPoint)} ${svgStr(diamond.bottomPoint)} ${svgStr(diamond.leftPoint)}`;
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("polygon", { "class-sprotty-node": node instanceof sgraph_1.SNode, "class-sprotty-port": node instanceof sgraph_1.SPort, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, points: points }),
            context.renderChildren(node));
    }
};
DiamondNodeView = __decorate([
    (0, inversify_1.injectable)()
], DiamondNodeView);
exports.DiamondNodeView = DiamondNodeView;
function svgStr(point) {
    return `${point.x},${point.y}`;
}
let EmptyGroupView = class EmptyGroupView {
    render(model, context) {
        return (0, jsx_1.svg)("g", null);
    }
};
EmptyGroupView = __decorate([
    (0, inversify_1.injectable)()
], EmptyGroupView);
exports.EmptyGroupView = EmptyGroupView;


/***/ }),

/***/ "./node_modules/sprotty/lib/lib/virtualize.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty/lib/lib/virtualize.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const snabbdom_1 = __webpack_require__(/*! snabbdom */ "./node_modules/snabbdom/build/index.js");
function buildVNodeData(attrs) {
    const data = {};
    const addData = (memo, name) => {
        if (name !== 'style' && name !== 'class') {
            const val = unescapeEntities(attrs[name]);
            memo ? memo[name] = val : memo = { [name]: val };
        }
        return memo;
    };
    const _attrs = Object.keys(attrs).reduce(addData, null);
    if (_attrs) {
        data.attrs = _attrs;
    }
    const style = parseStyle(attrs);
    if (style) {
        data.style = style;
    }
    const classes = parseClass(attrs);
    if (classes) {
        data.class = classes;
    }
    return data;
}
function parseStyle(attrs) {
    const addStyle = (memo, styleProp) => {
        const res = styleProp.split(':');
        const name = transformName(res[0].trim());
        if (name) {
            const val = res[1].replace('!important', '').trim();
            memo ? memo[name] = val : memo = { [name]: val };
        }
        return memo;
    };
    try {
        return attrs.style.split(';').reduce(addStyle, null);
    }
    catch (e) {
        return null;
    }
}
function parseClass(attrs) {
    const addClass = (memo, className) => {
        className = className.trim();
        if (className) {
            memo ? memo[className] = true : memo = { [className]: true };
        }
        return memo;
    };
    try {
        return attrs.class.split(' ').reduce(addClass, null);
    }
    catch (e) {
        return null;
    }
}
function transformName(name) {
    // Replace -a with A to help camel case style property names.
    name = name.replace(/-(\w)/g, function _replace($1, $2) {
        return $2.toUpperCase();
    });
    // Handle properties that start with a -.
    const firstChar = name.charAt(0).toLowerCase();
    return `${firstChar}${name.substring(1)}`;
}
// Regex for matching HTML entities.
const entityRegex = new RegExp('&[a-z0-9#]+;', 'gi');
// Element for setting innerHTML for transforming entities.
let el = null;
function unescapeEntities(text) {
    // Create the element using the context if it doesn't exist.
    if (!el) {
        el = document.createElement('div');
    }
    return text.replace(entityRegex, (entity) => {
        if (el === null)
            return '';
        el.innerHTML = entity;
        return el.textContent === null ? '' : el.textContent;
    });
}
function recurse(doc, func) {
    let node = doc;
    let parent = null;
    const stack = [];
    const setChild = (n) => {
        const child = n.firstChild;
        if (child !== null) {
            parent = n;
        }
        node = child;
    };
    func(node, parent);
    setChild(node);
    while (true) {
        while (node) {
            stack.push(node);
            func(node, parent);
            setChild(node);
        }
        const _node = stack.pop();
        node = _node ? _node : null;
        if (!stack.length)
            break;
        parent = stack[stack.length - 1];
        if (node) {
            const sibling = node.nextSibling;
            if (sibling == null) {
                parent = stack[stack.length - 1];
            }
            node = sibling;
        }
    }
}
let vdom = null;
const vnodeMap = new Map();
let delimited = false;
function toVNode(node, parent) {
    let current;
    if (parent !== null) {
        current = vnodeMap.get(parent);
    }
    switch (node === null || node === void 0 ? void 0 : node.nodeType) {
        // element
        case 1: {
            if (current === undefined)
                return;
            current.children = current.children ? current.children : [];
            const children = current.children;
            const attributes = node.attributes;
            const attrs = {};
            for (let i = 0; i < attributes.length; i++) {
                const attr = attributes.item(i);
                if (attr) {
                    attrs[attr.name] = attr.value;
                }
            }
            const vn = (0, snabbdom_1.h)(node.nodeName, buildVNodeData(attrs));
            children.push(vn);
            vnodeMap.set(node, vn);
            break;
        }
        // text
        case 3: {
            const text = node.textContent;
            if (text !== null && current !== undefined) {
                current.children = current.children ? current.children : [];
                const children = current.children;
                const lastData = children.length > 0 ? children[children.length - 1] : null;
                if (!delimited && typeof lastData !== 'string' && lastData !== null && lastData.sel === undefined) {
                    lastData.text = lastData.text + text;
                }
                else {
                    children.push((0, snabbdom_1.vnode)(undefined, undefined, undefined, text, undefined));
                }
                delimited = false;
            }
            break;
        }
        case 8: {
            delimited = true;
            break;
        }
        // document
        case 9: {
            vdom = (0, snabbdom_1.vnode)(undefined, undefined, [], undefined, undefined);
            vnodeMap.set(node, vdom);
            break;
        }
        default:
            break;
    }
}
function stripVNode(vnodes) {
    const children = vnodes === null || vnodes === void 0 ? void 0 : vnodes.children;
    if (typeof children === 'undefined')
        return null;
    if (children.length === 1 && typeof children[0] !== 'string')
        return children[0];
    return null;
}
function virtualizeString(html) {
    var _a, _b;
    const parser = new window.DOMParser();
    if (parser === undefined || html === undefined || html === '')
        return null;
    const doc = parser.parseFromString(html, "application/xml");
    if (((_a = doc === null || doc === void 0 ? void 0 : doc.firstChild) === null || _a === void 0 ? void 0 : _a.nodeName) === 'parsererror') {
        const error = `${(_b = doc === null || doc === void 0 ? void 0 : doc.firstChild) === null || _b === void 0 ? void 0 : _b.textContent}`;
        return (0, snabbdom_1.h)('parsererror', [error]);
    }
    delimited = false;
    vdom = null;
    recurse(doc, toVNode);
    if (vdom === null)
        return null;
    return stripVNode(vdom);
}
exports["default"] = virtualizeString;


/***/ }),

/***/ "./node_modules/sprotty/lib/model-source/commit-model.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/model-source/commit-model.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CommitModelCommand = exports.CommitModelAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const command_1 = __webpack_require__(/*! ../base/commands/command */ "./node_modules/sprotty/lib/base/commands/command.js");
const types_1 = __webpack_require__(/*! ../base/types */ "./node_modules/sprotty/lib/base/types.js");
const model_source_1 = __webpack_require__(/*! ./model-source */ "./node_modules/sprotty/lib/model-source/model-source.js");
var CommitModelAction;
(function (CommitModelAction) {
    CommitModelAction.KIND = 'commitModel';
    function create() {
        return {
            kind: CommitModelAction.KIND
        };
    }
    CommitModelAction.create = create;
})(CommitModelAction = exports.CommitModelAction || (exports.CommitModelAction = {}));
let CommitModelCommand = class CommitModelCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        this.newModel = context.modelFactory.createSchema(context.root);
        return this.doCommit(this.newModel, context.root, true);
    }
    doCommit(model, result, doSetOriginal) {
        const commitResult = this.modelSource.commitModel(model);
        if (commitResult instanceof Promise) {
            return commitResult.then(originalModel => {
                if (doSetOriginal)
                    this.originalModel = originalModel;
                return result;
            });
        }
        else {
            if (doSetOriginal)
                this.originalModel = commitResult;
            return result;
        }
    }
    undo(context) {
        return this.doCommit(this.originalModel, context.root, false);
    }
    redo(context) {
        return this.doCommit(this.newModel, context.root, false);
    }
};
CommitModelCommand.KIND = CommitModelAction.KIND;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ModelSource),
    __metadata("design:type", model_source_1.ModelSource)
], CommitModelCommand.prototype, "modelSource", void 0);
CommitModelCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], CommitModelCommand);
exports.CommitModelCommand = CommitModelCommand;


/***/ }),

/***/ "./node_modules/sprotty/lib/model-source/di.config.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/model-source/di.config.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const command_registration_1 = __webpack_require__(/*! ../base/commands/command-registration */ "./node_modules/sprotty/lib/base/commands/command-registration.js");
const types_1 = __webpack_require__(/*! ../base/types */ "./node_modules/sprotty/lib/base/types.js");
const commit_model_1 = __webpack_require__(/*! ./commit-model */ "./node_modules/sprotty/lib/model-source/commit-model.js");
const model_source_1 = __webpack_require__(/*! ./model-source */ "./node_modules/sprotty/lib/model-source/model-source.js");
/**
 * This container module does NOT provide any binding for TYPES.ModelSource because that needs to be
 * done according to the needs of the application. You can choose between a local (LocalModelSource)
 * and a remote (e.g. WebSocketDiagramServer) implementation.
 */
const modelSourceModule = new inversify_1.ContainerModule((bind, _unbind, isBound) => {
    bind(types_1.TYPES.ModelSourceProvider).toProvider((context) => {
        return () => {
            return new Promise((resolve) => {
                resolve(context.container.get(types_1.TYPES.ModelSource));
            });
        };
    });
    (0, command_registration_1.configureCommand)({ bind, isBound }, commit_model_1.CommitModelCommand);
    bind(types_1.TYPES.IActionHandlerInitializer).toService(types_1.TYPES.ModelSource);
    bind(model_source_1.ComputedBoundsApplicator).toSelf().inSingletonScope();
});
exports["default"] = modelSourceModule;


/***/ }),

/***/ "./node_modules/sprotty/lib/model-source/diagram-server.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sprotty/lib/model-source/diagram-server.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagramServer = exports.DiagramServerProxy = exports.ServerStatusAction = exports.isActionMessage = void 0;
const file_saver_1 = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "./node_modules/sprotty-protocol/lib/index.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const object_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/object */ "./node_modules/sprotty-protocol/lib/utils/object.js");
const set_model_1 = __webpack_require__(/*! ../base/features/set-model */ "./node_modules/sprotty/lib/base/features/set-model.js");
const types_1 = __webpack_require__(/*! ../base/types */ "./node_modules/sprotty/lib/base/types.js");
const bounds_manipulation_1 = __webpack_require__(/*! ../features/bounds/bounds-manipulation */ "./node_modules/sprotty/lib/features/bounds/bounds-manipulation.js");
const svg_exporter_1 = __webpack_require__(/*! ../features/export/svg-exporter */ "./node_modules/sprotty/lib/features/export/svg-exporter.js");
const update_model_1 = __webpack_require__(/*! ../features/update/update-model */ "./node_modules/sprotty/lib/features/update/update-model.js");
const model_source_1 = __webpack_require__(/*! ./model-source */ "./node_modules/sprotty/lib/model-source/model-source.js");
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function isActionMessage(object) {
    return (0, object_1.hasOwnProperty)(object, 'action');
}
exports.isActionMessage = isActionMessage;
/**
 * Sent by the external server when to signal a state change.
 */
class ServerStatusAction {
    constructor() {
        this.kind = ServerStatusAction.KIND;
    }
}
exports.ServerStatusAction = ServerStatusAction;
ServerStatusAction.KIND = 'serverStatus';
const receivedFromServerProperty = '__receivedFromServer';
/**
 * A ModelSource that communicates with an external model provider, e.g.
 * a model editor.
 *
 * This class defines which actions are sent to and received from the
 * external model source.
 */
let DiagramServerProxy = class DiagramServerProxy extends model_source_1.ModelSource {
    constructor() {
        super(...arguments);
        this.currentRoot = {
            type: 'NONE',
            id: 'ROOT'
        };
    }
    initialize(registry) {
        super.initialize(registry);
        // Register this model source
        registry.register(actions_1.ComputedBoundsAction.KIND, this);
        registry.register(bounds_manipulation_1.RequestBoundsCommand.KIND, this);
        registry.register(actions_1.RequestPopupModelAction.KIND, this);
        registry.register(actions_1.CollapseExpandAction.KIND, this);
        registry.register(actions_1.CollapseExpandAllAction.KIND, this);
        registry.register(sprotty_protocol_1.OpenAction.KIND, this);
        registry.register(ServerStatusAction.KIND, this);
        if (!this.clientId)
            this.clientId = this.viewerOptions.baseDiv;
    }
    handle(action) {
        const forwardToServer = this.handleLocally(action);
        if (forwardToServer)
            this.forwardToServer(action);
    }
    forwardToServer(action) {
        const message = {
            clientId: this.clientId,
            action: action
        };
        this.logger.log(this, 'sending', message);
        this.sendMessage(message);
    }
    messageReceived(data) {
        const object = typeof (data) === 'string' ? JSON.parse(data) : data;
        if (isActionMessage(object) && object.action) {
            if (!object.clientId || object.clientId === this.clientId) {
                object.action[receivedFromServerProperty] = true;
                this.logger.log(this, 'receiving', object);
                this.actionDispatcher.dispatch(object.action).then(() => {
                    this.storeNewModel(object.action);
                });
            }
        }
        else {
            this.logger.error(this, 'received data is not an action message', object);
        }
    }
    /**
     * Check whether the given action should be handled locally. Returns true if the action should
     * still be sent to the server, and false if it's only handled locally.
     */
    handleLocally(action) {
        this.storeNewModel(action);
        switch (action.kind) {
            case actions_1.ComputedBoundsAction.KIND:
                return this.handleComputedBounds(action);
            case actions_1.RequestModelAction.KIND:
                return this.handleRequestModel(action);
            case bounds_manipulation_1.RequestBoundsCommand.KIND:
                return false;
            case svg_exporter_1.ExportSvgAction.KIND:
                return this.handleExportSvgAction(action);
            case ServerStatusAction.KIND:
                return this.handleServerStateAction(action);
        }
        return !action[receivedFromServerProperty];
    }
    /**
     * Put the new model contained in the given action into the model storage, if there is any.
     */
    storeNewModel(action) {
        if (action.kind === set_model_1.SetModelCommand.KIND
            || action.kind === update_model_1.UpdateModelCommand.KIND
            || action.kind === bounds_manipulation_1.RequestBoundsCommand.KIND) {
            const newRoot = action.newRoot;
            if (newRoot) {
                this.currentRoot = newRoot;
                if (action.kind === set_model_1.SetModelCommand.KIND || action.kind === update_model_1.UpdateModelCommand.KIND) {
                    this.lastSubmittedModelType = newRoot.type;
                }
            }
        }
    }
    handleRequestModel(action) {
        const newOptions = Object.assign({ needsClientLayout: this.viewerOptions.needsClientLayout, needsServerLayout: this.viewerOptions.needsServerLayout }, action.options);
        const newAction = Object.assign(Object.assign({}, action), { options: newOptions });
        this.forwardToServer(newAction);
        return false;
    }
    /**
     * If the server requires to compute a layout, the computed bounds are forwarded. Otherwise they
     * are applied to the current model locally and a model update is triggered.
     */
    handleComputedBounds(action) {
        if (this.viewerOptions.needsServerLayout) {
            return true;
        }
        else {
            const root = this.currentRoot;
            this.computedBoundsApplicator.apply(root, action);
            if (root.type === this.lastSubmittedModelType) {
                this.actionDispatcher.dispatch(actions_1.UpdateModelAction.create(root));
            }
            else {
                this.actionDispatcher.dispatch(actions_1.SetModelAction.create(root));
            }
            this.lastSubmittedModelType = root.type;
            return false;
        }
    }
    handleExportSvgAction(action) {
        const blob = new Blob([action.svg], { type: "text/plain;charset=utf-8" });
        (0, file_saver_1.saveAs)(blob, "diagram.svg");
        return false;
    }
    handleServerStateAction(action) {
        return false;
    }
    commitModel(newRoot) {
        const previousRoot = this.currentRoot;
        this.currentRoot = newRoot;
        return previousRoot;
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], DiagramServerProxy.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(model_source_1.ComputedBoundsApplicator),
    __metadata("design:type", model_source_1.ComputedBoundsApplicator)
], DiagramServerProxy.prototype, "computedBoundsApplicator", void 0);
DiagramServerProxy = __decorate([
    (0, inversify_1.injectable)()
], DiagramServerProxy);
exports.DiagramServerProxy = DiagramServerProxy;
/**
 * @deprecated Use `DiagramServerProxy` instead.
 */
exports.DiagramServer = DiagramServerProxy;


/***/ }),

/***/ "./node_modules/sprotty/lib/model-source/local-model-source.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sprotty/lib/model-source/local-model-source.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocalModelSource = void 0;
const file_saver_1 = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "./node_modules/sprotty-protocol/lib/utils/model-utils.js");
const types_1 = __webpack_require__(/*! ../base/types */ "./node_modules/sprotty/lib/base/types.js");
const smodel_factory_1 = __webpack_require__(/*! ../base/model/smodel-factory */ "./node_modules/sprotty/lib/base/model/smodel-factory.js");
const viewport_1 = __webpack_require__(/*! ../features/viewport/viewport */ "./node_modules/sprotty/lib/features/viewport/viewport.js");
const svg_exporter_1 = __webpack_require__(/*! ../features/export/svg-exporter */ "./node_modules/sprotty/lib/features/export/svg-exporter.js");
const model_matching_1 = __webpack_require__(/*! ../features/update/model-matching */ "./node_modules/sprotty/lib/features/update/model-matching.js");
const select_1 = __webpack_require__(/*! ../features/select/select */ "./node_modules/sprotty/lib/features/select/select.js");
const model_source_1 = __webpack_require__(/*! ./model-source */ "./node_modules/sprotty/lib/model-source/model-source.js");
/**
 * A model source that allows to set and modify the model through function calls.
 * This class can be used as a facade over the action-based API of sprotty. It handles
 * actions for bounds calculation and model updates.
 */
let LocalModelSource = class LocalModelSource extends model_source_1.ModelSource {
    constructor() {
        super(...arguments);
        this.currentRoot = smodel_factory_1.EMPTY_ROOT;
    }
    get model() {
        return this.currentRoot;
    }
    set model(root) {
        this.setModel(root);
    }
    initialize(registry) {
        super.initialize(registry);
        // Register this model source
        registry.register(actions_1.ComputedBoundsAction.KIND, this);
        registry.register(actions_1.RequestPopupModelAction.KIND, this);
    }
    /**
     * Set the model without incremental update.
     */
    setModel(newRoot) {
        this.currentRoot = newRoot;
        return this.submitModel(newRoot, false);
    }
    commitModel(newRoot) {
        const previousRoot = this.currentRoot;
        this.currentRoot = newRoot;
        return previousRoot;
    }
    /**
     * Apply an incremental update to the model with an animation showing the transition to
     * the new state. If `newRoot` is undefined, the current root is submitted; in that case
     * it is assumed that it has been modified before.
     */
    updateModel(newRoot) {
        if (newRoot === undefined) {
            return this.submitModel(this.currentRoot, true);
        }
        else {
            this.currentRoot = newRoot;
            return this.submitModel(newRoot, true);
        }
    }
    /**
     * Get the current selection from the model.
     */
    async getSelection() {
        const res = await this.actionDispatcher.request(select_1.GetSelectionAction.create());
        const result = [];
        this.gatherSelectedElements(this.currentRoot, new Set(res.selectedElementsIDs), result);
        return result;
    }
    gatherSelectedElements(element, selected, result) {
        if (selected.has(element.id)) {
            result.push(element);
        }
        if (element.children) {
            for (const child of element.children) {
                this.gatherSelectedElements(child, selected, result);
            }
        }
    }
    /**
     * Get the current viewport from the model.
     */
    async getViewport() {
        const res = await this.actionDispatcher.request(viewport_1.GetViewportAction.create());
        return {
            scroll: res.viewport.scroll,
            zoom: res.viewport.zoom,
            canvasBounds: res.canvasBounds
        };
    }
    /**
     * If client layout is active, run a `RequestBoundsAction` and wait for the resulting
     * `ComputedBoundsAction`, otherwise call `doSubmitModel(…)` directly.
     */
    async submitModel(newRoot, update, cause) {
        if (this.viewerOptions.needsClientLayout) {
            const computedBounds = await this.actionDispatcher.request(actions_1.RequestBoundsAction.create(newRoot));
            const index = this.computedBoundsApplicator.apply(this.currentRoot, computedBounds);
            await this.doSubmitModel(newRoot, true, cause, index);
        }
        else {
            await this.doSubmitModel(newRoot, update, cause);
        }
    }
    /**
     * Submit the given model with an `UpdateModelAction` or a `SetModelAction` depending on the
     * `update` argument. If available, the model layout engine is invoked first.
     */
    async doSubmitModel(newRoot, update, cause, index) {
        if (this.layoutEngine !== undefined) {
            try {
                const layoutResult = this.layoutEngine.layout(newRoot, index);
                if (layoutResult instanceof Promise)
                    newRoot = await layoutResult;
                else if (layoutResult !== undefined)
                    newRoot = layoutResult;
            }
            catch (error) {
                this.logger.error(this, error.toString(), error.stack);
            }
        }
        const lastSubmittedModelType = this.lastSubmittedModelType;
        this.lastSubmittedModelType = newRoot.type;
        if (cause && cause.kind === actions_1.RequestModelAction.KIND && cause.requestId) {
            const request = cause;
            await this.actionDispatcher.dispatch(actions_1.SetModelAction.create(newRoot, request.requestId));
        }
        else if (update && newRoot.type === lastSubmittedModelType) {
            const input = Array.isArray(update) ? update : newRoot;
            await this.actionDispatcher.dispatch(actions_1.UpdateModelAction.create(input, { animate: true, cause }));
        }
        else {
            await this.actionDispatcher.dispatch(actions_1.SetModelAction.create(newRoot));
        }
    }
    /**
     * Modify the current model with an array of matches.
     */
    applyMatches(matches) {
        const root = this.currentRoot;
        (0, model_matching_1.applyMatches)(root, matches);
        return this.submitModel(root, matches);
    }
    /**
     * Modify the current model by adding new elements.
     */
    addElements(elements) {
        const matches = [];
        for (const e of elements) {
            const anye = e;
            if (anye.element !== undefined && anye.parentId !== undefined) {
                matches.push({
                    right: anye.element,
                    rightParentId: anye.parentId
                });
            }
            else if (anye.id !== undefined) {
                matches.push({
                    right: anye,
                    rightParentId: this.currentRoot.id
                });
            }
        }
        return this.applyMatches(matches);
    }
    /**
     * Modify the current model by removing elements.
     */
    removeElements(elements) {
        const matches = [];
        const index = new model_utils_1.SModelIndex();
        index.add(this.currentRoot);
        for (const e of elements) {
            const anye = e;
            if (anye.elementId !== undefined && anye.parentId !== undefined) {
                const element = index.getById(anye.elementId);
                if (element !== undefined) {
                    matches.push({
                        left: element,
                        leftParentId: anye.parentId
                    });
                }
            }
            else {
                const element = index.getById(anye);
                if (element !== undefined) {
                    matches.push({
                        left: element,
                        leftParentId: this.currentRoot.id
                    });
                }
            }
        }
        return this.applyMatches(matches);
    }
    // ----- Methods for handling incoming actions ----------------------------
    handle(action) {
        switch (action.kind) {
            case actions_1.RequestModelAction.KIND:
                this.handleRequestModel(action);
                break;
            case actions_1.ComputedBoundsAction.KIND:
                this.computedBoundsApplicator.apply(this.currentRoot, action);
                break;
            case actions_1.RequestPopupModelAction.KIND:
                this.handleRequestPopupModel(action);
                break;
            case svg_exporter_1.ExportSvgAction.KIND:
                this.handleExportSvgAction(action);
                break;
        }
    }
    handleRequestModel(action) {
        this.submitModel(this.currentRoot, false, action);
    }
    handleRequestPopupModel(action) {
        if (this.popupModelProvider !== undefined) {
            const element = (0, model_utils_1.findElement)(this.currentRoot, action.elementId);
            const popupRoot = this.popupModelProvider.getPopupModel(action, element);
            if (popupRoot !== undefined) {
                popupRoot.canvasBounds = action.bounds;
                this.actionDispatcher.dispatch(actions_1.SetPopupModelAction.create(popupRoot, action.requestId));
            }
        }
    }
    handleExportSvgAction(action) {
        const blob = new Blob([action.svg], { type: "text/plain;charset=utf-8" });
        (0, file_saver_1.saveAs)(blob, "diagram.svg");
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ILogger),
    __metadata("design:type", Object)
], LocalModelSource.prototype, "logger", void 0);
__decorate([
    (0, inversify_1.inject)(model_source_1.ComputedBoundsApplicator),
    __metadata("design:type", model_source_1.ComputedBoundsApplicator)
], LocalModelSource.prototype, "computedBoundsApplicator", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IPopupModelProvider),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], LocalModelSource.prototype, "popupModelProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IModelLayoutEngine),
    (0, inversify_1.optional)(),
    __metadata("design:type", Object)
], LocalModelSource.prototype, "layoutEngine", void 0);
LocalModelSource = __decorate([
    (0, inversify_1.injectable)()
], LocalModelSource);
exports.LocalModelSource = LocalModelSource;


/***/ }),

/***/ "./node_modules/sprotty/lib/model-source/logging.js":
/*!**********************************************************!*\
  !*** ./node_modules/sprotty/lib/model-source/logging.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ForwardingLogger = exports.LoggingAction = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const logging_1 = __webpack_require__(/*! ../utils/logging */ "./node_modules/sprotty/lib/utils/logging.js");
const types_1 = __webpack_require__(/*! ../base/types */ "./node_modules/sprotty/lib/base/types.js");
var LoggingAction;
(function (LoggingAction) {
    LoggingAction.KIND = 'logging';
    function create(options) {
        return Object.assign({ kind: LoggingAction.KIND }, options);
    }
    LoggingAction.create = create;
})(LoggingAction = exports.LoggingAction || (exports.LoggingAction = {}));
/**
 * A logger that forwards messages of type 'error', 'warn', and 'info' to the model source.
 */
let ForwardingLogger = class ForwardingLogger {
    error(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.error)
            this.forward(thisArg, message, logging_1.LogLevel.error, params);
    }
    warn(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.warn)
            this.forward(thisArg, message, logging_1.LogLevel.warn, params);
    }
    info(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.info)
            this.forward(thisArg, message, logging_1.LogLevel.info, params);
    }
    log(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.log) {
            // We cannot forward 'log' level messages since that would lead to endless loops
            try {
                const caller = typeof thisArg === 'object' ? thisArg.constructor.name : String(thisArg);
                console.log.apply(thisArg, [caller + ': ' + message, ...params]);
            }
            catch (error) { }
        }
    }
    forward(thisArg, message, logLevel, params) {
        const date = new Date();
        const action = LoggingAction.create({
            message,
            severity: logging_1.LogLevel[logLevel],
            time: date.toLocaleTimeString(),
            caller: typeof thisArg === 'object' ? thisArg.constructor.name : String(thisArg),
            params: params.map(p => JSON.stringify(p))
        });
        this.modelSourceProvider().then(modelSource => {
            try {
                modelSource.handle(action);
            }
            catch (error) {
                try {
                    console.log.apply(thisArg, [message, action, error]);
                }
                catch (e) { }
            }
        });
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ModelSourceProvider),
    __metadata("design:type", Function)
], ForwardingLogger.prototype, "modelSourceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.LogLevel),
    __metadata("design:type", Number)
], ForwardingLogger.prototype, "logLevel", void 0);
ForwardingLogger = __decorate([
    (0, inversify_1.injectable)()
], ForwardingLogger);
exports.ForwardingLogger = ForwardingLogger;


/***/ }),

/***/ "./node_modules/sprotty/lib/model-source/model-source.js":
/*!***************************************************************!*\
  !*** ./node_modules/sprotty/lib/model-source/model-source.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ComputedBoundsApplicator = exports.ModelSource = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const actions_1 = __webpack_require__(/*! sprotty-protocol/lib/actions */ "./node_modules/sprotty-protocol/lib/actions.js");
const model_utils_1 = __webpack_require__(/*! sprotty-protocol/lib/utils/model-utils */ "./node_modules/sprotty-protocol/lib/utils/model-utils.js");
const types_1 = __webpack_require__(/*! ../base/types */ "./node_modules/sprotty/lib/base/types.js");
const svg_exporter_1 = __webpack_require__(/*! ../features/export/svg-exporter */ "./node_modules/sprotty/lib/features/export/svg-exporter.js");
/**
 * A model source is serving the model to the event cycle. It represents
 * the entry point to the client for external sources, such as model
 * editors.
 *
 * As an IActionHandler it listens to actions in and reacts to them with
 * commands or actions if necessary. This way, you can implement action
 * protocols between the client and the outside world.
 *
 * There are two default implementations for a ModelSource:
 * <ul>
 * <li>the LocalModelSource handles the actions to calculate bounds and
 * set/update the model</li>
 * <li>the DiagramServer connects via websocket to a remote source. It
 * can be used to connect to a model editor that provides the model,
 * layouts diagrams, transfers selection and answers model queries from
 * the client.</li>
 */
let ModelSource = class ModelSource {
    initialize(registry) {
        // Register this model source
        registry.register(actions_1.RequestModelAction.KIND, this);
        registry.register(svg_exporter_1.ExportSvgAction.KIND, this);
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ModelSource.prototype, "actionDispatcher", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ModelSource.prototype, "viewerOptions", void 0);
ModelSource = __decorate([
    (0, inversify_1.injectable)()
], ModelSource);
exports.ModelSource = ModelSource;
let ComputedBoundsApplicator = class ComputedBoundsApplicator {
    apply(root, action) {
        const index = new model_utils_1.SModelIndex();
        index.add(root);
        for (const b of action.bounds) {
            const element = index.getById(b.elementId);
            if (element !== undefined)
                this.applyBounds(element, b.newPosition, b.newSize);
        }
        if (action.alignments !== undefined) {
            for (const a of action.alignments) {
                const element = index.getById(a.elementId);
                if (element !== undefined)
                    this.applyAlignment(element, a.newAlignment);
            }
        }
        return index;
    }
    applyAlignment(element, newAlignment) {
        const e = element;
        e.alignment = { x: newAlignment.x, y: newAlignment.y };
    }
    applyBounds(element, newPosition, newSize) {
        const e = element;
        if (newPosition)
            e.position = Object.assign({}, newPosition);
        e.size = Object.assign({}, newSize);
    }
};
ComputedBoundsApplicator = __decorate([
    (0, inversify_1.injectable)()
], ComputedBoundsApplicator);
exports.ComputedBoundsApplicator = ComputedBoundsApplicator;


/***/ }),

/***/ "./node_modules/sprotty/lib/model-source/websocket.js":
/*!************************************************************!*\
  !*** ./node_modules/sprotty/lib/model-source/websocket.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebSocketDiagramServer = exports.WebSocketDiagramServerProxy = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const diagram_server_1 = __webpack_require__(/*! ./diagram-server */ "./node_modules/sprotty/lib/model-source/diagram-server.js");
/**
 * An external ModelSource that connects to the model provider using a websocket.
 */
let WebSocketDiagramServerProxy = class WebSocketDiagramServerProxy extends diagram_server_1.DiagramServerProxy {
    listen(webSocket) {
        webSocket.addEventListener('message', event => {
            this.messageReceived(event.data);
        });
        webSocket.addEventListener('error', event => {
            this.logger.error(this, 'error event received', event);
        });
        this.webSocket = webSocket;
    }
    disconnect() {
        if (this.webSocket) {
            this.webSocket.close();
            this.webSocket = undefined;
        }
    }
    sendMessage(message) {
        if (this.webSocket) {
            this.webSocket.send(JSON.stringify(message));
        }
        else {
            throw new Error('WebSocket is not connected');
        }
    }
};
WebSocketDiagramServerProxy = __decorate([
    (0, inversify_1.injectable)()
], WebSocketDiagramServerProxy);
exports.WebSocketDiagramServerProxy = WebSocketDiagramServerProxy;
/**
 * @deprecated Use `WebSocketDiagramServerProxy` instead;
 */
exports.WebSocketDiagramServer = WebSocketDiagramServerProxy;


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/browser.js":
/*!***************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/browser.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hitsMouseEvent = exports.getWindowScroll = exports.isCrossSite = exports.isMac = exports.isCtrlOrCmd = void 0;
const sprotty_protocol_1 = __webpack_require__(/*! sprotty-protocol */ "./node_modules/sprotty-protocol/lib/index.js");
/**
 * Returns whether the mouse or keyboard event includes the CMD key
 * on Mac or CTRL key on Linux / others.
 */
function isCtrlOrCmd(event) {
    if (isMac())
        return event.metaKey;
    else
        return event.ctrlKey;
}
exports.isCtrlOrCmd = isCtrlOrCmd;
function isMac() {
    return window.navigator.userAgent.indexOf("Mac") !== -1;
}
exports.isMac = isMac;
function isCrossSite(url) {
    if (url && typeof window !== 'undefined' && window.location) {
        let baseURL = '';
        if (window.location.protocol)
            baseURL += window.location.protocol + '//';
        if (window.location.host)
            baseURL += window.location.host;
        return baseURL.length > 0 && !url.startsWith(baseURL);
    }
    return false;
}
exports.isCrossSite = isCrossSite;
/**
 * Returns the amount of scroll of the browser window as a point.
 */
function getWindowScroll() {
    if (typeof window === 'undefined') {
        return sprotty_protocol_1.Point.ORIGIN;
    }
    return {
        x: window.pageXOffset,
        y: window.pageYOffset
    };
}
exports.getWindowScroll = getWindowScroll;
/**
 * Checks whether the given mouse event hits the given DOM element.
 */
function hitsMouseEvent(child, event) {
    const clientRect = child.getBoundingClientRect();
    return event.clientX >= clientRect.left && event.clientX <= clientRect.right
        && event.clientY >= clientRect.top && event.clientY <= clientRect.bottom;
}
exports.hitsMouseEvent = hitsMouseEvent;


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/codicon.js":
/*!***************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/codicon.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2021 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.codiconCSSClasses = exports.codiconCSSString = exports.ANIMATION_SPIN = exports.ACTION_ITEM = void 0;
exports.ACTION_ITEM = 'action-item';
exports.ANIMATION_SPIN = 'animation-spin';
function codiconCSSString(codiconId, actionItem = false, animationSpin = false, additionalCSS = []) {
    return codiconCSSClasses(codiconId, actionItem, animationSpin, additionalCSS).join(' ');
}
exports.codiconCSSString = codiconCSSString;
function codiconCSSClasses(codiconId, actionItem = false, animationSpin = false, additionalCSS = []) {
    const cssClassArray = ['codicon', `codicon-${codiconId}`];
    if (actionItem) {
        cssClassArray.push(exports.ACTION_ITEM);
    }
    if (animationSpin) {
        cssClassArray.push(exports.ANIMATION_SPIN);
    }
    if (additionalCSS.length > 0) {
        cssClassArray.push(...additionalCSS);
    }
    return cssClassArray;
}
exports.codiconCSSClasses = codiconCSSClasses;


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/color.js":
/*!*************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/color.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorMap = exports.toSVG = exports.rgb = void 0;
function rgb(red, green, blue) {
    return {
        red: red,
        green: green,
        blue: blue
    };
}
exports.rgb = rgb;
function toSVG(c) {
    return 'rgb(' + c.red + ',' + c.green + ',' + c.blue + ')';
}
exports.toSVG = toSVG;
class ColorMap {
    constructor(stops) {
        this.stops = stops;
    }
    getColor(t) {
        t = Math.max(0, Math.min(0.99999999, t));
        const i = Math.floor(t * this.stops.length);
        return this.stops[i];
    }
}
exports.ColorMap = ColorMap;


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/geometry.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/geometry.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2022 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.intersection = exports.PointToPointLine = exports.Diamond = exports.linear = exports.almostEquals = exports.toRadians = exports.toDegrees = exports.magnitude = exports.normalize = exports.shiftTowards = exports.angleBetweenPoints = exports.angleOfPoint = exports.maxDistance = exports.manhattanDistance = exports.euclideanDistance = exports.Direction = exports.includes = exports.centerOfLine = exports.center = exports.translate = exports.combine = exports.isBounds = exports.EMPTY_BOUNDS = exports.isValidDimension = exports.EMPTY_DIMENSION = exports.pointEquals = exports.subtract = exports.add = exports.ORIGIN_POINT = void 0;
/**
 * (x,y) coordinates of the origin.
 *
 * @deprecated Use `Point.ORIGIN` from `sprotty-protocol` instead.
 */
exports.ORIGIN_POINT = Object.freeze({
    x: 0,
    y: 0
});
/**
 * Adds two points.
 * @param {Point} p1 - First point
 * @param {Point} p2 - Second point
 * @returns {Point} The sum of the two points
 *
 * @deprecated Use `Point.add` from `sprotty-protocol` instead.
 */
function add(p1, p2) {
    return {
        x: p1.x + p2.x,
        y: p1.y + p2.y
    };
}
exports.add = add;
/**
 * Subtracts two points.
 * @param {Point} p1 - First point
 * @param {Point} p2 - Second point
 * @returns {Point} The difference of the two points
 *
 * @deprecated Use `Point.subtract` from `sprotty-protocol` instead.
 */
function subtract(p1, p2) {
    return {
        x: p1.x - p2.x,
        y: p1.y - p2.y
    };
}
exports.subtract = subtract;
/**
 * Specifies whether a point has exactly the same coordinates as another point.
 * @param {Point} point1 a point
 * @param {Point} point2 another point
 * @returns {boolean} `true` if `point1` has exactly the same `x` and `y` values as `point2`, `false` otherwise.
 *
 * @deprecated Use `Point.equals` from `sprotty-protocol` instead.
 */
function pointEquals(point1, point2) {
    return point1.x === point2.x && point1.y === point2.y;
}
exports.pointEquals = pointEquals;
/**
 * A dimension with both width and height set to a negative value, which is considered as undefined.
 *
 * @deprecated Use `Dimension.EMPTY` from `sprotty-protocol` instead.
 */
exports.EMPTY_DIMENSION = Object.freeze({
    width: -1,
    height: -1
});
/**
 * Checks whether the given dimention is valid, i.e. the width and height are non-zero.
 * @param {Dimension} b - Dimension object
 * @returns {boolean}
 *
 * @deprecated Use `Dimension.isValid` from `sprotty-protocol` instead.
 */
function isValidDimension(d) {
    return d.width >= 0 && d.height >= 0;
}
exports.isValidDimension = isValidDimension;
/**
 * @deprecated Use `Bounds.EMPTY` from `sprotty-protocol` instead.
 */
exports.EMPTY_BOUNDS = Object.freeze({
    x: 0,
    y: 0,
    width: -1,
    height: -1
});
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function isBounds(element) {
    return 'x' in element
        && 'y' in element
        && 'width' in element
        && 'height' in element;
}
exports.isBounds = isBounds;
/**
 * Combines the bounds of two objects into one, so that the new bounds
 * are the minimum bounds that covers both of the original bounds.
 * @param {Bounds} b0 - First bounds object
 * @param {Bounds} b1 - Second bounds object
 * @returns {Bounds} The combined bounds
 *
 * @deprecated Use `Bounds.combine` from `sprotty-protocol` instead.
 */
function combine(b0, b1) {
    if (!isValidDimension(b0))
        return isValidDimension(b1) ? b1 : exports.EMPTY_BOUNDS;
    if (!isValidDimension(b1))
        return b0;
    const minX = Math.min(b0.x, b1.x);
    const minY = Math.min(b0.y, b1.y);
    const maxX = Math.max(b0.x + (b0.width >= 0 ? b0.width : 0), b1.x + (b1.width >= 0 ? b1.width : 0));
    const maxY = Math.max(b0.y + (b0.height >= 0 ? b0.height : 0), b1.y + (b1.height >= 0 ? b1.height : 0));
    return {
        x: minX, y: minY, width: maxX - minX, height: maxY - minY
    };
}
exports.combine = combine;
/**
 * Translates the given bounds.
 * @param {Bounds} b - Bounds object
 * @param {Point} p - Vector by which to translate the bounds
 * @returns {Bounds} The translated bounds
 *
 * @deprecated Use `Bounds.translate` from `sprotty-protocol` instead.
 */
function translate(b, p) {
    return {
        x: b.x + p.x,
        y: b.y + p.y,
        width: b.width,
        height: b.height
    };
}
exports.translate = translate;
/**
 * Returns the center point of the bounds of an object
 * @param {Bounds} b - Bounds object
 * @returns {Point} the center point
 *
 * @deprecated Use `Bounds.center` from `sprotty-protocol` instead.
 */
function center(b) {
    return {
        x: b.x + (b.width >= 0 ? 0.5 * b.width : 0),
        y: b.y + (b.height >= 0 ? 0.5 * b.height : 0)
    };
}
exports.center = center;
/**
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function centerOfLine(s, e) {
    const b = {
        x: s.x > e.x ? e.x : s.x,
        y: s.y > e.y ? e.y : s.y,
        width: Math.abs(e.x - s.x),
        height: Math.abs(e.y - s.y)
    };
    return center(b);
}
exports.centerOfLine = centerOfLine;
/**
 * Checks whether the point p is included in the bounds b.
 *
 * @deprecated Use `Bounds.includes` from `sprotty-protocol` instead.
 */
function includes(b, p) {
    return p.x >= b.x && p.x <= b.x + b.width && p.y >= b.y && p.y <= b.y + b.height;
}
exports.includes = includes;
/**
 * Enumeration of possible directions (left, right, up, down)
 * @deprecated do we use this? We should rather use a string type
 */
var Direction;
(function (Direction) {
    Direction[Direction["left"] = 0] = "left";
    Direction[Direction["right"] = 1] = "right";
    Direction[Direction["up"] = 2] = "up";
    Direction[Direction["down"] = 3] = "down";
})(Direction = exports.Direction || (exports.Direction = {}));
/**
 * Returns the "straight line" distance between two points.
 * @param {Point} a - First point
 * @param {Point} b - Second point
 * @returns {number} The Eucledian distance
 *
 * @deprecated Use `Point.euclideanDistance` from `sprotty-protocol` instead.
 */
function euclideanDistance(a, b) {
    const dx = b.x - a.x;
    const dy = b.y - a.y;
    return Math.sqrt(dx * dx + dy * dy);
}
exports.euclideanDistance = euclideanDistance;
/**
 * Returns the distance between two points in a grid, using a
 * strictly vertical and/or horizontal path (versus straight line).
 * @param {Point} a - First point
 * @param {Point} b - Second point
 * @returns {number} The Manhattan distance
 *
 * @deprecated Use `Point.manhattanDistance` from `sprotty-protocol` instead.
 */
function manhattanDistance(a, b) {
    return Math.abs(b.x - a.x) + Math.abs(b.y - a.y);
}
exports.manhattanDistance = manhattanDistance;
/**
 * Returns the maximum of the horizontal and the vertical distance.
 * @param {Point} a - First point
 * @param {Point} b - Second point
 * @returns {number} The maximum distance
 *
 * @deprecated Use `Point.maxDistance` from `sprotty-protocol` instead.
 */
function maxDistance(a, b) {
    return Math.max(Math.abs(b.x - a.x), Math.abs(b.y - a.y));
}
exports.maxDistance = maxDistance;
/**
 * Computes the angle in radians of the given point to the x-axis of the coordinate system.
 * The result is in the range [-pi, pi].
 * @param {Point} p - A point in the Eucledian plane
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function angleOfPoint(p) {
    return Math.atan2(p.y, p.x);
}
exports.angleOfPoint = angleOfPoint;
/**
 * Computes the angle in radians between the two given points (relative to the origin of the coordinate system).
 * The result is in the range [0, pi]. Returns NaN if the points are equal.
 * @param {Point} a - First point
 * @param {Point} b - Second point
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function angleBetweenPoints(a, b) {
    const lengthProduct = Math.sqrt((a.x * a.x + a.y * a.y) * (b.x * b.x + b.y * b.y));
    if (isNaN(lengthProduct) || lengthProduct === 0)
        return NaN;
    const dotProduct = a.x * b.x + a.y * b.y;
    return Math.acos(dotProduct / lengthProduct);
}
exports.angleBetweenPoints = angleBetweenPoints;
/**
 * Computes a point that is the original `point` shifted towards `refPoint` by the given `distance`.
 * @param {Point} point - Point to shift
 * @param {Point} refPoint - Point to shift towards
 * @param {Point} distance - Distance to shift
 *
 * @deprecated Use `Point.shiftTowards` from `sprotty-protocol` instead.
 */
function shiftTowards(point, refPoint, distance) {
    const diff = subtract(refPoint, point);
    const normalized = normalize(diff);
    const shift = { x: normalized.x * distance, y: normalized.y * distance };
    return add(point, shift);
}
exports.shiftTowards = shiftTowards;
/**
 * Computes the normalized vector from the vector given in `point`; that is, computing its unit vector.
 * @param {Point} point - Point representing the vector to be normalized
 * @returns {Point} The normalized point
 *
 * @deprecated Use `Point.normalize` from `sprotty-protocol` instead.
 */
function normalize(point) {
    const mag = magnitude(point);
    if (mag === 0 || mag === 1) {
        return exports.ORIGIN_POINT;
    }
    return {
        x: point.x / mag,
        y: point.y / mag
    };
}
exports.normalize = normalize;
/**
 * Computes the magnitude of the vector given in `point`.
 * @param {Point} point - Point representing the vector to compute the magnitude for
 * @returns {number} The magnitude or also known as length of the `point`
 *
 * @deprecated Use `Point.magnitude` from `sprotty-protocol` instead.
 */
function magnitude(point) {
    return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
}
exports.magnitude = magnitude;
/**
 * Converts from radians to degrees
 * @param {number} a - A value in radians
 * @returns {number} The converted value
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function toDegrees(a) {
    return a * 180 / Math.PI;
}
exports.toDegrees = toDegrees;
/**
 * Converts from degrees to radians
 * @param {number} a - A value in degrees
 * @returns {number} The converted value
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function toRadians(a) {
    return a * Math.PI / 180;
}
exports.toRadians = toRadians;
/**
 * Returns whether two numbers are almost equal, within a small margin (0.001)
 * @param {number} a - First number
 * @param {number} b - Second number
 * @returns {boolean} True if the two numbers are almost equal
 *
 * @deprecated Use the declaration from `sprotty-protocol` instead.
 */
function almostEquals(a, b) {
    return Math.abs(a - b) < 1e-3;
}
exports.almostEquals = almostEquals;
/**
 * Calculates a linear combination of p0 and p1 using lambda, i.e.
 *   (1-lambda) * p0 + lambda * p1
 *
 * @deprecated Use `Point.linear` from `sprotty-protocol` instead.
 */
function linear(p0, p1, lambda) {
    return {
        x: (1 - lambda) * p0.x + lambda * p1.x,
        y: (1 - lambda) * p0.y + lambda * p1.y
    };
}
exports.linear = linear;
/**
 * A diamond or rhombus is a quadrilateral whose four sides all have the same length.
 * It consists of four points, a `topPoint`, `rightPoint`, `bottomPoint`, and a `leftPoint`,
 * which are connected by four lines -- the `topRightSideLight`, `topLeftSideLine`, `bottomRightSideLine`,
 * and the `bottomLeftSideLine`.
 */
class Diamond {
    constructor(bounds) {
        this.bounds = bounds;
    }
    get topPoint() {
        return {
            x: this.bounds.x + this.bounds.width / 2,
            y: this.bounds.y
        };
    }
    get rightPoint() {
        return {
            x: this.bounds.x + this.bounds.width,
            y: this.bounds.y + this.bounds.height / 2
        };
    }
    get bottomPoint() {
        return {
            x: this.bounds.x + this.bounds.width / 2,
            y: this.bounds.y + this.bounds.height
        };
    }
    get leftPoint() {
        return {
            x: this.bounds.x,
            y: this.bounds.y + this.bounds.height / 2
        };
    }
    get topRightSideLine() {
        return new PointToPointLine(this.topPoint, this.rightPoint);
    }
    get topLeftSideLine() {
        return new PointToPointLine(this.topPoint, this.leftPoint);
    }
    get bottomRightSideLine() {
        return new PointToPointLine(this.bottomPoint, this.rightPoint);
    }
    get bottomLeftSideLine() {
        return new PointToPointLine(this.bottomPoint, this.leftPoint);
    }
    /**
     * Return the closest side of this diamond to the specified `refPoint`.
     * @param {Point} refPoint a reference point
     * @returns {Line} a line representing the closest side
     */
    closestSideLine(refPoint) {
        const c = center(this.bounds);
        if (refPoint.x > c.x) {
            if (refPoint.y > c.y) {
                return this.bottomRightSideLine;
            }
            else {
                return this.topRightSideLine;
            }
        }
        else {
            if (refPoint.y > c.y) {
                return this.bottomLeftSideLine;
            }
            else {
                return this.topLeftSideLine;
            }
        }
    }
}
exports.Diamond = Diamond;
/**
 * A line made up from two points.
 */
class PointToPointLine {
    constructor(p1, p2) {
        this.p1 = p1;
        this.p2 = p2;
    }
    get a() {
        return this.p1.y - this.p2.y;
    }
    get b() {
        return this.p2.x - this.p1.x;
    }
    get c() {
        return this.p2.x * this.p1.y - this.p1.x * this.p2.y;
    }
    /**
     * The counter-clockwise angle of this line relative to the x-axis.
     */
    get angle() {
        return Math.atan2(-this.a, this.b);
    }
    /**
     * The slope of the line.
     * A vertical line returns `undefined`.
     */
    get slope() {
        if (this.b === 0)
            return undefined;
        return this.a / this.b;
    }
    /**
     * The slope of the line or `Number.MAX_SAFE_INTEGER` if vertical.
     */
    get slopeOrMax() {
        if (this.slope === undefined) {
            return Number.MAX_SAFE_INTEGER;
        }
        return this.slope;
    }
    /**
     * The direction of this line, such as 'north', 'south', or 'south-west'.
     */
    get direction() {
        const hDegrees = toDegrees(this.angle);
        const degrees = hDegrees < 0 ? 360 + hDegrees : hDegrees;
        // degrees are relative to the x-axis
        if (degrees === 90) {
            return 'south';
        }
        else if (degrees === 0 || degrees === 360) {
            return 'east';
        }
        else if (degrees === 270) {
            return 'north';
        }
        else if (degrees === 180) {
            return 'west';
        }
        else if (degrees > 0 && degrees < 90) {
            return 'south-east';
        }
        else if (degrees > 90 && degrees < 180) {
            return 'south-west';
        }
        else if (degrees > 180 && degrees < 270) {
            return 'north-west';
        }
        else if (degrees > 270 && degrees < 360) {
            return 'north-east';
        }
        throw new Error(`Cannot determine direction of line (${this.p1.x},${this.p1.y}) to (${this.p2.x},${this.p2.y})`);
    }
    /**
     * @param otherLine the other line
     * @returns the intersection point between `this` line and the `otherLine` if exists, or `undefined`.
     */
    intersection(otherLine) {
        if (this.hasIndistinctPoints(otherLine)) {
            return undefined;
        }
        const x1 = this.p1.x;
        const y1 = this.p1.y;
        const x2 = this.p2.x;
        const y2 = this.p2.y;
        const x3 = otherLine.p1.x;
        const y3 = otherLine.p1.y;
        const x4 = otherLine.p2.x;
        const y4 = otherLine.p2.y;
        const denominator = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));
        if (denominator === 0) {
            return undefined;
        }
        const numeratorA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));
        const numeratorB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));
        if (numeratorA === 0 && numeratorB === 0) {
            return undefined;
        }
        const determinantA = numeratorA / denominator;
        const determinantB = numeratorB / denominator;
        if (determinantA < 0 || determinantA > 1 || determinantB < 0 || determinantB > 1) {
            return undefined;
        }
        const x = x1 + (determinantA * (x2 - x1));
        const y = y1 + (determinantA * (y2 - y1));
        return { x, y };
    }
    /**
     * @param otherLine the other line
     * @returns whether the start and end point of this line is does not have distinct start
     * or end points with the `otherLine`
     */
    hasIndistinctPoints(otherLine) {
        return pointEquals(this.p1, otherLine.p1) ||
            pointEquals(this.p1, otherLine.p2) ||
            pointEquals(this.p2, otherLine.p1) ||
            pointEquals(this.p2, otherLine.p2);
    }
}
exports.PointToPointLine = PointToPointLine;
/**
 * Returns the intersection of two lines `l1` and `l2`
 * @param {Line} l1 - A line
 * @param {Line} l2 - Another line
 * @returns {Point} The intersection point of `l1` and `l2`
 */
function intersection(l1, l2) {
    return {
        x: (l1.c * l2.b - l2.c * l1.b) / (l1.a * l2.b - l2.a * l1.b),
        y: (l1.a * l2.c - l2.a * l1.c) / (l1.a * l2.b - l2.a * l1.b)
    };
}
exports.intersection = intersection;


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/inversify.js":
/*!*****************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/inversify.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2019-2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isInjectable = void 0;
function isInjectable(constr) {
    return Reflect.getMetadata('inversify:paramtypes', constr) !== undefined;
}
exports.isInjectable = isInjectable;


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/iterable.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/iterable.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.mapIterable = exports.filterIterable = exports.DONE_RESULT = exports.toArray = exports.FluentIterableImpl = void 0;
/**
 * A helper class that allows to easily create fluent iterables.
 */
class FluentIterableImpl {
    constructor(startFn, nextFn) {
        this.startFn = startFn;
        this.nextFn = nextFn;
    }
    [Symbol.iterator]() {
        const iterator = {
            state: this.startFn(),
            next: () => this.nextFn(iterator.state),
            [Symbol.iterator]: () => iterator
        };
        return iterator;
    }
    filter(callback) {
        return filterIterable(this, callback);
    }
    map(callback) {
        return mapIterable(this, callback);
    }
    forEach(callback) {
        const iterator = this[Symbol.iterator]();
        let index = 0;
        let result;
        do {
            result = iterator.next();
            if (result.value !== undefined)
                callback(result.value, index);
            index++;
        } while (!result.done);
    }
    indexOf(element) {
        const iterator = this[Symbol.iterator]();
        let index = 0;
        let result;
        do {
            result = iterator.next();
            if (result.value === element)
                return index;
            index++;
        } while (!result.done);
        return -1;
    }
}
exports.FluentIterableImpl = FluentIterableImpl;
/**
 * Converts a FluentIterable into an array. If the input is an array, it is returned unchanged.
 */
function toArray(input) {
    if (input.constructor === Array) {
        return input;
    }
    const result = [];
    input.forEach(element => result.push(element));
    return result;
}
exports.toArray = toArray;
exports.DONE_RESULT = Object.freeze({ done: true, value: undefined });
/**
 * Create a fluent iterable that filters the content of the given iterable or array.
 */
function filterIterable(input, callback) {
    return new FluentIterableImpl(() => createIterator(input), (iterator) => {
        let result;
        do {
            result = iterator.next();
        } while (!result.done && !callback(result.value));
        return result;
    });
}
exports.filterIterable = filterIterable;
/**
 * Create a fluent iterable that maps the content of the given iterable or array.
 */
function mapIterable(input, callback) {
    return new FluentIterableImpl(() => createIterator(input), (iterator) => {
        const { done, value } = iterator.next();
        if (done)
            return exports.DONE_RESULT;
        else
            return { done: false, value: callback(value) };
    });
}
exports.mapIterable = mapIterable;
/**
 * Create an iterator for the given iterable or array.
 */
function createIterator(collection) {
    const method = collection[Symbol.iterator];
    if (typeof method === 'function') {
        return method.call(collection);
    }
    const length = collection.length;
    if (typeof length === 'number' && length >= 0) {
        return new ArrayIterator(collection);
    }
    return { next: () => exports.DONE_RESULT };
}
/**
 * Iterator implementation for arrays.
 */
class ArrayIterator {
    constructor(array) {
        this.array = array;
        this.index = 0;
    }
    next() {
        if (this.index < this.array.length)
            return { done: false, value: this.array[this.index++] };
        else
            return exports.DONE_RESULT;
    }
    [Symbol.iterator]() {
        return this;
    }
}


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/json.js":
/*!************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/json.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/keyboard.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/keyboard.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/********************************************************************************
 * Copyright (c) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getActualCode = exports.matchesKeystroke = void 0;
const browser_1 = __webpack_require__(/*! ./browser */ "./node_modules/sprotty/lib/utils/browser.js");
/**
 * Returns whether the keyboard event matches the keystroke described by the given
 * code and modifiers. The code must comply to the format of the `code` property
 * of KeyboardEvent, but in contrast to that property, the actual keyboard layout is
 * considered by this function if possible.
 */
function matchesKeystroke(event, code, ...modifiers) {
    if (getActualCode(event) !== code)
        return false;
    if ((0, browser_1.isMac)()) {
        if (event.ctrlKey !== (modifiers.findIndex(m => m === 'ctrl') >= 0))
            return false;
        if (event.metaKey !== (modifiers.findIndex(m => m === 'meta' || m === 'ctrlCmd') >= 0))
            return false;
    }
    else {
        if (event.ctrlKey !== (modifiers.findIndex(m => m === 'ctrl' || m === 'ctrlCmd') >= 0))
            return false;
        if (event.metaKey !== (modifiers.findIndex(m => m === 'meta') >= 0))
            return false;
    }
    if (event.altKey !== (modifiers.findIndex(m => m === 'alt') >= 0))
        return false;
    if (event.shiftKey !== (modifiers.findIndex(m => m === 'shift') >= 0))
        return false;
    return true;
}
exports.matchesKeystroke = matchesKeystroke;
/**
 * Determines a key code from the given event. This is necessary because the `code` property of
 * a KeyboardEvent does not consider keyboard layouts.
 */
function getActualCode(event) {
    if (event.keyCode) {
        const result = STRING_CODE[event.keyCode];
        if (result !== undefined)
            return result;
    }
    return event.code;
}
exports.getActualCode = getActualCode;
const STRING_CODE = new Array(256);
(() => {
    function addKeyCode(stringCode, numericCode) {
        if (STRING_CODE[numericCode] === undefined)
            STRING_CODE[numericCode] = stringCode;
    }
    addKeyCode('Pause', 3);
    addKeyCode('Backspace', 8);
    addKeyCode('Tab', 9);
    addKeyCode('Enter', 13);
    addKeyCode('ShiftLeft', 16);
    addKeyCode('ShiftRight', 16);
    addKeyCode('ControlLeft', 17);
    addKeyCode('ControlRight', 17);
    addKeyCode('AltLeft', 18);
    addKeyCode('AltRight', 18);
    addKeyCode('CapsLock', 20);
    addKeyCode('Escape', 27);
    addKeyCode('Space', 32);
    addKeyCode('PageUp', 33);
    addKeyCode('PageDown', 34);
    addKeyCode('End', 35);
    addKeyCode('Home', 36);
    addKeyCode('ArrowLeft', 37);
    addKeyCode('ArrowUp', 38);
    addKeyCode('ArrowRight', 39);
    addKeyCode('ArrowDown', 40);
    addKeyCode('Insert', 45);
    addKeyCode('Delete', 46);
    addKeyCode('Digit1', 49);
    addKeyCode('Digit2', 50);
    addKeyCode('Digit3', 51);
    addKeyCode('Digit4', 52);
    addKeyCode('Digit5', 53);
    addKeyCode('Digit6', 54);
    addKeyCode('Digit7', 55);
    addKeyCode('Digit8', 56);
    addKeyCode('Digit9', 57);
    addKeyCode('Digit0', 48);
    addKeyCode('KeyA', 65);
    addKeyCode('KeyB', 66);
    addKeyCode('KeyC', 67);
    addKeyCode('KeyD', 68);
    addKeyCode('KeyE', 69);
    addKeyCode('KeyF', 70);
    addKeyCode('KeyG', 71);
    addKeyCode('KeyH', 72);
    addKeyCode('KeyI', 73);
    addKeyCode('KeyJ', 74);
    addKeyCode('KeyK', 75);
    addKeyCode('KeyL', 76);
    addKeyCode('KeyM', 77);
    addKeyCode('KeyN', 78);
    addKeyCode('KeyO', 79);
    addKeyCode('KeyP', 80);
    addKeyCode('KeyQ', 81);
    addKeyCode('KeyR', 82);
    addKeyCode('KeyS', 83);
    addKeyCode('KeyT', 84);
    addKeyCode('KeyU', 85);
    addKeyCode('KeyV', 86);
    addKeyCode('KeyW', 87);
    addKeyCode('KeyX', 88);
    addKeyCode('KeyY', 89);
    addKeyCode('KeyZ', 90);
    addKeyCode('OSLeft', 91);
    addKeyCode('MetaLeft', 91);
    addKeyCode('OSRight', 92);
    addKeyCode('MetaRight', 92);
    addKeyCode('ContextMenu', 93);
    addKeyCode('Numpad0', 96);
    addKeyCode('Numpad1', 97);
    addKeyCode('Numpad2', 98);
    addKeyCode('Numpad3', 99);
    addKeyCode('Numpad4', 100);
    addKeyCode('Numpad5', 101);
    addKeyCode('Numpad6', 102);
    addKeyCode('Numpad7', 103);
    addKeyCode('Numpad8', 104);
    addKeyCode('Numpad9', 105);
    addKeyCode('NumpadMultiply', 106);
    addKeyCode('NumpadAdd', 107);
    addKeyCode('NumpadSeparator', 108);
    addKeyCode('NumpadSubtract', 109);
    addKeyCode('NumpadDecimal', 110);
    addKeyCode('NumpadDivide', 111);
    addKeyCode('F1', 112);
    addKeyCode('F2', 113);
    addKeyCode('F3', 114);
    addKeyCode('F4', 115);
    addKeyCode('F5', 116);
    addKeyCode('F6', 117);
    addKeyCode('F7', 118);
    addKeyCode('F8', 119);
    addKeyCode('F9', 120);
    addKeyCode('F10', 121);
    addKeyCode('F11', 122);
    addKeyCode('F12', 123);
    addKeyCode('F13', 124);
    addKeyCode('F14', 125);
    addKeyCode('F15', 126);
    addKeyCode('F16', 127);
    addKeyCode('F17', 128);
    addKeyCode('F18', 129);
    addKeyCode('F19', 130);
    addKeyCode('F20', 131);
    addKeyCode('F21', 132);
    addKeyCode('F22', 133);
    addKeyCode('F23', 134);
    addKeyCode('F24', 135);
    addKeyCode('NumLock', 144);
    addKeyCode('ScrollLock', 145);
    addKeyCode('Semicolon', 186);
    addKeyCode('Equal', 187);
    addKeyCode('Comma', 188);
    addKeyCode('Minus', 189);
    addKeyCode('Period', 190);
    addKeyCode('Slash', 191);
    addKeyCode('Backquote', 192);
    addKeyCode('IntlRo', 193);
    addKeyCode('BracketLeft', 219);
    addKeyCode('Backslash', 220);
    addKeyCode('BracketRight', 221);
    addKeyCode('Quote', 222);
    addKeyCode('IntlYen', 255);
})();


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/logging.js":
/*!***************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/logging.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConsoleLogger = exports.NullLogger = exports.LogLevel = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const types_1 = __webpack_require__(/*! ../base/types */ "./node_modules/sprotty/lib/base/types.js");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["none"] = 0] = "none";
    LogLevel[LogLevel["error"] = 1] = "error";
    LogLevel[LogLevel["warn"] = 2] = "warn";
    LogLevel[LogLevel["info"] = 3] = "info";
    LogLevel[LogLevel["log"] = 4] = "log";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
let NullLogger = class NullLogger {
    constructor() {
        this.logLevel = LogLevel.none;
    }
    error(thisArg, message, ...params) { }
    warn(thisArg, message, ...params) { }
    info(thisArg, message, ...params) { }
    log(thisArg, message, ...params) { }
};
NullLogger = __decorate([
    (0, inversify_1.injectable)()
], NullLogger);
exports.NullLogger = NullLogger;
let ConsoleLogger = class ConsoleLogger {
    constructor() {
        this.logLevel = LogLevel.log;
        this.viewOptions = { baseDiv: '' };
    }
    error(thisArg, message, ...params) {
        if (this.logLevel >= LogLevel.error)
            try {
                console.error.apply(thisArg, this.consoleArguments(thisArg, message, params));
            }
            catch (error) { }
    }
    warn(thisArg, message, ...params) {
        if (this.logLevel >= LogLevel.warn)
            try {
                console.warn.apply(thisArg, this.consoleArguments(thisArg, message, params));
            }
            catch (error) { }
    }
    info(thisArg, message, ...params) {
        if (this.logLevel >= LogLevel.info)
            try {
                console.info.apply(thisArg, this.consoleArguments(thisArg, message, params));
            }
            catch (error) { }
    }
    log(thisArg, message, ...params) {
        if (this.logLevel >= LogLevel.log)
            try {
                console.log.apply(thisArg, this.consoleArguments(thisArg, message, params));
            }
            catch (error) { }
    }
    consoleArguments(thisArg, message, params) {
        let caller;
        if (typeof thisArg === 'object')
            caller = thisArg.constructor.name;
        else
            caller = thisArg;
        const date = new Date();
        return [date.toLocaleTimeString() + ' ' + this.viewOptions.baseDiv + ' ' + caller + ': ' + message, ...params];
    }
};
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.LogLevel),
    __metadata("design:type", Number)
], ConsoleLogger.prototype, "logLevel", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], ConsoleLogger.prototype, "viewOptions", void 0);
ConsoleLogger = __decorate([
    (0, inversify_1.injectable)()
], ConsoleLogger);
exports.ConsoleLogger = ConsoleLogger;


/***/ }),

/***/ "./node_modules/sprotty/lib/utils/registry.js":
/*!****************************************************!*\
  !*** ./node_modules/sprotty/lib/utils/registry.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiInstanceRegistry = exports.InstanceRegistry = exports.FactoryRegistry = exports.ProviderRegistry = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let ProviderRegistry = class ProviderRegistry {
    constructor() {
        this.elements = new Map;
    }
    register(key, cstr) {
        if (key === undefined)
            throw new Error('Key is undefined');
        if (this.hasKey(key))
            throw new Error('Key is already registered: ' + key);
        this.elements.set(key, cstr);
    }
    deregister(key) {
        if (key === undefined)
            throw new Error('Key is undefined');
        this.elements.delete(key);
    }
    hasKey(key) {
        return this.elements.has(key);
    }
    get(key, arg) {
        const existingCstr = this.elements.get(key);
        if (existingCstr)
            return new existingCstr(arg);
        else
            return this.missing(key, arg);
    }
    missing(key, arg) {
        throw new Error('Unknown registry key: ' + key);
    }
};
ProviderRegistry = __decorate([
    (0, inversify_1.injectable)()
], ProviderRegistry);
exports.ProviderRegistry = ProviderRegistry;
let FactoryRegistry = class FactoryRegistry {
    constructor() {
        this.elements = new Map;
    }
    register(key, factory) {
        if (key === undefined)
            throw new Error('Key is undefined');
        if (this.hasKey(key))
            throw new Error('Key is already registered: ' + key);
        this.elements.set(key, factory);
    }
    deregister(key) {
        if (key === undefined)
            throw new Error('Key is undefined');
        this.elements.delete(key);
    }
    hasKey(key) {
        return this.elements.has(key);
    }
    get(key, arg) {
        const existingFactory = this.elements.get(key);
        if (existingFactory)
            return existingFactory(arg);
        else
            return this.missing(key, arg);
    }
    missing(key, arg) {
        throw new Error('Unknown registry key: ' + key);
    }
};
FactoryRegistry = __decorate([
    (0, inversify_1.injectable)()
], FactoryRegistry);
exports.FactoryRegistry = FactoryRegistry;
let InstanceRegistry = class InstanceRegistry {
    constructor() {
        this.elements = new Map;
    }
    register(key, instance) {
        if (key === undefined)
            throw new Error('Key is undefined');
        if (this.hasKey(key))
            throw new Error('Key is already registered: ' + key);
        this.elements.set(key, instance);
    }
    deregister(key) {
        if (key === undefined)
            throw new Error('Key is undefined');
        this.elements.delete(key);
    }
    hasKey(key) {
        return this.elements.has(key);
    }
    get(key) {
        const existingInstance = this.elements.get(key);
        if (existingInstance)
            return existingInstance;
        else
            return this.missing(key);
    }
    missing(key) {
        throw new Error('Unknown registry key: ' + key);
    }
};
InstanceRegistry = __decorate([
    (0, inversify_1.injectable)()
], InstanceRegistry);
exports.InstanceRegistry = InstanceRegistry;
let MultiInstanceRegistry = class MultiInstanceRegistry {
    constructor() {
        this.elements = new Map;
    }
    register(key, instance) {
        if (key === undefined)
            throw new Error('Key is undefined');
        const instances = this.elements.get(key);
        if (instances !== undefined)
            instances.push(instance);
        else
            this.elements.set(key, [instance]);
    }
    deregisterAll(key) {
        if (key === undefined)
            throw new Error('Key is undefined');
        this.elements.delete(key);
    }
    get(key) {
        const existingInstances = this.elements.get(key);
        if (existingInstances !== undefined)
            return existingInstances;
        else
            return [];
    }
};
MultiInstanceRegistry = __decorate([
    (0, inversify_1.injectable)()
], MultiInstanceRegistry);
exports.MultiInstanceRegistry = MultiInstanceRegistry;


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/tinyqueue/index.js":
/*!*****************************************!*\
  !*** ./node_modules/tinyqueue/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TinyQueue)
/* harmony export */ });

class TinyQueue {
    constructor(data = [], compare = defaultCompare) {
        this.data = data;
        this.length = this.data.length;
        this.compare = compare;

        if (this.length > 0) {
            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);
        }
    }

    push(item) {
        this.data.push(item);
        this.length++;
        this._up(this.length - 1);
    }

    pop() {
        if (this.length === 0) return undefined;

        const top = this.data[0];
        const bottom = this.data.pop();
        this.length--;

        if (this.length > 0) {
            this.data[0] = bottom;
            this._down(0);
        }

        return top;
    }

    peek() {
        return this.data[0];
    }

    _up(pos) {
        const {data, compare} = this;
        const item = data[pos];

        while (pos > 0) {
            const parent = (pos - 1) >> 1;
            const current = data[parent];
            if (compare(item, current) >= 0) break;
            data[pos] = current;
            pos = parent;
        }

        data[pos] = item;
    }

    _down(pos) {
        const {data, compare} = this;
        const halfLength = this.length >> 1;
        const item = data[pos];

        while (pos < halfLength) {
            let left = (pos << 1) + 1;
            let best = data[left];
            const right = left + 1;

            if (right < this.length && compare(data[right], best) < 0) {
                left = right;
                best = data[right];
            }
            if (compare(best, item) >= 0) break;

            data[pos] = best;
            pos = left;
        }

        data[pos] = item;
    }
}

function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}


/***/ }),

/***/ "./css/diagram.css":
/*!*************************!*\
  !*** ./css/diagram.css ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_diagram_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./diagram.css */ "./node_modules/css-loader/dist/cjs.js!./css/diagram.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_diagram_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_diagram_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_diagram_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_diagram_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/di.config.ts":
/*!**************************!*\
  !*** ./src/di.config.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const sprotty_1 = __webpack_require__(/*! sprotty */ "./node_modules/sprotty/lib/index.js");
const di_config_1 = __webpack_require__(/*! sprotty/lib/features/edge-intersection/di.config */ "./node_modules/sprotty/lib/features/edge-intersection/di.config.js");
const views_1 = __webpack_require__(/*! ./views */ "./src/views.tsx");
const popup_1 = __webpack_require__(/*! ./popup */ "./src/popup.ts");
const model_source_1 = __webpack_require__(/*! ./model-source */ "./src/model-source.ts");
const model_1 = __webpack_require__(/*! ./model */ "./src/model.ts");
const bezier_edge_router_1 = __webpack_require__(/*! sprotty/lib/features/routing/bezier-edge-router */ "./node_modules/sprotty/lib/features/routing/bezier-edge-router.js");
exports["default"] = (containerId) => {
    __webpack_require__(/*! ../css/diagram.css */ "./css/diagram.css");
    const classDiagramModule = new inversify_1.ContainerModule((bind, unbind, isBound, rebind) => {
        bind(sprotty_1.TYPES.ModelSource).to(model_source_1.ClassDiagramModelSource).inSingletonScope();
        rebind(sprotty_1.TYPES.ILogger).to(sprotty_1.ConsoleLogger).inSingletonScope();
        rebind(sprotty_1.TYPES.LogLevel).toConstantValue(sprotty_1.LogLevel.log);
        bind(sprotty_1.TYPES.IPopupModelProvider).to(popup_1.PopupModelProvider);
        bind(sprotty_1.TYPES.ICommandPaletteActionProvider).to(sprotty_1.RevealNamedElementActionProvider);
        bind(sprotty_1.TYPES.ISnapper).to(sprotty_1.CenterGridSnapper);
        bind(bezier_edge_router_1.BezierMouseListener).toSelf().inSingletonScope();
        bind(sprotty_1.TYPES.MouseListener).toService(bezier_edge_router_1.BezierMouseListener);
        const context = { bind, unbind, isBound, rebind };
        (0, sprotty_1.configureModelElement)(context, 'graph', sprotty_1.SGraph, sprotty_1.SGraphView);
        (0, sprotty_1.configureModelElement)(context, 'node:package', sprotty_1.RectangularNode, views_1.NodeView);
        (0, sprotty_1.configureModelElement)(context, 'node:class', model_1.ClassNode, views_1.NodeView, {
            enable: [sprotty_1.expandFeature, sprotty_1.nameFeature, sprotty_1.withEditLabelFeature]
        });
        (0, sprotty_1.configureModelElement)(context, 'label:heading', model_1.ClassLabel, sprotty_1.SLabelView, {
            enable: [sprotty_1.editLabelFeature]
        });
        (0, sprotty_1.configureModelElement)(context, 'label:text', model_1.PropertyLabel, sprotty_1.SLabelView, {
            enable: [sprotty_1.editLabelFeature]
        });
        (0, sprotty_1.configureModelElement)(context, 'comp:comp', sprotty_1.SCompartment, sprotty_1.SCompartmentView);
        (0, sprotty_1.configureModelElement)(context, 'comp:header', sprotty_1.SCompartment, sprotty_1.SCompartmentView);
        (0, sprotty_1.configureModelElement)(context, 'comp:pkgcontent', sprotty_1.SCompartment, sprotty_1.SCompartmentView);
        (0, sprotty_1.configureModelElement)(context, 'edge:straight', sprotty_1.SEdge, sprotty_1.JumpingPolylineEdgeView);
        (0, sprotty_1.configureModelElement)(context, 'edge:bezier', sprotty_1.SEdge, sprotty_1.BezierCurveEdgeView);
        (0, sprotty_1.configureModelElement)(context, 'html', sprotty_1.HtmlRoot, sprotty_1.HtmlRootView);
        (0, sprotty_1.configureModelElement)(context, 'pre-rendered', sprotty_1.PreRenderedElement, sprotty_1.PreRenderedView);
        (0, sprotty_1.configureModelElement)(context, 'button:expand', sprotty_1.SButton, sprotty_1.ExpandButtonView);
        (0, sprotty_1.configureModelElement)(context, 'routing-point', sprotty_1.SRoutingHandle, sprotty_1.SRoutingHandleView);
        (0, sprotty_1.configureModelElement)(context, 'volatile-routing-point', sprotty_1.SRoutingHandle, sprotty_1.SRoutingHandleView);
        (0, sprotty_1.configureModelElement)(context, 'bezier-create-routing-point', sprotty_1.SRoutingHandle, sprotty_1.SBezierCreateHandleView);
        (0, sprotty_1.configureModelElement)(context, 'bezier-remove-routing-point', sprotty_1.SRoutingHandle, sprotty_1.SBezierCreateHandleView);
        (0, sprotty_1.configureModelElement)(context, 'bezier-routing-point', sprotty_1.SRoutingHandle, sprotty_1.SBezierControlHandleView);
        (0, sprotty_1.configureViewerOptions)(context, {
            needsClientLayout: true,
            baseDiv: containerId
        });
    });
    const container = new inversify_1.Container();
    (0, sprotty_1.loadDefaultModules)(container);
    container.load(di_config_1.default);
    container.load(classDiagramModule);
    return container;
};


/***/ }),

/***/ "./src/model-source.ts":
/*!*****************************!*\
  !*** ./src/model-source.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClassDiagramModelSource = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const sprotty_1 = __webpack_require__(/*! sprotty */ "./node_modules/sprotty/lib/index.js");
let graph;
let ClassDiagramModelSource = class ClassDiagramModelSource extends sprotty_1.LocalModelSource {
    constructor() {
        super();
        this.currentRoot = this.initializeModel();
    }
    initialize(registry) {
        super.initialize(registry);
    }
    initializeModel() {
        const localGraph = {
            id: 'graph',
            type: 'graph',
            children: [],
            layoutOptions: {
                hGap: 5,
                hAlign: 'left',
                paddingLeft: 7,
                paddingRight: 7,
                paddingTop: 7,
                paddingBottom: 7
            }
        };
        graph = localGraph;
        return localGraph;
    }
    modifyGraph(ids, labels, srcId, tgtId) {
        let i = 0;
        ids.forEach(element => {
            let node = {
                id: element,
                type: "node:class",
                position: {
                    x: calculatePosition(i),
                    y: calculatePosition(i)
                },
                layout: 'vbox',
                children: [
                    {
                        id: 'node' + i + '_header',
                        type: 'comp:header',
                        layout: 'hbox',
                        children: [
                            {
                                id: "node" + i + "header",
                                type: 'label:heading',
                                text: labels[i]
                            }
                        ]
                    },
                ]
            };
            graph.children.push(node);
            i++;
        });
        i = 0;
        srcId.forEach(element => {
            let edge = {
                id: "edge" + i,
                type: "edge:straight",
                sourceId: element,
                targetId: tgtId[i]
            };
            graph.children.push(edge);
            i++;
        });
    }
};
ClassDiagramModelSource = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], ClassDiagramModelSource);
exports.ClassDiagramModelSource = ClassDiagramModelSource;
function calculatePosition(elemento) {
    if (elemento == 2) {
        return 0;
    }
    else
        return 100 * elemento + 100;
}


/***/ }),

/***/ "./src/model.ts":
/*!**********************!*\
  !*** ./src/model.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PropertyLabel = exports.ClassLabel = exports.ClassNode = void 0;
const sprotty_1 = __webpack_require__(/*! sprotty */ "./node_modules/sprotty/lib/index.js");
class ClassNode extends sprotty_1.RectangularNode {
    constructor() {
        super(...arguments);
        this.expanded = false;
    }
    get editableLabel() {
        const headerComp = this.children.find(element => element.type === 'comp:header');
        if (headerComp) {
            const label = headerComp.children.find(element => element.type === 'label:heading');
            if (label && (0, sprotty_1.isEditableLabel)(label)) {
                return label;
            }
        }
        return undefined;
    }
    get name() {
        if (this.editableLabel) {
            return this.editableLabel.text;
        }
        return this.id;
    }
}
exports.ClassNode = ClassNode;
class ClassLabel extends sprotty_1.SLabel {
}
exports.ClassLabel = ClassLabel;
class PropertyLabel extends sprotty_1.SLabel {
}
exports.PropertyLabel = PropertyLabel;


/***/ }),

/***/ "./src/popup.ts":
/*!**********************!*\
  !*** ./src/popup.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PopupModelProvider = void 0;
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
const sprotty_1 = __webpack_require__(/*! sprotty */ "./node_modules/sprotty/lib/index.js");
let PopupModelProvider = class PopupModelProvider {
    getPopupModel(request, element) {
        if (element !== undefined && element.type === 'node:class') {
            const node = this.modelFactory.createElement(element);
            return {
                type: 'html',
                id: 'popup',
                children: [
                    {
                        type: 'pre-rendered',
                        id: 'popup-title',
                        code: `<div class="sprotty-popup-title"><span class="fa fa-info-circle"/> Class ${node.name}</div>`
                    },
                    {
                        type: 'pre-rendered',
                        id: 'popup-body',
                        code: '<div class="sprotty-popup-body">But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness.</div>'
                    }
                ]
            };
        }
        return undefined;
    }
};
__decorate([
    (0, inversify_1.inject)(sprotty_1.TYPES.IModelFactory),
    __metadata("design:type", Object)
], PopupModelProvider.prototype, "modelFactory", void 0);
PopupModelProvider = __decorate([
    (0, inversify_1.injectable)()
], PopupModelProvider);
exports.PopupModelProvider = PopupModelProvider;


/***/ }),

/***/ "./src/standalone.ts":
/*!***************************!*\
  !*** ./src/standalone.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.runClassDiagram = void 0;
const di_config_1 = __webpack_require__(/*! ./di.config */ "./src/di.config.ts");
const sprotty_1 = __webpack_require__(/*! sprotty */ "./node_modules/sprotty/lib/index.js");
function runClassDiagram() {
    const container = (0, di_config_1.default)('sprotty');
    let ids = document.currentScript.getAttribute("ids").split(",");
    let labels = document.currentScript.getAttribute("labels").split(",");
    let srcId = document.currentScript.getAttribute("srcIds").split(",");
    let tgtId = document.currentScript.getAttribute("tgtIds").split(",");
    console.log(ids);
    console.log(labels);
    console.log(srcId);
    console.log(tgtId);
    const modelSource = container.get(sprotty_1.TYPES.ModelSource);
    modelSource.updateModel();
    modelSource.modifyGraph(ids, labels, srcId, tgtId);
    modelSource.updateModel();
}
exports.runClassDiagram = runClassDiagram;


/***/ }),

/***/ "./src/views.tsx":
/*!***********************!*\
  !*** ./src/views.tsx ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NodeView = void 0;
/** @jsx svg */
const jsx_1 = __webpack_require__(/*! sprotty/lib/lib/jsx */ "./node_modules/sprotty/lib/lib/jsx.js");
const sprotty_1 = __webpack_require__(/*! sprotty */ "./node_modules/sprotty/lib/index.js");
const inversify_1 = __webpack_require__(/*! inversify */ "./node_modules/inversify/lib/inversify.js");
let NodeView = class NodeView extends sprotty_1.RectangularNodeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("rect", { "class-sprotty-node": true, "class-node-package": node.type === 'node:package', "class-node-class": node.type === 'node:class', "class-mouseover": node.hoverFeedback, "class-selected": node.selected, x: "0", y: "0", width: Math.max(node.size.width, 0), height: Math.max(node.size.height, 0) }),
            context.renderChildren(node));
    }
};
NodeView = __decorate([
    (0, inversify_1.injectable)()
], NodeView);
exports.NodeView = NodeView;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!************************!*\
  !*** ./browser-app.ts ***!
  \************************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
__webpack_require__(/*! reflect-metadata */ "./node_modules/reflect-metadata/Reflect.js");
__webpack_require__(/*! reflect-metadata */ "./node_modules/reflect-metadata/Reflect.js");
const standalone_1 = __webpack_require__(/*! ./src/standalone */ "./src/standalone.ts");
const appDiv = document.getElementById('sprotty-app');
if (appDiv) {
    const appMode = appDiv.getAttribute('data-app');
    if (appMode === 'class-diagram')
        (0, standalone_1.runClassDiagram)();
    else
        throw new Error('Dunno what to do :-(');
}

})();

/******/ })()
;
//# sourceMappingURL=bundle.js.map